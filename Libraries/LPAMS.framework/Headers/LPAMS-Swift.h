#if TARGET_OS_SIMULATOR
// Headers for Simulator
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import LPInfra;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LPAMS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC5LPAMS22ConnectionStateManager")
@interface ConnectionStateManager : NSObject <GeneralManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConnectionStateManager * _Nonnull instance SWIFT_DEPRECATED_OBJC("Swift property 'ConnectionStateManager.instance' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");)
+ (ConnectionStateManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift property 'ConnectionStateManager.instance' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)clearManager;
@end

@class EngagementHistoryRequest;
@class LPMessageEntity;
@class EngagementHistoryConsumerMessagesResponse;
@class LPFileEntity;

SWIFT_CLASS("_TtC5LPAMS24EngagementHistoryManager")
@interface EngagementHistoryManager : NSObject
/// Get conversation histroy from Engagement History API for consumers.
/// Method of request will be based on the request param that passed to this method.
/// \param request EngagementHistoryRequest request to detemine which type of request history and which details
///
/// \param completion completion block with EngagementHistoryResponseForConsumer object including all data
///
/// \param failure failure block with error
///
+ (void)getConsumerMessagesForConversationWithRequest:(EngagementHistoryRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSArray<LPMessageEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.getConsumerMessagesForConversation(request:completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Handle history response for all related conversations and messages
/// \param response EngagementHistoryResponse
///
+ (NSArray<LPMessageEntity *> * _Nonnull)handleConsumerMessagesResponse:(EngagementHistoryConsumerMessagesResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.handleConsumerMessagesResponse(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Generate full download url for file sharing from Inca (Engagement History).
/// This method should be used when downloading a file from a conversation that resides in Inca
/// \param file file to generate the url for
///
/// \param completion completion block with the full download url
///
/// \param failure failure block with error
///
+ (void)generateFileSharingDownloadURLForFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(NSString * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.generateFileSharingDownloadURL(forFile:completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ConversationParamProtocol;
@class LPAuthenticationParams;
@protocol LPAMSFacadeDelegate;
@class LPBrandEntity;
@class LPConversationEntity;
@class LPDialogEntity;
@class NSError;
@class LPUser;
@class CSATModel;
enum SocketType : NSInteger;
@class LPWelcomeMessage;
@class UploadInfo;
@class RequestSwiftURL;
@class LPFormEntity;
@class WKWebView;
@class Ring;
@class LPLinkPreviewEntity;
@class QuickReplyItem;

/// Full API to UMS protocol, Used is to control and send applicative events
SWIFT_CLASS("_TtC5LPAMS11LPAMSFacade")
@interface LPAMSFacade : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the AMS Facade delegate and the conversation handler
///
/// returns:
/// [bool] : true if all initializations are successful.
+ (BOOL)initializeAMS SWIFT_WARN_UNUSED_RESULT;
/// A methods to update the AMS state
///
/// returns:
/// [bool] : true if all initializations are successful.
+ (void)updateAMSState:(id <ConversationParamProtocol> _Nonnull)conversationQuery state:(enum AMSState)state;
/// Perform connect to socket for conversationQuery
/// @param:
/// <ul>
///   <li>
///     optional ready completion which will be called after the socket is connected
///   </li>
/// </ul>
+ (void)connectToSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery readyCompletion:(void (^ _Nullable)(void))readyCompletion;
/// Perform reconnect to socket for conversationQuery:
/// <ul>
///   <li>
///     Remove the websocket handler
///   </li>
///   <li>
///     connect to socket
///     @param:
///   </li>
///   <li>
///     optional ready completion which will be called after the socket is connected
///   </li>
///   <li>
///     optional an LPAuthenticationParams object to determine the properties of an authenticated connection. LPAuthenticationParams supports Code Flow login or Implicit Flow login.
///   </li>
/// </ul>
+ (void)reconnectToSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationParams:(LPAuthenticationParams * _Nonnull)authenticationParams readyCompletion:(void (^ _Nullable)(void))readyCompletion;
/// Perform disconnect from socket for conversationQuery.
/// You can choose to disconnect the socket aftet delay of predefined time
/// \param conversationQuery conversationQuery where to socket belongs to
///
/// \param shouldUseDelay determines whether to keep socket open for delay
///
+ (void)disconnectSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// Clear history of all closed conversations and their messages from the database.
/// This method is allowed only if there is no active/open conversation.
+ (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery isClearOpenConversation:(BOOL)isClearOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Delete all conversations and their messages from the database, which older than X months.
/// The number of months allowed is defined in LPConfig with attribute: deleteClosedConversationOlderThanMonths
+ (void)deleteOldConversations;
/// Set AMSManagerDelegate implementor
+ (void)setDelegate:(id <LPAMSFacadeDelegate> _Nonnull)delegate;
/// Remove AMSManagerDelegate implementor
+ (void)removeDelegate:(id <LPAMSFacadeDelegate> _Nonnull)delegate;
/// Create new conversation instance
+ (LPConversationEntity * _Nonnull)createConversation:(LPBrandEntity * _Nonnull)brand SWIFT_WARN_UNUSED_RESULT;
/// Send message from a Message instance related to an owner conversation
+ (void)sendMessageInDialog:(LPDialogEntity * _Nonnull)dialog message:(LPMessageEntity * _Nonnull)message completion:(void (^ _Nonnull)(LPMessageEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send message from a text string related to an owner conversation
/// This method will create new Message instance in the database.
/// Messages might be masked depending on regex and masking from LPConfig
+ (void)sendMessageInDialog:(LPDialogEntity * _Nonnull)dialog text:(NSString * _Nonnull)text metadata:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)metadata completion:(void (^ _Nonnull)(LPMessageEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Resolve/End a conversation from the user side
+ (void)resolveConversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nullable)(void))completion;
+ (void)resolveConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversation(_ conversation: Conversation, completion: (() -> Void)? = {()}) instead");
+ (void)resolveConversationForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completion:(void (^ _Nullable)(void))completion;
+ (void)resolveConversationForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversationForConversationQuery(_ conversationQuery: ConversationParamProtocol, completion: (() -> Void)? = {()}) instead");
/// Resolve/End a Dialog from the user side
+ (void)closeDialog:(LPDialogEntity * _Nonnull)dialog;
/// This methods returns the assigned agent of the active or the latest closed conversation, if exists.
+ (LPUser * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Request to change the conversation urgency status to on/off
+ (BOOL)requestUrgentResponse:(LPConversationEntity * _Nonnull)conversation urgent:(BOOL)urgent SWIFT_WARN_UNUSED_RESULT;
+ (void)changeUrgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery isUrgent:(BOOL)isUrgent;
/// Retreive new messages from server for an owner converation
+ (void)retrieveNewMessagesForConversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nullable)(NSArray<LPMessageEntity *> * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Submit CSAT to the server for an owner conversation
/// CSAT model is based on: rate of the csat, resolutionConfirmation toggle and wether csat is skipped or not
+ (void)sendCSAT:(LPConversationEntity * _Nonnull)conversation csat:(CSATModel * _Nonnull)csat;
/// Subscribe for exConversation notifications per for brandID
/// Use last updated time from the saved subscription times dictionary
/// Note: if there is an existing previous subscriptionID, unregister it before registering new one.
+ (void)subscribeConversationNotifications:(NSString * _Nonnull)brandID userID:(NSString * _Nonnull)userID socketType:(enum SocketType)socketType completion:(void (^ _Nullable)(NSString * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Unsubscribe from exConversation notifications per brandID for subscriptionID
+ (void)unsubscribeConversationNotifications:(NSString * _Nonnull)brandID subscriptionID:(NSString * _Nonnull)subscriptionID;
/// Subscribe to routing tasks notification in order to get new rings for Agent
/// \param brandID brandID to subscribe for
///
/// \param agentID agentID to get new rings for
///
/// \param completion completion with subscriptionID
///
/// \param failure failure
///
+ (void)subscribeRoutingTasks:(NSString * _Nonnull)brandID agentID:(NSString * _Nonnull)agentID completion:(void (^ _Nullable)(NSString * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// This method determines wether a brandID is Ready.
/// Ready means that the brand is connected and conversation can be proccessed.
+ (BOOL)isBrandReady:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the active conversation of a conversation query marked as Urgent.
/// Return value:
/// True - conversation is marked as Urgent.
/// False - conversation is not marked as Urgent.
+ (BOOL)isUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// This method checks for an active(Open/Created) conversation according to conversation query.
/// Return value:
/// True - there is an active conversation.
/// False - there is no active conversation.
+ (BOOL)checkActiveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Determines whether history query messages already fecthced
+ (BOOL)didFetchHistoryMessagingEventNotifications SWIFT_WARN_UNUSED_RESULT;
/// Determines whether history query messages is now being fetched
+ (BOOL)isFetchingHistoryMessages SWIFT_WARN_UNUSED_RESULT;
/// Determines the name of the assigned agent that should be presented in UI areas.
/// If assigned agent exists and has a nickname - return it. Otherwise, return nil.
/// If nil is returned, it should be handled according to UI area
+ (NSString * _Nullable)agentNameUIRepresentation:(LPDialogEntity * _Nullable)dialog SWIFT_WARN_UNUSED_RESULT;
/// Create resolved system message for conversation, according to resolving side
/// Timestamp - when agent resolved we take the timestamp from server, when consumer resolved we take now.
+ (LPMessageEntity * _Nullable)createResolveLocalMessage:(LPDialogEntity * _Nonnull)dialog endTime:(NSDate * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
/// Creates local system message for masked message according to the current masking type:
/// \param dialog dialog that the message will be added to
///
/// \param isRealTimeMasking should the system message text represent real time masking or client side masking
///
///
/// returns:
/// local masked message, nil if failed
+ (LPMessageEntity * _Nullable)createMessageMaskedLocalMessage:(LPDialogEntity * _Nonnull)dialog isRealTimeMasking:(BOOL)isRealTimeMasking SWIFT_WARN_UNUSED_RESULT;
/// Creates welcome local system message for dialog
+ (LPMessageEntity * _Nullable)createWelcomeLocalMessage:(LPDialogEntity * _Nonnull)dialog overrideTime:(NSDate * _Nonnull)overrideTime SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=12.2.0,obsoleted=14.0.0,message="Use createWelcomeLocalMessage(_ dialog: Dialog, welcomeMessage: LPWelcomeMessage, overrideTime: Date = Date()) -> Message? instead");
/// Creates welcome local system message for dialog
+ (LPMessageEntity * _Nullable)createWelcomeLocalMessage:(LPDialogEntity * _Nonnull)dialog welcomeMessage:(LPWelcomeMessage * _Nonnull)welcomeMessage overrideTime:(NSDate * _Nonnull)overrideTime SWIFT_WARN_UNUSED_RESULT;
/// Get client properties to be sent to AMS using predefiend AMS parameters.
/// This method is used for sending information to AMS
+ (NSString * _Nonnull)clientPropertiesString SWIFT_WARN_UNUSED_RESULT;
/// Upload file from file info object
/// \param uploadInfo upload info object. Includes all necessary info about required file to upload
///
/// \param conversation conversation that the file will be added to
///
/// \param completion complition handler
///
/// \param failure failure handler
///
+ (void)uploadFileFromInfoWithUploadInfo:(UploadInfo * _Nonnull)uploadInfo dialog:(LPDialogEntity * _Nonnull)dialog completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Uploading file that is saved on disk (mainly for failed messages)
+ (void)uploadFileFromDiskWithMessage:(LPMessageEntity * _Nonnull)message dialog:(LPDialogEntity * _Nonnull)dialog completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Downloads a file from Swift server and returns an image to show
+ (void)downloadFileWithDialog:(LPDialogEntity * _Nonnull)dialog file:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Requests the AMS for an upload url for swift server
+ (void)requestUploadURLWithDialog:(LPDialogEntity * _Nonnull)dialog fileSize:(double)fileSize fileExtention:(NSString * _Nonnull)fileExtention completion:(void (^ _Nonnull)(RequestSwiftURL * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Requests the AMS for a download url from swift server
+ (void)requestDownloadURLWithDialog:(LPDialogEntity * _Nonnull)dialog file:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(id _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Searches for a link preview url in the message content. If the LinkPreview feature is disabled, will return nil
/// This method ignores email links!
/// \param messageContent message content to search URL from
///
///
/// returns:
/// If LinkPreview feature enabled and link exist - returns the first link URL, else returns nil.
+ (NSURL * _Nullable)linkPreviewUrlFrom:(NSString * _Nonnull)messageContent SWIFT_WARN_UNUSED_RESULT;
/// Prepare secure form URL which allows to open a form to read
/// This method generates read and write OTK from UMS and build URL to be used for PCI GW
/// \param form form object to get the url for
///
/// \param completion completion block when the form is ready - url and token are valid
///
/// \param failure failure block with error
///
+ (void)prepareSecureFormWithForm:(LPFormEntity * _Nonnull)form completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Determine whether a form has already been loaded in the webview before and can be re-used
/// \param form the form the check for
///
///
/// returns:
/// true if form has been loaded, else false
+ (BOOL)hasSecureFormAlreadyLoadedInWebViewWithForm:(LPFormEntity * _Nonnull)form SWIFT_WARN_UNUSED_RESULT;
/// Get shared instance of secure form web view which loaded with a form url
/// \param form form to be shown in the webview
///
///
/// returns:
/// an optional instance of the webview with the form loaded
+ (WKWebView * _Nullable)getPreparedSecureFormWebViewWithForm:(LPFormEntity * _Nonnull)form SWIFT_WARN_UNUSED_RESULT;
+ (void)acceptRing:(Ring * _Nonnull)ring agentToken:(NSString * _Nonnull)agentToken completion:(void (^ _Nonnull)(LPConversationEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)backToQueue:(NSString * _Nonnull)userID conversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)subscribeAgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery agentID:(NSString * _Nonnull)agentID completion:(void (^ _Nullable)(id _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
+ (void)setAgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery agentID:(NSString * _Nonnull)agentID channels:(NSArray<NSString *> * _Nullable)channels availability:(NSString * _Nonnull)availability description:(NSString * _Nonnull)description completion:(void (^ _Nullable)(id _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
+ (void)agentRequestConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery context:(NSDictionary<NSString *, NSString *> * _Nonnull)context ttrDefName:(NSString * _Nonnull)ttrDefName channelType:(NSString * _Nonnull)channelType consumerId:(NSString * _Nonnull)consumerId completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Gets messages with linkPreviewState of “loading”
///
/// returns:
/// Optional array of messages
+ (NSArray<LPMessageEntity *> * _Nullable)getLoadingStructuredContentMessages SWIFT_WARN_UNUSED_RESULT;
/// Gets custom items with image state of “downloading”
///
/// returns:
/// Optional array of custom items
+ (NSArray<LPLinkPreviewEntity *> * _Nullable)getLoadingStructuredContentCustomItems SWIFT_WARN_UNUSED_RESULT;
/// Determine if the brand has an active controller/bot in his conversations
/// \param brandID brandID owner of the controller
///
///
/// returns:
/// true if active else false
+ (BOOL)hasActiveController:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)getAllConsumersID SWIFT_WARN_UNUSED_RESULT;
/// Clear all singleton managers with their properties from memory.
/// This method will release any data objects and data structures.
+ (void)clearManagers;
+ (void)clearSubscriptionsManager;
/// If we have the last quick reply item saved in the RAM:
/// We’ll return it from the RAM
/// If not, we’ll take it from the LPUserDefaults
/// If there is no saved quuck reply item, we’ll return nil
+ (QuickReplyItem * _Nullable)loadLastSavedQuickReplyItem SWIFT_WARN_UNUSED_RESULT;
/// Saves a quickReplyItem to LPUserDefaults and to the RAM
/// \param quickReplyItem item to be saved
///
+ (void)saveQuickReplyItemWithQuickReplyItem:(QuickReplyItem * _Nonnull)quickReplyItem;
+ (void)clearLastSavedQuickReplyItem;
+ (void)registerPusherWithLoginFlowWithBrand:(LPBrandEntity * _Nonnull)brand authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams;
/// Get the latest batch of unread messages
///
/// returns:
/// array of unread messages or nil
+ (NSArray<LPMessageEntity *> * _Nullable)getLatestUnreadMessages SWIFT_WARN_UNUSED_RESULT;
@end

@class TTRModel;
@class LPConnection;

/// UMS protocol delegate to receive events about the lifecycle of conversaion, messages, CSAT etc.
SWIFT_PROTOCOL("_TtP5LPAMS19LPAMSFacadeDelegate_")
@protocol LPAMSFacadeDelegate
@optional
- (void)conversationDidResolve:(LPConversationEntity * _Nonnull)conversation isAgentSide:(BOOL)isAgentSide endTime:(NSDate * _Nullable)endTime;
- (void)conversationWasSentToQueueRemotely:(LPConversationEntity * _Nonnull)conversation;
- (void)conversationWasDeleted:(LPConversationEntity * _Nullable)conversation;
- (void)retrieveHistoryMessagingEventNotificationsDidProgressWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completed:(NSInteger)completed total:(NSInteger)total;
- (void)retrieveHistoryEngagementHistoryDidProgressWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completed:(NSInteger)completed total:(NSInteger)total;
- (void)retrieveHistoryMessagingEventNotificationStateDidChangeWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery isFinished:(BOOL)isFinished fetchedConversationCount:(NSInteger)fetchedConversationCount fetchedMessages:(NSArray<LPMessageEntity *> * _Nullable)fetchedMessages increaseNumberOfPresentedConversationsBy:(NSInteger)increaseNumberOfPresentedConversationsBy;
- (void)didSendMessages:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)willReceiveMessages;
- (void)didReceiveMessages:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)didReceiveMessagingEvent;
- (void)resolveConvesationDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)resolveConvesationRequestDidFinish:(LPConversationEntity * _Nonnull)conversation;
- (void)newConversationCreated:(LPConversationEntity * _Nonnull)conversation;
- (void)urgentRequestDidFinish:(LPConversationEntity * _Nonnull)conversation;
- (void)urgentRequestDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)chatStateDidChange:(LPDialogEntity * _Nonnull)dialog state:(NSString * _Nonnull)state userID:(NSString * _Nonnull)userID;
- (void)messagesStatusDidChange:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)conversationInitializedOnAMS:(LPConversationEntity * _Nonnull)conversation;
- (void)didReceiveTTRUpdate:(LPConversationEntity * _Nonnull)conversation ttr:(TTRModel * _Nonnull)ttr;
- (void)didUpdateUserProfile:(LPConversationEntity * _Nonnull)conversation userID:(NSString * _Nonnull)userID;
- (void)csatScoreSubmissionDidFinish:(LPConversationEntity * _Nonnull)conversation csat:(CSATModel * _Nonnull)csat;
- (void)csatScoreSubmissionDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (BOOL)isConversationViewControllerPresentedWithForceTopConversation:(BOOL)forceTopConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)brandAccountID SWIFT_WARN_UNUSED_RESULT;
- (void)sdkFeatureToggledWithFeature:(enum LPMessagingSDKFeature)feature toggle:(BOOL)toggle;
- (id <ConversationParamProtocol> _Nullable)getCurrentConversationQuery SWIFT_WARN_UNUSED_RESULT;
- (void)historyCleared;
- (void)didReceiveRingUpdate:(NSString * _Nonnull)conversationID ring:(Ring * _Nonnull)ring;
- (void)didReceiveNoPendingRingsNotification;
- (void)didAcceptRingWithConversation:(LPConversationEntity * _Nonnull)conversation connection:(LPConnection * _Nonnull)connection;
@end

/// Used to set the socket type as consumer aor brand. The URI for opening the socket is different between the two.
/// <ul>
///   <li>
///     Consumer: End user is a consumer.
///   </li>
///   <li>
///     Agent: End user is LiveEngage agent.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SocketType, closed) {
  SocketTypeConsumer = 0,
  SocketTypeAgent = 1,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#else
// Headers for Device
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import LPInfra;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LPAMS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC5LPAMS22ConnectionStateManager")
@interface ConnectionStateManager : NSObject <GeneralManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ConnectionStateManager * _Nonnull instance SWIFT_DEPRECATED_OBJC("Swift property 'ConnectionStateManager.instance' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");)
+ (ConnectionStateManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift property 'ConnectionStateManager.instance' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)clearManager;
@end

@class EngagementHistoryRequest;
@class LPMessageEntity;
@class EngagementHistoryConsumerMessagesResponse;
@class LPFileEntity;

SWIFT_CLASS("_TtC5LPAMS24EngagementHistoryManager")
@interface EngagementHistoryManager : NSObject
/// Get conversation histroy from Engagement History API for consumers.
/// Method of request will be based on the request param that passed to this method.
/// \param request EngagementHistoryRequest request to detemine which type of request history and which details
///
/// \param completion completion block with EngagementHistoryResponseForConsumer object including all data
///
/// \param failure failure block with error
///
+ (void)getConsumerMessagesForConversationWithRequest:(EngagementHistoryRequest * _Nonnull)request completion:(void (^ _Nonnull)(NSArray<LPMessageEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.getConsumerMessagesForConversation(request:completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Handle history response for all related conversations and messages
/// \param response EngagementHistoryResponse
///
+ (NSArray<LPMessageEntity *> * _Nonnull)handleConsumerMessagesResponse:(EngagementHistoryConsumerMessagesResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.handleConsumerMessagesResponse(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Generate full download url for file sharing from Inca (Engagement History).
/// This method should be used when downloading a file from a conversation that resides in Inca
/// \param file file to generate the url for
///
/// \param completion completion block with the full download url
///
/// \param failure failure block with error
///
+ (void)generateFileSharingDownloadURLForFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(NSString * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'EngagementHistoryManager.generateFileSharingDownloadURL(forFile:completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol ConversationParamProtocol;
@class LPAuthenticationParams;
@protocol LPAMSFacadeDelegate;
@class LPBrandEntity;
@class LPConversationEntity;
@class LPDialogEntity;
@class NSError;
@class LPUser;
@class CSATModel;
enum SocketType : NSInteger;
@class LPWelcomeMessage;
@class UploadInfo;
@class RequestSwiftURL;
@class LPFormEntity;
@class WKWebView;
@class Ring;
@class LPLinkPreviewEntity;
@class QuickReplyItem;

/// Full API to UMS protocol, Used is to control and send applicative events
SWIFT_CLASS("_TtC5LPAMS11LPAMSFacade")
@interface LPAMSFacade : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the AMS Facade delegate and the conversation handler
///
/// returns:
/// [bool] : true if all initializations are successful.
+ (BOOL)initializeAMS SWIFT_WARN_UNUSED_RESULT;
/// A methods to update the AMS state
///
/// returns:
/// [bool] : true if all initializations are successful.
+ (void)updateAMSState:(id <ConversationParamProtocol> _Nonnull)conversationQuery state:(enum AMSState)state;
/// Perform connect to socket for conversationQuery
/// @param:
/// <ul>
///   <li>
///     optional ready completion which will be called after the socket is connected
///   </li>
/// </ul>
+ (void)connectToSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery readyCompletion:(void (^ _Nullable)(void))readyCompletion;
/// Perform reconnect to socket for conversationQuery:
/// <ul>
///   <li>
///     Remove the websocket handler
///   </li>
///   <li>
///     connect to socket
///     @param:
///   </li>
///   <li>
///     optional ready completion which will be called after the socket is connected
///   </li>
///   <li>
///     optional an LPAuthenticationParams object to determine the properties of an authenticated connection. LPAuthenticationParams supports Code Flow login or Implicit Flow login.
///   </li>
/// </ul>
+ (void)reconnectToSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationParams:(LPAuthenticationParams * _Nonnull)authenticationParams readyCompletion:(void (^ _Nullable)(void))readyCompletion;
/// Perform disconnect from socket for conversationQuery.
/// You can choose to disconnect the socket aftet delay of predefined time
/// \param conversationQuery conversationQuery where to socket belongs to
///
/// \param shouldUseDelay determines whether to keep socket open for delay
///
+ (void)disconnectSocket:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// Clear history of all closed conversations and their messages from the database.
/// This method is allowed only if there is no active/open conversation.
+ (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery isClearOpenConversation:(BOOL)isClearOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Delete all conversations and their messages from the database, which older than X months.
/// The number of months allowed is defined in LPConfig with attribute: deleteClosedConversationOlderThanMonths
+ (void)deleteOldConversations;
/// Set AMSManagerDelegate implementor
+ (void)setDelegate:(id <LPAMSFacadeDelegate> _Nonnull)delegate;
/// Remove AMSManagerDelegate implementor
+ (void)removeDelegate:(id <LPAMSFacadeDelegate> _Nonnull)delegate;
/// Create new conversation instance
+ (LPConversationEntity * _Nonnull)createConversation:(LPBrandEntity * _Nonnull)brand SWIFT_WARN_UNUSED_RESULT;
/// Send message from a Message instance related to an owner conversation
+ (void)sendMessageInDialog:(LPDialogEntity * _Nonnull)dialog message:(LPMessageEntity * _Nonnull)message completion:(void (^ _Nonnull)(LPMessageEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Send message from a text string related to an owner conversation
/// This method will create new Message instance in the database.
/// Messages might be masked depending on regex and masking from LPConfig
+ (void)sendMessageInDialog:(LPDialogEntity * _Nonnull)dialog text:(NSString * _Nonnull)text metadata:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)metadata completion:(void (^ _Nonnull)(LPMessageEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Resolve/End a conversation from the user side
+ (void)resolveConversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nullable)(void))completion;
+ (void)resolveConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversation(_ conversation: Conversation, completion: (() -> Void)? = {()}) instead");
+ (void)resolveConversationForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completion:(void (^ _Nullable)(void))completion;
+ (void)resolveConversationForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversationForConversationQuery(_ conversationQuery: ConversationParamProtocol, completion: (() -> Void)? = {()}) instead");
/// Resolve/End a Dialog from the user side
+ (void)closeDialog:(LPDialogEntity * _Nonnull)dialog;
/// This methods returns the assigned agent of the active or the latest closed conversation, if exists.
+ (LPUser * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Request to change the conversation urgency status to on/off
+ (BOOL)requestUrgentResponse:(LPConversationEntity * _Nonnull)conversation urgent:(BOOL)urgent SWIFT_WARN_UNUSED_RESULT;
+ (void)changeUrgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery isUrgent:(BOOL)isUrgent;
/// Retreive new messages from server for an owner converation
+ (void)retrieveNewMessagesForConversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nullable)(NSArray<LPMessageEntity *> * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Submit CSAT to the server for an owner conversation
/// CSAT model is based on: rate of the csat, resolutionConfirmation toggle and wether csat is skipped or not
+ (void)sendCSAT:(LPConversationEntity * _Nonnull)conversation csat:(CSATModel * _Nonnull)csat;
/// Subscribe for exConversation notifications per for brandID
/// Use last updated time from the saved subscription times dictionary
/// Note: if there is an existing previous subscriptionID, unregister it before registering new one.
+ (void)subscribeConversationNotifications:(NSString * _Nonnull)brandID userID:(NSString * _Nonnull)userID socketType:(enum SocketType)socketType completion:(void (^ _Nullable)(NSString * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Unsubscribe from exConversation notifications per brandID for subscriptionID
+ (void)unsubscribeConversationNotifications:(NSString * _Nonnull)brandID subscriptionID:(NSString * _Nonnull)subscriptionID;
/// Subscribe to routing tasks notification in order to get new rings for Agent
/// \param brandID brandID to subscribe for
///
/// \param agentID agentID to get new rings for
///
/// \param completion completion with subscriptionID
///
/// \param failure failure
///
+ (void)subscribeRoutingTasks:(NSString * _Nonnull)brandID agentID:(NSString * _Nonnull)agentID completion:(void (^ _Nullable)(NSString * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// This method determines wether a brandID is Ready.
/// Ready means that the brand is connected and conversation can be proccessed.
+ (BOOL)isBrandReady:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// This method checks if the active conversation of a conversation query marked as Urgent.
/// Return value:
/// True - conversation is marked as Urgent.
/// False - conversation is not marked as Urgent.
+ (BOOL)isUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// This method checks for an active(Open/Created) conversation according to conversation query.
/// Return value:
/// True - there is an active conversation.
/// False - there is no active conversation.
+ (BOOL)checkActiveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Determines whether history query messages already fecthced
+ (BOOL)didFetchHistoryMessagingEventNotifications SWIFT_WARN_UNUSED_RESULT;
/// Determines whether history query messages is now being fetched
+ (BOOL)isFetchingHistoryMessages SWIFT_WARN_UNUSED_RESULT;
/// Determines the name of the assigned agent that should be presented in UI areas.
/// If assigned agent exists and has a nickname - return it. Otherwise, return nil.
/// If nil is returned, it should be handled according to UI area
+ (NSString * _Nullable)agentNameUIRepresentation:(LPDialogEntity * _Nullable)dialog SWIFT_WARN_UNUSED_RESULT;
/// Create resolved system message for conversation, according to resolving side
/// Timestamp - when agent resolved we take the timestamp from server, when consumer resolved we take now.
+ (LPMessageEntity * _Nullable)createResolveLocalMessage:(LPDialogEntity * _Nonnull)dialog endTime:(NSDate * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
/// Creates local system message for masked message according to the current masking type:
/// \param dialog dialog that the message will be added to
///
/// \param isRealTimeMasking should the system message text represent real time masking or client side masking
///
///
/// returns:
/// local masked message, nil if failed
+ (LPMessageEntity * _Nullable)createMessageMaskedLocalMessage:(LPDialogEntity * _Nonnull)dialog isRealTimeMasking:(BOOL)isRealTimeMasking SWIFT_WARN_UNUSED_RESULT;
/// Creates welcome local system message for dialog
+ (LPMessageEntity * _Nullable)createWelcomeLocalMessage:(LPDialogEntity * _Nonnull)dialog overrideTime:(NSDate * _Nonnull)overrideTime SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=12.2.0,obsoleted=14.0.0,message="Use createWelcomeLocalMessage(_ dialog: Dialog, welcomeMessage: LPWelcomeMessage, overrideTime: Date = Date()) -> Message? instead");
/// Creates welcome local system message for dialog
+ (LPMessageEntity * _Nullable)createWelcomeLocalMessage:(LPDialogEntity * _Nonnull)dialog welcomeMessage:(LPWelcomeMessage * _Nonnull)welcomeMessage overrideTime:(NSDate * _Nonnull)overrideTime SWIFT_WARN_UNUSED_RESULT;
/// Get client properties to be sent to AMS using predefiend AMS parameters.
/// This method is used for sending information to AMS
+ (NSString * _Nonnull)clientPropertiesString SWIFT_WARN_UNUSED_RESULT;
/// Upload file from file info object
/// \param uploadInfo upload info object. Includes all necessary info about required file to upload
///
/// \param conversation conversation that the file will be added to
///
/// \param completion complition handler
///
/// \param failure failure handler
///
+ (void)uploadFileFromInfoWithUploadInfo:(UploadInfo * _Nonnull)uploadInfo dialog:(LPDialogEntity * _Nonnull)dialog completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Uploading file that is saved on disk (mainly for failed messages)
+ (void)uploadFileFromDiskWithMessage:(LPMessageEntity * _Nonnull)message dialog:(LPDialogEntity * _Nonnull)dialog completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Downloads a file from Swift server and returns an image to show
+ (void)downloadFileWithDialog:(LPDialogEntity * _Nonnull)dialog file:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Requests the AMS for an upload url for swift server
+ (void)requestUploadURLWithDialog:(LPDialogEntity * _Nonnull)dialog fileSize:(double)fileSize fileExtention:(NSString * _Nonnull)fileExtention completion:(void (^ _Nonnull)(RequestSwiftURL * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Requests the AMS for a download url from swift server
+ (void)requestDownloadURLWithDialog:(LPDialogEntity * _Nonnull)dialog file:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(id _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Searches for a link preview url in the message content. If the LinkPreview feature is disabled, will return nil
/// This method ignores email links!
/// \param messageContent message content to search URL from
///
///
/// returns:
/// If LinkPreview feature enabled and link exist - returns the first link URL, else returns nil.
+ (NSURL * _Nullable)linkPreviewUrlFrom:(NSString * _Nonnull)messageContent SWIFT_WARN_UNUSED_RESULT;
/// Prepare secure form URL which allows to open a form to read
/// This method generates read and write OTK from UMS and build URL to be used for PCI GW
/// \param form form object to get the url for
///
/// \param completion completion block when the form is ready - url and token are valid
///
/// \param failure failure block with error
///
+ (void)prepareSecureFormWithForm:(LPFormEntity * _Nonnull)form completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Determine whether a form has already been loaded in the webview before and can be re-used
/// \param form the form the check for
///
///
/// returns:
/// true if form has been loaded, else false
+ (BOOL)hasSecureFormAlreadyLoadedInWebViewWithForm:(LPFormEntity * _Nonnull)form SWIFT_WARN_UNUSED_RESULT;
/// Get shared instance of secure form web view which loaded with a form url
/// \param form form to be shown in the webview
///
///
/// returns:
/// an optional instance of the webview with the form loaded
+ (WKWebView * _Nullable)getPreparedSecureFormWebViewWithForm:(LPFormEntity * _Nonnull)form SWIFT_WARN_UNUSED_RESULT;
+ (void)acceptRing:(Ring * _Nonnull)ring agentToken:(NSString * _Nonnull)agentToken completion:(void (^ _Nonnull)(LPConversationEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)backToQueue:(NSString * _Nonnull)userID conversation:(LPConversationEntity * _Nonnull)conversation completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
+ (void)subscribeAgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery agentID:(NSString * _Nonnull)agentID completion:(void (^ _Nullable)(id _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
+ (void)setAgentState:(id <ConversationParamProtocol> _Nonnull)conversationQuery agentID:(NSString * _Nonnull)agentID channels:(NSArray<NSString *> * _Nullable)channels availability:(NSString * _Nonnull)availability description:(NSString * _Nonnull)description completion:(void (^ _Nullable)(id _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
+ (void)agentRequestConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery context:(NSDictionary<NSString *, NSString *> * _Nonnull)context ttrDefName:(NSString * _Nonnull)ttrDefName channelType:(NSString * _Nonnull)channelType consumerId:(NSString * _Nonnull)consumerId completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Gets messages with linkPreviewState of “loading”
///
/// returns:
/// Optional array of messages
+ (NSArray<LPMessageEntity *> * _Nullable)getLoadingStructuredContentMessages SWIFT_WARN_UNUSED_RESULT;
/// Gets custom items with image state of “downloading”
///
/// returns:
/// Optional array of custom items
+ (NSArray<LPLinkPreviewEntity *> * _Nullable)getLoadingStructuredContentCustomItems SWIFT_WARN_UNUSED_RESULT;
/// Determine if the brand has an active controller/bot in his conversations
/// \param brandID brandID owner of the controller
///
///
/// returns:
/// true if active else false
+ (BOOL)hasActiveController:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)getAllConsumersID SWIFT_WARN_UNUSED_RESULT;
/// Clear all singleton managers with their properties from memory.
/// This method will release any data objects and data structures.
+ (void)clearManagers;
+ (void)clearSubscriptionsManager;
/// If we have the last quick reply item saved in the RAM:
/// We’ll return it from the RAM
/// If not, we’ll take it from the LPUserDefaults
/// If there is no saved quuck reply item, we’ll return nil
+ (QuickReplyItem * _Nullable)loadLastSavedQuickReplyItem SWIFT_WARN_UNUSED_RESULT;
/// Saves a quickReplyItem to LPUserDefaults and to the RAM
/// \param quickReplyItem item to be saved
///
+ (void)saveQuickReplyItemWithQuickReplyItem:(QuickReplyItem * _Nonnull)quickReplyItem;
+ (void)clearLastSavedQuickReplyItem;
+ (void)registerPusherWithLoginFlowWithBrand:(LPBrandEntity * _Nonnull)brand authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams;
/// Get the latest batch of unread messages
///
/// returns:
/// array of unread messages or nil
+ (NSArray<LPMessageEntity *> * _Nullable)getLatestUnreadMessages SWIFT_WARN_UNUSED_RESULT;
@end

@class TTRModel;
@class LPConnection;

/// UMS protocol delegate to receive events about the lifecycle of conversaion, messages, CSAT etc.
SWIFT_PROTOCOL("_TtP5LPAMS19LPAMSFacadeDelegate_")
@protocol LPAMSFacadeDelegate
@optional
- (void)conversationDidResolve:(LPConversationEntity * _Nonnull)conversation isAgentSide:(BOOL)isAgentSide endTime:(NSDate * _Nullable)endTime;
- (void)conversationWasSentToQueueRemotely:(LPConversationEntity * _Nonnull)conversation;
- (void)conversationWasDeleted:(LPConversationEntity * _Nullable)conversation;
- (void)retrieveHistoryMessagingEventNotificationsDidProgressWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completed:(NSInteger)completed total:(NSInteger)total;
- (void)retrieveHistoryEngagementHistoryDidProgressWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery completed:(NSInteger)completed total:(NSInteger)total;
- (void)retrieveHistoryMessagingEventNotificationStateDidChangeWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery isFinished:(BOOL)isFinished fetchedConversationCount:(NSInteger)fetchedConversationCount fetchedMessages:(NSArray<LPMessageEntity *> * _Nullable)fetchedMessages increaseNumberOfPresentedConversationsBy:(NSInteger)increaseNumberOfPresentedConversationsBy;
- (void)didSendMessages:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)willReceiveMessages;
- (void)didReceiveMessages:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)didReceiveMessagingEvent;
- (void)resolveConvesationDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)resolveConvesationRequestDidFinish:(LPConversationEntity * _Nonnull)conversation;
- (void)newConversationCreated:(LPConversationEntity * _Nonnull)conversation;
- (void)urgentRequestDidFinish:(LPConversationEntity * _Nonnull)conversation;
- (void)urgentRequestDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)chatStateDidChange:(LPDialogEntity * _Nonnull)dialog state:(NSString * _Nonnull)state userID:(NSString * _Nonnull)userID;
- (void)messagesStatusDidChange:(LPDialogEntity * _Nonnull)dialog messages:(NSArray<LPMessageEntity *> * _Nonnull)messages;
- (void)conversationInitializedOnAMS:(LPConversationEntity * _Nonnull)conversation;
- (void)didReceiveTTRUpdate:(LPConversationEntity * _Nonnull)conversation ttr:(TTRModel * _Nonnull)ttr;
- (void)didUpdateUserProfile:(LPConversationEntity * _Nonnull)conversation userID:(NSString * _Nonnull)userID;
- (void)csatScoreSubmissionDidFinish:(LPConversationEntity * _Nonnull)conversation csat:(CSATModel * _Nonnull)csat;
- (void)csatScoreSubmissionDidFail:(LPConversationEntity * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (BOOL)isConversationViewControllerPresentedWithForceTopConversation:(BOOL)forceTopConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)brandAccountID SWIFT_WARN_UNUSED_RESULT;
- (void)sdkFeatureToggledWithFeature:(enum LPMessagingSDKFeature)feature toggle:(BOOL)toggle;
- (id <ConversationParamProtocol> _Nullable)getCurrentConversationQuery SWIFT_WARN_UNUSED_RESULT;
- (void)historyCleared;
- (void)didReceiveRingUpdate:(NSString * _Nonnull)conversationID ring:(Ring * _Nonnull)ring;
- (void)didReceiveNoPendingRingsNotification;
- (void)didAcceptRingWithConversation:(LPConversationEntity * _Nonnull)conversation connection:(LPConnection * _Nonnull)connection;
@end

/// Used to set the socket type as consumer aor brand. The URI for opening the socket is different between the two.
/// <ul>
///   <li>
///     Consumer: End user is a consumer.
///   </li>
///   <li>
///     Agent: End user is LiveEngage agent.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SocketType, closed) {
  SocketTypeConsumer = 0,
  SocketTypeAgent = 1,
};





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
