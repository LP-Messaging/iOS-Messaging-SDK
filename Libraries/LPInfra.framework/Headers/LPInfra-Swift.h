#if TARGET_OS_SIMULATOR
// Headers for Simulator
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import CoreLocation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <LPInfra/LPInfra.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LPInfra",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AMSState, closed) {
  AMSStateIN_PROCESS = 0,
  AMSStateNETWORK_REACHABLE = 1,
  AMSStateCSDS_REACHABLE = 2,
  AMSStateVALID_TOKEN = 3,
  AMSStateOPENING_SOCKET = 4,
  AMSStateVALID_SOCKET = 5,
  AMSStateVALID_USERID = 6,
  AMSStateREADY = 7,
  AMSStateREADY_WITH_DATA = 8,
  AMSStateSDK_ERROR = -1,
  AMSStateGENERAL_ERROR = -2,
  AMSStateNETWORK_UNREACHABLE = -3,
  AMSStateCSDS_UNREACHABLE = -4,
  AMSStateNO_TOKEN = -5,
  AMSStateCLOSING_SOCKET = -6,
  AMSStateSOCKET_UNREACHABLE = -7,
  AMSStateNO_USERID = -8,
  AMSStateNO_SUBSCRIPTION = -9,
  AMSStateCERT_PINNING_FAILED = -10,
};


SWIFT_CLASS("_TtC7LPInfra15GeneralResponse")
@interface GeneralResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable kind;
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull responseDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra22AgentStateNotification")
@interface AgentStateNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end

@class LPConversationEntity;
@class NSPredicate;
@class LPDialogEntity;

SWIFT_PROTOCOL("_TtP7LPInfra25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
@end

@class LPCampaignInfo;

SWIFT_CLASS("_TtC7LPInfra10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by brand.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by brand, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation.
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all closed conversation
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation.
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Get open Dialog.
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
/// Get the latest closed conversation.
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (LPCampaignInfo * _Nullable)getCampaignInfo SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra9CSATModel")
@interface CSATModel : NSObject
@property (nonatomic) BOOL skipped SWIFT_DEPRECATED_OBJC("Swift property 'CSATModel.skipped' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CheckmarksState, closed) {
  CheckmarksStateSentOnly = 1,
  CheckmarksStateSentAndAccepted = 2,
  CheckmarksStateAll = 3,
};


SWIFT_CLASS("_TtC7LPInfra13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * _Nonnull)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by consumerID.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation based on state and consumerID
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by consumerID, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra30ConversationChangeNotification")
@interface ConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7LPInfra41EngagementHistoryConsumerMessagesResponse")
@interface EngagementHistoryConsumerMessagesResponse : GeneralResponse
@property (nonatomic, copy) NSString * _Nullable ownerConversationID;
@property (nonatomic, copy) NSString * _Nullable brandID;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra24EngagementHistoryRequest")
@interface EngagementHistoryRequest : NSObject
@property (nonatomic, copy) NSString * _Nonnull brandID SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.brandID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable agentBearer SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.agentBearer' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable jwt SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.jwt' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable consumerID SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.consumerID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSString *> * _Nullable conversationsStatus SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.conversationsStatus' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable sortKeyword SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.sortKeyword' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable searchKeyword SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.searchKeyword' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) LPConversationEntity * _Nullable conversation SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.conversation' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable url SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra13ErrorResponse")
@interface ErrorResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra32ExConversationChangeNotification")
@interface ExConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7LPInfra22GeneralManagerProtocol_")
@protocol GeneralManagerProtocol
- (void)clearManager;
@end



SWIFT_CLASS("_TtC7LPInfra24SubscribeExConversations")
@interface SubscribeExConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra24GenericSubscribeResponse")
@interface GenericSubscribeResponse : SubscribeExConversations
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra15GetBrandProfile")
@interface GetBrandProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra8GetClock")
@interface GetClock : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra14GetUserProfile")
@interface GetUserProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAcCdnDictionary:(NSDictionary<NSString *, id> * _Nonnull)acCdnDictionary OBJC_DESIGNATED_INITIALIZER;
@end

@class LPBrandEntity;
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC7LPInfra15LPAccountEntity")
@interface LPAccountEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull accountId;
@property (nonatomic, strong) LPBrandEntity * _Nonnull brand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPAccountEnviroment, closed) {
  LPAccountEnviromentProduction = 0,
  LPAccountEnviromentAlpha = 1,
  LPAccountEnviromentQa = 2,
};

@class NSCoder;

/// Base class for file metadata container attribute
SWIFT_CLASS("_TtC7LPInfra23LPFileMetaDataContainer")
@interface LPFileMetaDataContainer : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra28LPAudioFileMetaDataContainer")
@interface LPAudioFileMetaDataContainer : LPFileMetaDataContainer
@property (nonatomic, copy) void (^ _Nullable audioPlayerDidStart)(NSString * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerDidStart' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable audioPlayerDidFail)(NSString * _Nonnull, NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerDidFail' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable audioPlayerProgress)(NSString * _Nonnull, NSTimeInterval, NSTimeInterval) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerProgress' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL isPlaying SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.isPlaying' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFileDuration:(NSInteger)fileDuration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPAudioFileMetaDataContainer.init(fileDuration:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)updateFrom:(LPAudioFileMetaDataContainer * _Nonnull)container SWIFT_DEPRECATED_OBJC("Swift method 'LPAudioFileMetaDataContainer.updateFrom(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum LPAuthenticationType : NSInteger;

/// #LPAuthenticationParams
/// This class represents an object to determine the properties of an authenticated connection. If using an authenticated connection, this parameter must be passed: LPAuthenticationParams supports Code Flow login, Implicit Flow login, or Unauthenticated login. See Constructor for details.
SWIFT_CLASS("_TtC7LPInfra22LPAuthenticationParams")
@interface LPAuthenticationParams : NSObject
@property (nonatomic, copy) NSString * _Nullable authenticationCode;
@property (nonatomic, copy) NSString * _Nullable jwt;
@property (nonatomic, copy) NSString * _Nullable redirectURI;
/// will hold the Cert pining validation public keys
@property (nonatomic, copy) NSArray<NSString *> * _Nullable certPinningPublicKeys;
@property (nonatomic) enum LPAuthenticationType type;
/// LPAuthenticationParams initialization with params
/// \param authenticationCode an optional authCode which is used for ‘Code Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param jwt an optional JWT which is used for ‘Implicit Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param redirectURI IDP redirect URI
///
/// \param certPinningPublicKeys Set the certificate public key hash this API can get multiple public key hashes for the ability to support more then one key and if the certificate leaf change his public key we will still be able to validate the keys of the others certificate leaf
/// if nil the Cert Pinning is disable
///
/// \param authenticationType .authenticated for Code Flow or Implicit, .unauthenticated for Unauthenticated.  If left as nil will default to .signup flow.
///
- (nonnull instancetype)initWithAuthenticationCode:(NSString * _Nullable)authenticationCode jwt:(NSString * _Nullable)jwt redirectURI:(NSString * _Nullable)redirectURI certPinningPublicKeys:(NSArray<NSString *> * _Nullable)certPinningPublicKeys authenticationType:(enum LPAuthenticationType)authenticationType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum is used for determine the authentication type with the following options:
/// signup (default) // old unauthenticated method
/// unauthenticated
/// authenticated
typedef SWIFT_ENUM(NSInteger, LPAuthenticationType, closed) {
  LPAuthenticationTypeSignup = 0,
  LPAuthenticationTypeUnauthenticated = 1,
  LPAuthenticationTypeAuthenticated = 2,
};

@class NSSet;

SWIFT_CLASS("_TtC7LPInfra13LPBrandEntity")
@interface LPBrandEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull iconURL;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable logoURL;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull details;
@property (nonatomic, strong) NSSet * _Nonnull brandCampaigns;
@property (nonatomic, strong) NSSet * _Nonnull brandConversations;
@property (nonatomic, copy) NSDate * _Nonnull dateJoined;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) NSSet * _Nonnull accounts;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPBrandEntity (SWIFT_EXTENSION(LPInfra))
- (LPConversationEntity * _Nullable)getCreatedConversation SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)getLastMessageTimeStamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra16LPCampaignEntity")
@interface LPCampaignEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra14LPCampaignInfo")
@interface LPCampaignInfo : NSObject
@property (nonatomic) NSInteger campaignId;
@property (nonatomic) NSInteger engagementId;
@property (nonatomic, copy) NSString * _Nullable contextId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable visitorId;
- (nonnull instancetype)initWithCampaignId:(NSInteger)campaignId engagementId:(NSInteger)engagementId contextId:(NSString * _Nullable)contextId sessionId:(NSString * _Nullable)sessionId visitorId:(NSString * _Nullable)visitorId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIImage;
enum LPUrlPreviewStyle : NSInteger;
@class UIBlurEffect;
enum LPLanguage : NSInteger;
@class LPConversationScrollConfiguration;

SWIFT_CLASS("_TtC7LPInfra8LPConfig")
@interface LPConfig : NSObject
/// A boolean which determines whether to retrieve the agent details from the last closed conversation in case there is no assigned agent. Agent details will be retrieved from API method: func getAssignedAgent(conversationQuery: ConversationParamProtocol)
@property (nonatomic) BOOL retrieveAssignedAgentFromLastClosedConversation;
/// Maximum time frame for recording audio message (in seconds).
@property (nonatomic) NSTimeInterval recordingDurationLimit;
/// Enable or disable audio sharing feature. True is enabled.
@property (nonatomic) BOOL enableAudioSharing;
/// Max number of allowed saved audio files on disk. This refers only to audio files.
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedAudioFilesOnDisk;
/// The brand name will be shown as a title on toolbar when there is no active conversation.
@property (nonatomic, copy) NSString * _Nonnull brandName;
/// Color for the entire view background.
@property (nonatomic, strong) UIColor * _Nonnull conversationBackgroundColor;
/// Custom font name for conversation feed. This font will affect all messages, timestamp and separators.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameConversationFeed;
/// Custom font name for all non conversation feed controls. Such as: buttons, alerts, banners, menu and external windows.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameNonConversationFeed;
/// Array of images for creating the custom refresh controller. The custom refresh controller will loop the images from the array. It will need two or more images in the array for loop to take effect.
@property (nonatomic, copy) NSArray<UIImage *> * _Nullable customRefreshControllerImagesArray;
/// Custom refresh controller speed animation define the full images loop time
/// The smaller the value the faster the animation.
@property (nonatomic) float customRefreshControllerAnimationSpeed;
/// When not nil, will be used as the conversation portrait background image.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundPortraitImage;
/// When not nil, use this attribute as the conversation portrait background image. When an image is shown, it is recommended to set ‘dateSeparatorBackgroundColor’ config to clear.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundLandscapeImage;
/// Decides the content mode of the conversation background image.
@property (nonatomic) UIViewContentMode conversationBackgroundImageContentMode;
/// Color code for the background of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingBackgroundColor;
/// Color code for the text of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingTextColor;
/// Connection status toast (failed to connect) background color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectBackgroundColor;
/// Connection status toast (failed to connect) text color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectTextColor;
/// Color code for the text of the controller bubble.
@property (nonatomic, strong) UIColor * _Nonnull controllerBubbleTextColor;
/// Amount of conversations to show in advance.
@property (nonatomic) NSUInteger maxPreviousConversationToPresent;
/// Upon SDK initialization, all closed conversation with end date older than X months, will be deleted from the database. Setting 0 will delete all closed conversation.
@property (nonatomic) NSUInteger deleteClosedConversationOlderThanMonths;
/// Maximum number of minutes to send the message.
@property (nonatomic) NSUInteger sendingMessageTimeoutInMinutes;
/// Conversation separator text and line color.
@property (nonatomic, strong) UIColor * _Nonnull conversationSeparatorTextColor;
/// Toggle conversation separator text message when conversation resolved from agent or consumer.
@property (nonatomic) BOOL enableConversationSeparatorTextMessage;
/// Toggle conversation separator line when conversation resolved from agent or consumer.
@property (nonatomic) BOOL enableConversationSeparatorLine;
/// Define the conversation Closed Separator font size.
@property (nonatomic) UIFontTextStyle _Nonnull conversationSeparatorFontSize;
/// Define the conversation Closed label to separator line padding.
@property (nonatomic) float conversationSeparatorBottomPadding;
/// Custom font name for conversation closed separator.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable conversationSeparatorFontName;
/// Define the conversation separator view bottom padding.
@property (nonatomic) float conversationSeparatorViewBottomPadding;
/// Define the conversation Closed Separator Top padding.
@property (nonatomic) float conversationSeparatorTopPadding;
/// Toggle device vibration when a new message from a remote user received.
@property (nonatomic) BOOL enableVibrationOnMessageFromRemoteUser;
/// If true, show agent is typing indicator. In accessibility mode, announce when agent is typing.
/// When false will not show any indication that the agent is typing, and will not announce when agent is typing in accessibility.
@property (nonatomic) BOOL announceAgentTyping;
/// When true, shows agent  is typing indicator in a message bubble. When false, show indicator under Agent label in navigator bar.
/// When announceAgentTyping is false, will not show any “is typing” indicator regardless of current value.
@property (nonatomic) BOOL showAgentTypingInMessageBubble;
/// Enabling this flag, SDK will use regular expression defined in ‘clientOnlyMaskingRegex’ to mask text on the consumer device.  This is client only masking because it is both set and executed within the consumers device. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableClientOnlyMasking;
/// Enabling this flag, SDK will use regular expression defined in ‘realTimeMaskingRegex’ to mask text originated on the consumer device.  This masking is applied to messages both on the consumer device and sent to the agent. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server masked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableRealTimeMasking;
/// Regular expression string applied to the ‘enableClientOnlyMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull clientOnlyMaskingRegex;
/// Regular expression string applied to the ‘enableRealTimeMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull realTimeMaskingRegex;
/// Custom formatting for date string (day, year..), for example: ‘d MMM’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateFormat;
/// Custom formatting for time string (hours, minutes..), for example: ‘hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpTimeFormat;
/// Custom formatting for date and time string, for example: ‘EEEE MM/dd/YY hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateTimeFormat;
/// Color code for date separator title background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTitleBackgroundColor;
/// Color code for date separator text color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTextColor;
/// Line color of the title for the dates separator in the view screen.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorLineBackgroundColor;
/// Color code for date separator background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorBackgroundColor;
/// Define the Date Separator font text style.
@property (nonatomic) UIFontTextStyle _Nonnull dateSeparatorFontSize;
/// Custom font name for Timestamp.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameDateSeparator;
/// Define the Date Separator Top padding.
@property (nonatomic) float dateSeparatorTopPadding;
/// Define the  DateSeparator bottom padding.
@property (nonatomic) float dateSeparatorBottomPadding;
/// Checkmark visibility of the following options (type CheckmarksState):
/// SentOnly - Show checkmarks for only Sent messages.
/// SentAndAccepted - Show checkmarks for only Sent and Accepted messages.
/// All - Show checkmarks for Sent, Accepted and Read messages.
@property (nonatomic) enum CheckmarksState checkmarkVisibility;
/// Color of checkmark indication signs of Read messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkReadColor;
/// Color of checkmark indication signs of Distributed messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkDistributedColor;
/// Color of checkmark indication signs of Sent messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkSentColor;
/// Two options for read indication:
/// If true = Read receipt “text mode”.
/// If false = Read receipt “icon mode”.
@property (nonatomic) BOOL isReadReceiptTextMode;
/// Color of the remote user typing bubbles animation.
@property (nonatomic) BOOL messageStatusNumericTimestampOnly;
/// The show duration of the local notifications view in the SDK.
@property (nonatomic) double notificationShowDurationInSeconds;
/// Enable or disable real time link preview feature when the consumer is typing a url.
@property (nonatomic) BOOL enableRealTimeLinkPreview;
/// Enable or disable link preview feature. If disabled, user will not see site’s link preview or link preview.
@property (nonatomic) BOOL enableLinkPreview;
/// Color code for the background of the link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBackgroundColor;
/// Color code for the title text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewTitleTextColor;
/// Color code for the description text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewDescriptionTextColor;
/// Color code for the description site name link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewSiteNameTextColor;
/// Double number for the outline width of link preview area inside cell.
@property (nonatomic) double linkPreviewBorderWidth;
/// Color code for border color of link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBorderColor;
/// LPUrlPreviewStyle defines the style in which the link prview cells will be shown
/// slim - Small preview space with a small image, a title and a description
/// large - Large preview space with a large image, a title and a description.
@property (nonatomic) enum LPUrlPreviewStyle urlPreviewStyle;
/// The color of the background color of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBackgroundColor;
/// The color of the border of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBorderColor;
/// The width of the border of the main view.
@property (nonatomic) CGFloat urlRealTimePreviewBorderWidth;
/// The color of the title at the top of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewTitleTextColor;
/// The color of the description at the bottom of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewDescriptionTextColor;
/// “urlPreview” will also use non-OG tags to parse urls instead of using only OG tags if useNonOGTagsForLinkPreview is true.
@property (nonatomic) BOOL useNonOGTagsForLinkPreview;
/// The configuration to control our modal presentation styles within the SDK.
/// Default is .fullscreen. Value We support any current UIModalPresentationStyle
/// except “.none” or “.popover”.
/// Finally, we do not allow customization of the presentation of the camera view.
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// The type of effect on the loading view.
@property (nonatomic, strong) UIBlurEffect * _Nonnull loadingViewBlurEffect;
/// The background color of the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewBackgroundColor;
/// The text color for the label on the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewTextColor;
/// The background color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressBackgroundColor;
/// The tint color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressTintColor;
/// Country code - when it is not nil, it will be combined with ‘language’ (”<language>_<country>”, for example: en_US) and used instead of device default locale when formatting date and time.
/// The combined value have to be a part of iOS available Locale identifiers (use Locale.availableIdentifiers to validate). Otherwise, default locale will be used.
/// NOTE: the 24/12 Hours time style also will be affected by using the specific Locale when formatting times.
/// If no value is provided, the SDK will use the country according to the device’s locale.
@property (nonatomic, copy) NSString * _Nullable country;
/// Language that will be used instead of default device language.
/// It’s type is LPLanguage enum that contains all the languages that are supported by MessagingSDK.
/// It will affect following areas:
/// <ol>
///   <li>
///     will be used when getting localized strings
///   </li>
///   <li>
///     will be combined with ‘country’ (“language_country”, for example: en_US) and used instead of default device locale when formatting time and date.
///     If no value is provided, the SDK will use the device’s language.
///   </li>
/// </ol>
@property (nonatomic) enum LPLanguage language;
/// Bool used to allow manual configuration for enabling the SDK to register to LP Pusher service. Requires user logout to change current configuration. Default is set to true.
@property (nonatomic) BOOL enableLpPusherService;
/// Background color of navigation bar in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationBackgroundColor;
/// Navigation title color in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationTitleColor;
/// Status bar style in conversation screen.
@property (nonatomic) UIStatusBarStyle conversationStatusBarStyle;
/// LivePerson Navigation Bar Left Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarLeftItemImageButton;
/// LivePerson Navigation Bar Right Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarRightItemImageButton;
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL fileSharingFromAgent;
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL fileSharingFromConsumer;
/// Max number of allowed saved files on disk. This refers only to full photo files.
/// NOTE: The validation of allowed max number of files will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedFilesOnDisk;
/// Max number of allowed saved documents on disk. This refers only to document files
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedDocumentsOnDisk;
/// Photosharing menu background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuBackgroundColor;
/// Photosharing menu buttons background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsBackgroundColor;
/// Photosharing menu buttons tint color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTintColor;
/// Photosharing menu buttons text color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTextColor;
/// Camera button color in enabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonEnabledColor;
/// Camera button color in disabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonDisabledColor;
/// File Cell Loader fill color.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderFillColor;
/// Color of the loader progress line.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingProgressColor;
/// Color of the loader progress line background.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingBackgroundColor;
/// Photo sharing open menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingOpenMenuImageButton;
/// Photo sharing close menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingCloseMenuImageButton;
/// Custom Camera image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuCameraImage;
/// Custom Library image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuLibraryImage;
/// Custom file image in the file Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable fileSharingMenuFileImage;
/// Image for custom the thumbnail of unsupported files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingUniversalFileThumbnailimage;
/// Image for custom the thumbnail of PDF files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPDFFileThumbnailimage;
/// Image for custom the thumbnail of PPTX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPPTXFileThumbnailimage;
/// Image for custom the thumbnail of DOCX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingDOCXFileThumbnailimage;
/// Image for custom the thumbnail of XLSX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingXLSXFileThumbnailimage;
/// Color code for the empty state label.
@property (nonatomic, strong) UIColor * _Nonnull conversationEmptyStateTextColor;
/// Tint color for the state of files received from agents.
@property (nonatomic, strong) UIColor * _Nonnull remoteFileStateTint;
/// Tint color for the state of files send by user.
@property (nonatomic, strong) UIColor * _Nonnull userFileStateTint;
/// Tint color for the state of photos send by user.
@property (nonatomic, strong) UIColor * _Nonnull userPhotoStateTint;
/// Distance between the bottom and top edges of the button to the bottom and top edges of the text.
@property (nonatomic) CGFloat quickReplyButtonVerticalPadding;
/// Distance between the right and left edges of the button to the right and left edges of the text.
@property (nonatomic) CGFloat quickReplyButtonHorizontalPadding;
/// Vertical margin between quick reply buttons.
@property (nonatomic) CGFloat quickReplyVerticalMargin;
/// Horizontal padding between quick reply buttons.
@property (nonatomic) CGFloat quickReplyHorizontalMargin;
/// Border size of Quick Reply buttons.
@property (nonatomic) CGFloat quickReplyButtonBorderWidth;
/// Conversation Scroll configurations for scenarios:
/// <ul>
///   <li>
///     app navigation
///   </li>
///   <li>
///     background to foreground
///   </li>
///   <li>
///     scroll to bottom button pressed
///   </li>
///   <li>
///     push notification tapped
///   </li>
/// </ul>
@property (nonatomic, strong) LPConversationScrollConfiguration * _Nonnull conversationScrollConfiguration;
/// Back button color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBackButtonColor;
/// The style (UIStatusBarStyle) for the secure form screen.
@property (nonatomic) UIStatusBarStyle secureFormUIStatusBarStyle;
/// Background color of navigation bar in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationBackgroundColor;
/// Navigation title color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationTitleColor;
/// Secure form bubble background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBackgroundColor;
/// Secure form bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBorderColor;
/// Secure form bubble border width in pixels.
@property (nonatomic) double secureFormBubbleBorderWidth;
/// Secure form bubble form title color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleTitleColor;
/// Secure form bubble form description color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleDescriptionColor;
/// Secure form bubble fill form button text color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonTextColor;
/// Secure form bubble fill form button background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonBackgroundColor;
/// Secure form bubble form image tint color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFormImageTintColor;
/// Secure form custom font name to be used while user filling the secure form. If not set, the default font will be used.
@property (nonatomic, copy) NSString * _Nonnull secureFormCustomFontName;
/// Secure form flag to hiding the secure form logo in the top of the form.
@property (nonatomic) BOOL secureFormHideLogo;
/// Secure form loading indicator color while loading form before opening.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleLoadingIndicatorColor;
/// Send button color in disabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonDisabledColor;
/// Send button color in enabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonEnabledColor;
/// Send button Image in the conversation screen. The custom image changes only if <code>isSendMessageButtonInTextMode</code> = <em>false</em>.
/// The image must conforms Apple’s <a href="https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/custom-icons/">Custom Icon guidelines</a>.
/// NOTE: this property gets its tintColor from <code>sendButtonDisabledColor</code> or <code>sendButtonEnabledColor</code> - depending on state
@property (nonatomic, strong) UIImage * _Nullable sendButtonImage;
/// Two options for the send message button mode:
/// <ol>
///   <li>
///     <em>text mode</em> (taken from localized resources)
///   </li>
///   <li>
///     <em>icon mode</em>.
///   </li>
/// </ol>
@property (nonatomic) BOOL isSendMessageButtonInTextMode;
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStructuredContent;
/// Structured Content bubble border width in pixels.
@property (nonatomic) double structuredContentBubbleBorderWidth;
/// Structured Content bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull structuredContentBubbleBorderColor;
/// Structured Content bubble top left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopLeftCornerRadius;
/// Structured Content bubble top right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopRightCornerRadius;
/// Structured Content bubble bottom left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomLeftCornerRadius;
/// Structured Content bubble bottom right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomRightCornerRadius;
/// Structured Content Latitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLongitudeDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLatitudeDeltaDeltaSpan;
/// Structured Content Longitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLatitudeDeltaDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLongitudeDeltaSpan;
/// Corner radius for submit button.
@property (nonatomic) double csatSubmitButtonCornerRadius;
/// Corner radius for (Yes/No) buttons.
@property (nonatomic) double csatYesNoButtonsCornerRadius;
/// Background color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonBackgroundColor;
/// Text color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonTextColor;
/// Background Color of the rating buttons.
@property (nonatomic, strong) UIColor * _Nonnull csatRatingButtonSelectedColor;
/// Color for the resolution confirmation buttons (Yes/No) when selected
@property (nonatomic, strong) UIColor * _Nonnull csatResolutionButtonSelectedColor;
/// Titles text colors for all labels.
@property (nonatomic, strong) UIColor * _Nonnull csatAllTitlesTextColor;
/// Hides the survey (Yes/No) question.
/// To show CSAT resolution, ‘csatAgentViewHidden’ must be set to True
@property (nonatomic) BOOL csatResolutionHidden;
/// Hides the view of agent avatar and name.
@property (nonatomic) BOOL csatAgentViewHidden;
/// Hides the Thanks You screen after tapping ‘Submit’ button.
/// <ol>
///   <li>
///     If true, CSAT view will disappear immediately after tapping ‘Submit’.
///   </li>
///   <li>
///     If false, Thank You screen will appear for 2 seconds after tapping ‘Submit’ and then all the CSAT view will disappear.
///   </li>
/// </ol>
@property (nonatomic) BOOL csatThankYouScreenHidden;
/// Background color of navigation bar in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationBackgroundColor;
/// Text color of the title in the survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationTitleColor;
/// Skip button color in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatSkipButtonColor;
/// The style (UIStatusBarStyle) for the survey screen.
@property (nonatomic) UIStatusBarStyle csatUIStatusBarStyle;
/// Hides the whole survey view and disables it.
@property (nonatomic) BOOL csatShowSurveyView;
/// Expiration of CSAT in minutes from the moment the conversation was ended. If Survey exceeded the expiration, it will not be presented to the user.
@property (nonatomic) NSUInteger csatSurveyExpirationInMinutes;
/// Color code for the text of the system messages.
@property (nonatomic, strong) UIColor * _Nonnull systemBubbleTextColor;
/// When set to <em>true</em>, the TTR notifications show with off hours.  When the auto messages feature is enabled, TTR notifications do not display when the auto messages featuer is enabled, regardless of the value set for this attribute.
@property (nonatomic) BOOL ttrShouldShow;
/// Enable or disable shift toaster (’An agent will respond…’).
@property (nonatomic) BOOL ttrShowShiftBanner;
/// Number of seconds before the first Time to Respond (TTR) notification appears.
@property (nonatomic) double ttrFirstTimeDelay;
/// When set to <em>true</em>, the timestamp of the TTR notification displays.
/// Otherwise, the “An agent will respond shortly” message displays.
@property (nonatomic) BOOL ttrShouldShowTimestamp;
/// Controls the TTR frequency, for example, don’t show the TTR more than once in 8 seconds.
@property (nonatomic) NSUInteger ttrShowFrequencyInSeconds;
/// Enable or disable the off-hours toaster.
@property (nonatomic) BOOL showOffHoursBanner;
/// Background color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerBackgroundColor;
/// Text color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerTextColor;
/// Off Hours banner timezone based on NSTimeZone names. If sending empty string, the local timezone will be used (Server sends UTC time)
@property (nonatomic, copy) NSString * _Nonnull offHoursTimeZoneName;
/// Enable toast notifications such as offline and TTR notifications.
@property (nonatomic) BOOL toastNotificationsEnabled;
/// Scroll to bottom button background color of the whole button.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBackgroundColor;
/// Scroll to bottom button text color of the last unread message preview.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonMessagePreviewTextColor;
/// Scroll to bottom button unread message badge background color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeBackgroundColor;
/// Scroll to bottom button unread message badge text color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeTextColor;
/// Scroll to bottom button arrow tint color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonArrowColor;
/// Unread Messages divider background color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerBackgroundColor;
/// Unread Messages divider text color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerTextColor;
/// Toggle the mode of the scroll to bottom button.
@property (nonatomic) BOOL scrollToBottomButtonEnabled;
/// Toggle the mode of the scroll to bottom unread message text preview.
@property (nonatomic) BOOL scrollToBottomButtonMessagePreviewEnabled;
/// Toggle the mode of the Unread Messages divider.
/// important:
/// As of SDK 5.1 & above, This configuration no longer impacts the scroll of the conversation or the scroll to bottom button (message preview or count indicator)
/// note:
/// Behavior for SDK version 5.0:
/// If disabled, the <code>scroll to bottom</code> button will scroll to bottom of the conversation but the count indicator and message preview  will not be displayed. Regardless of <em>unreadMessagesDividerEnabled</em> value, the conversation screen will always scrolls to the last position where the user left off.
@property (nonatomic) BOOL unreadMessagesDividerEnabled;
/// Define the corners radius of the unread messages.
@property (nonatomic) float unreadMessagesCornersRadius;
/// Define the top left and bottom left corners radius.
@property (nonatomic) float scrollToBottomButtonCornerRadius;
/// Define the scroll to bottom badge corners radius.
@property (nonatomic) float scrollToBottomButtonBadgeCornerRadius;
/// Background color of the remote user’s avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarBackgroundColor;
/// Define the remote avatar Leading padding  (left edge to avatar).
@property (nonatomic) float remoteUserAvatarLeadingPadding;
/// Define the remote avatar Trailing padding (Avatar to bubble).
@property (nonatomic) float remoteUserAvatarTrailingPadding;
/// Icon color of default remoteUser avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconColor;
/// Default Avatar image of the remote user.
/// When assigned, this image will disable <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code> configurations.
/// If remote user has an avatar image in his profile, this attribute will be ignored.
@property (nonatomic, strong) UIImage * _Nullable remoteUserDefaultAvatarImage;
/// Define the remote avatar icon border width.
@property (nonatomic) CGFloat remoteUserAvatarIconBorderWidth;
/// Define the remote avatar icon border color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconBorderColor;
/// Default avatar image for Brand.
/// If setting nil - default avatar image will be used with <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code>
@property (nonatomic, strong) UIImage * _Nullable brandAvatarImage;
/// Background color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarBackgroundColor;
/// Icon color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarIconColor;
/// User Input TextView container background color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewContainerBackgroundColor;
/// User Input TextView corner radius.
@property (nonatomic) double inputTextViewCornerRadius;
/// Input TextView top border color default clear color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewTopBorderColor;
/// Color code for the background of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBackgroundColor;
/// Color code for the outline color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBorderColor;
/// Color code for links in the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLinkColor;
/// Color code for the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double remoteUserBubbleBorderWidth;
/// Color code for the timestamp of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTimestampColor;
/// Color of the typing indicator for when the remote user is typing.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserTypingTintColor;
/// Color of the remote user’s bubble overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLongPressOverlayColor;
/// Alpha of the remote user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true. Default value is LPColor.lpLabel.
@property (nonatomic) float remoteUserBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually. Default value is 0.3.
@property (nonatomic) float remoteUserBubbleTopLeftCornerRadius;
/// Top right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomRightCornerRadius;
/// Color code for the background of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBackgroundColor;
/// Color code for the outline of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBorderColor;
/// Color code for links in the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLinkColor;
/// Color code for the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double userBubbleBorderWidth;
/// Color code for the timestamp of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTimestampColor;
/// Color code for the send status text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleSendStatusTextColor;
/// Color code for the error view text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorTextColor;
/// Color code for the error view border of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorBorderColor;
/// Enable bubbles overlay when user performing a long press gesture on messaging bubbles.
@property (nonatomic) BOOL enableBubblesOverlayOnLongPress;
/// Color of the user bubble’s overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLongPressOverlayColor;
/// Alpha of the user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.  Default value is Default value is 0.3.
@property (nonatomic) float userBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopLeftCornerRadius;
/// Top right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomRightCornerRadius;
/// Regular expression for email hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubbleEmailLinksRegex;
/// Regular expression for url hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubbleUrlLinksRegex;
/// Regular expression for phone hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubblePhoneLinksRegex;
/// Define the bubble Top Padding.
@property (nonatomic) float bubbleTopPadding;
/// Define the bubble Bottom Padding.
@property (nonatomic) float bubbleBottomPadding;
/// Define the bubble Leading Padding.
@property (nonatomic) float bubbleLeadingPadding;
/// Define the bubble Trailing Padding.
@property (nonatomic) float bubbleTrailingPadding;
/// Define the bubble Timestamp Bottom Padding.
@property (nonatomic) float bubbleTimestampBottomPadding;
/// Define the bubble Timestamp Top Padding.
@property (nonatomic) float bubbleTimestampTopPadding;
/// When true, user and remote user messages containing one or two emojies will be enlarged in chat. Messages with one emoji will be the largest, two emojis will be large, and 3 or more will be displayed as normal text.
@property (nonatomic) BOOL enableEnlargeEmojies;
/// Custom button icon image that displays on the navigation bar.
/// NOTE: this property gets its tintColor from <code>conversationNavigationTitleColor</code>
/// When pressed, the <a href="mobile-app-messaging-sdk-for-ios-sdk-apis-callbacks-index.html#lpmessagingsdkcustombuttontapped">LPMessagingSDKCustomButtonTapped</a> callback gets invoked.
@property (nonatomic, strong) UIImage * _Nullable customButtonImage;
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL enableFileSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromAgent");
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL enablePhotoSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromConsumer");
/// Should display status bar of the secure form screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL secureFormUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use secureFormUIStatusBarStyle");
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStrucutredContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use enableStructuredContent instead");
/// Should display status bar of the survey screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL csatUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use csatUIStatusBarStyle instead");
/// TTR - Time To Respond. Enable presentation of ‘Urgent’ button in the TTR notification
/// DEPRECATED - Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu.
@property (nonatomic) BOOL showUrgentButtonInTTRNotification SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu");
/// Opacity level of TTR  banner background (values: 0.0 - 1.0).
@property (nonatomic) double ttrBannerOpacityAlpha SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="instead of using opacity alpha, use supported light/dark colors on 'ttrBannerBackgroundColor' and 'ttrBannerTextColor'");
/// Custom button image. This will be displayed on the navigation bar.
@property (nonatomic, copy) NSString * _Nonnull customButtonIconName SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonImage instead");
/// DEPRECATED - use customButtonAccessibilityDescription key in Localization languages files instead
/// Accessibility voiceover string for the custom button.
@property (nonatomic, copy) NSString * _Nonnull customButtonDescription SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonAccessibilityDescription key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextDistributed SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextDistributed key in Localization languages files instead");
/// DEPRECATED - use readReceiptTextSent key in Localization languages files instead
/// Text for sent indication.
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextSent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextSent key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextRead SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextRead key in Localization languages files instead");
/// User text underline color.
@property (nonatomic, strong) UIColor * _Nonnull editTextUnderlineColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="underline is not used any more. To change background color of TextView container use inputTextViewContainerBackgroundColor");
/// DEPRECATED - Color of checkmark indication signs of Read messages
/// Use checkmarkReadColor instead.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use checkmarkReadColor instead");
/// Allow URL Protocol sniffing via the use of HTTP request with URLSession shared instance. NOTE: When setting this configuration TRUE - Cert Pinning option will be disabled!
@property (nonatomic) BOOL allowURLProtocolSniffing;
/// LivePerson enviornment account is set to .production, .alpha, or .qa
@property (nonatomic) enum LPAccountEnviroment accountEnvironment;
/// CSDS Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull csdsDomain;
/// lpTag Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull lpTagDomain;
/// The maximum height of the input text field in pixels. Default is 100 pixels.
/// Cannot be smaller than 50 pixels.
@property (nonatomic) CGFloat inputTextViewMaxHeight;
/// LPConfig is a singletone class,
/// When defaultConfiguration is called it initializes the LPConfig
/// and returns its object with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LPConfig * _Nonnull defaultConfiguration;)
+ (LPConfig * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultConfiguration:(LPConfig * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Calling this will reset the configurations to default values… not all values will be updated based on how the respective managers are instantiated.
- (void)resetToDefaultConfiguration;
/// Fallback in case setValueForKey failed. This method is necessary as the host app might call a deprecated value which will cause an NSUnknownKeyException if this method is not implemented.
/// \param value The value of the unknown key
///
/// \param key The key which wasn’t found in LPConfig
///
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
/// Prints all the configurations keys of the SDK.
+ (void)printAllConfigurations;
@end

@class LPUserEntity;

SWIFT_CLASS("_TtC7LPInfra12LPConnection")
@interface LPConnection : NSObject
@property (nonatomic, strong) LPUserEntity * _Null_unspecified consumer SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.consumer' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<LPConversationEntity *> * _Null_unspecified conversations SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.conversations' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)initWithConsumer:(LPUserEntity * _Nonnull)consumer conversations:(NSArray<LPConversationEntity *> * _Nonnull)conversations OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPConnection.init(consumer:conversations:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Return last conversation from connection conversations
/// \param connection Connection from which we want to get last (most new) conversation
///
///
/// returns:
/// Conversation or nil
@property (nonatomic, readonly, strong) LPConversationEntity * _Nullable lastConversation SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.lastConversation' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSDate * _Nullable effectiveTtr SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.effectiveTtr' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LPConnection (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) NSInteger numberOfUnreadMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.numberOfUnreadMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get title label with the following priorities:
/// Fullname > Phone Number > Consumer ID
@property (nonatomic, readonly, copy) NSString * _Nonnull titleLabel SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.titleLabel' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

typedef SWIFT_ENUM(NSInteger, LPConversationCloseReason, closed) {
  LPConversationCloseReasonAgent = 0,
  LPConversationCloseReasonConsumer = 1,
  LPConversationCloseReasonSystem = 2,
};

@class TTRModel;
@class NSOrderedSet;
@class NSMutableSet;

SWIFT_CLASS("_TtC7LPInfra20LPConversationEntity")
@interface LPConversationEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSString * _Nonnull ttrTypeRaw;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, strong) TTRModel * _Nullable ttrModel;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSSet * _Nonnull conversationDialogs;
@property (nonatomic, readonly, strong) NSOrderedSet * _Nonnull conversationMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.conversationMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL resolved SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.resolved' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) NSMutableSet * _Nonnull currentlyAcceptedSequences SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.currentlyAcceptedSequences' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL isHistoryFilterEnable SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isHistoryFilterEnable' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL presented SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.presented' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull logDescription SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.logDescription' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class LPMessageEntity;

@interface LPConversationEntity (SWIFT_EXTENSION(LPInfra))
- (void)addConversationDialogsObject:(LPDialogEntity * _Nonnull)value;
- (void)removeConversationDialogsObject:(LPDialogEntity * _Nonnull)value;
- (void)addConversationDialogs:(NSSet * _Nonnull)values;
- (void)removeConversationDialogs:(NSSet * _Nonnull)values;
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull sortedMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.sortedMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull unreadMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.unreadMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, strong) LPMessageEntity * _Nullable lastMessageObj SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.lastMessageObj' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable lastMessageOriginator SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.lastMessageOriginator' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull relatedSocketID SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.relatedSocketID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)isActivityInIdle SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.isActivityInIdle()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (NSArray<LPMessageEntity *> * _Nonnull)getMessagesPage:(NSInteger)from pageSize:(NSInteger)pageSize SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getMessagesPage(_:pageSize:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)isCurrentlyUrgent SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.isCurrentlyUrgent()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isResolvedAutomatically SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isResolvedAutomatically' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.resolve()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve:(NSString * _Nonnull)closeReason SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.resolve(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Takes pending messages from a conversation that is about to be closed and pass them to a new converation to be sent at
/// \param resolvingConversation The conversation that is about to be closed
///
- (void)passPendingMessagesToNewConversationWithResolvingConversation:(LPConversationEntity * _Nonnull)resolvingConversation SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.passPendingMessagesToNewConversation(resolvingConversation:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// TODO:
/// Move this function to UITimestampsFormatter once the new system messages will be implemented and the timestamp will not be saved to DB.
- (NSString * _Nonnull)getResolveDateString:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getResolveDateString(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (LPConversationEntity * _Nonnull)createNewConversation:(LPBrandEntity * _Nonnull)brand SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.createNewConversation(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Determines if CSAT should be displayed for the conversation based on
/// Configuation, agent details and previous CSAT submission
@property (nonatomic, readonly) BOOL canShowCSAT SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.canShowCSAT' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Update existing effectiveTTR for conversation
/// This method will update the effectiveTTR with calculation of the current time and saved params from the last ttr notification which recevied
/// in the last exConversationChangeNotification.
/// In case manualETTR is set - effectiveTTR will be equal
/// \param reset reset effectiveTTR which will be applied only if there’s no manualETTR. Reset usuall should be sent upon agent’s messages
///
- (void)updateTTRModelWithReset:(BOOL)reset SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.updateTTRModel(reset:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return all open dialog for conversation
///
/// returns:
/// open dialog array
- (NSArray<LPDialogEntity *> * _Nonnull)getOpenDialogs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getOpenDialogs()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the first object (first phase in multi dialog we will need to support only one open dialog for conversation)
///
/// returns:
/// Dialog
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getOpenDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the latest created dialog for conversation sort by  dialog.creationDate
///
/// returns:
/// latest dialog
- (LPDialogEntity * _Nullable)getLatestDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getLatestDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the latest created dialog for conversation sort by  dialog.creationDate
///
/// returns:
/// latest dialog
- (LPDialogEntity * _Nullable)getPendingDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getPendingDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

enum LPConversationsHistoryStateToDisplay : NSInteger;
enum LPConversationHistoryMaxDaysDateType : NSInteger;

SWIFT_CLASS("_TtC7LPInfra33LPConversationHistoryControlParam")
@interface LPConversationHistoryControlParam : NSObject
@property (nonatomic) NSInteger historyConversationsMaxDays;
@property (nonatomic) enum LPConversationsHistoryStateToDisplay historyConversationsStateToDisplay;
@property (nonatomic) enum LPConversationHistoryMaxDaysDateType historyConversationMaxDaysType;
@property (nonatomic, readonly) BOOL isEnable;
- (nonnull instancetype)initWithHistoryConversationsStateToDisplay:(enum LPConversationsHistoryStateToDisplay)historyConversationsStateToDisplay historyConversationsMaxDays:(NSInteger)historyConversationsMaxDays historyMaxDaysType:(enum LPConversationHistoryMaxDaysDateType)historyMaxDaysType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control if filter the max dayes by conversation start date or by conversation close date
typedef SWIFT_ENUM(NSInteger, LPConversationHistoryMaxDaysDateType, closed) {
  LPConversationHistoryMaxDaysDateTypeStartConversationDate = 0,
  LPConversationHistoryMaxDaysDateTypeEndConversationDate = 1,
};

enum ScrollPosition : NSInteger;

SWIFT_CLASS("_TtC7LPInfra33LPConversationScrollConfiguration")
@interface LPConversationScrollConfiguration : NSObject
/// scenario when the SDK conversation is shown
@property (nonatomic) enum ScrollPosition showConversation;
/// scenario when the application goes from background to foreground state
@property (nonatomic) enum ScrollPosition backgroundToForeground;
/// scenario when the SDK scroll to bottom button is pressed
@property (nonatomic) enum ScrollPosition scrollToBottomButtonPressed;
/// scenario when a push notification is tapped.
/// note:
/// This requires the call <code>LPMessagingSDK.instance.setPushNotificationTapped()</code> immediately after it is determine that a push notification was tapped.
@property (nonatomic) enum ScrollPosition pushNotificationTapped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScrollPosition, closed) {
/// scroll to the bottom of the conversation
  ScrollPositionBottom = 0,
/// scroll to the last known position. If none found, scrolls to bottom of conversation.
  ScrollPositionLastPosition = 1,
/// scroll to the first unread message. If none found, scrolls to bottom of conversation.
  ScrollPositionFirstUnreadMessage = 2,
};

@class UIViewController;
@class LPWelcomeMessage;

/// <h1>LPConversationViewParams</h1>
/// Represents an object to determine on conversation mode, filter and container. Such as Container or Window or if ViewOnly.
SWIFT_CLASS("_TtC7LPInfra24LPConversationViewParams")
@interface LPConversationViewParams : NSObject
@property (nonatomic, strong) id <ConversationParamProtocol> _Nonnull conversationQuery;
@property (nonatomic, strong) UIViewController * _Nullable containerViewController;
@property (nonatomic, readonly) BOOL isViewOnly;
@property (nonatomic, readonly, strong) LPConversationHistoryControlParam * _Nonnull conversationHistoryControlParam;
@property (nonatomic, strong) LPWelcomeMessage * _Nonnull welcomeMessage;
/// <h1>LPConversationViewParams</h1>
/// \param conversationQuery Type ConversationParamProtocol which ties this object to the brand.
///
/// \param containerViewController Type UIViewController used as a reference if embedding the view.
///
/// \param isViewOnly Bool is the request pertaining to obtaining a single view (true) to embed or a whole view stack (false).
///
/// \param conversationHistoryControlParam LPConversationHistoryControlParam object related to displaying history within a conversation.
///
/// \param welcomeMessage LPWelcome object related to welcome message at the start of the conversation.
///
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam welcomeMessage:(LPWelcomeMessage * _Nonnull)welcomeMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,deprecated=12.0.0,obsoleted=14.0.0,message="Use public init(conversationQuery: ConversationParamProtocol, containerViewController: UIViewController? = nil, isViewOnly: Bool = false, conversationHistoryControlParam: LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .none), welcomeMessage: LPWelcomeMessage = LPWelcomeMessage(message: nil)) instead");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control what kind of conversation to show
typedef SWIFT_ENUM(NSInteger, LPConversationsHistoryStateToDisplay, closed) {
  LPConversationsHistoryStateToDisplayOpen = 0,
  LPConversationsHistoryStateToDisplayClose = 1,
  LPConversationsHistoryStateToDisplayNone = 2,
};


SWIFT_CLASS("_TtC7LPInfra19LPCustomBoardEntity")
@interface LPCustomBoardEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, strong) NSOrderedSet * _Nonnull linkPreviewItems;
@property (nonatomic, strong) LPMessageEntity * _Nonnull ownerMessage;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class NSError;

SWIFT_PROTOCOL("_TtP7LPInfra24LPDataManagerSDKDelegate_")
@protocol LPDataManagerSDKDelegate
- (void)LPMessagingSDKDataEncryptionFailed:(NSError * _Nonnull)error;
@end

@class NSNumber;

SWIFT_CLASS("_TtC7LPInfra14LPDialogEntity")
@interface LPDialogEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable assignedAgentId;
@property (nonatomic, copy) NSString * _Nullable channelType;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nullable dialogType;
@property (nonatomic, strong) NSNumber * _Nonnull lastReceivedSequence;
@property (nonatomic) BOOL resolved;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, strong) LPConversationEntity * _Nonnull ownerConversation;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSOrderedSet * _Nonnull dialogMessages;
@property (nonatomic, readonly, strong) LPMessageEntity * _Nullable lastMessageObj SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.lastMessageObj' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull sortedMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.sortedMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isClose SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.isClose' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull logDescription SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.logDescription' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPDialogEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve:(NSString * _Nonnull)closeReason SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.resolve(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// create dialog for the welcome message
/// in this dialog there is no uid
/// \param conversation owner conversation
///
+ (LPDialogEntity * _Nonnull)createDialogFrom:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.createDialog(from:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Sequence number is received from the QueryMessages or from OnlineEvent messages. Sequence number is increased by the server for both new message and accept status (ACCEPT/READ).
/// If the sequence number is following to what we have, set it as the last one
/// If not, save it in a temporary array in order to set it as the last one in the future
/// After words, it goes through self.currentlyAcceptedSequences and sets each object as the last one if it is following to the current last one (and removes from the temporary array)
- (void)acceptSequence:(NSInteger)seq SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.acceptSequence(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// TODO:
/// Move this function to UITimestampsFormatter once the new system messages will be implemented and the timestamp will not be saved to DB.
- (NSString * _Nonnull)getResolveDateString:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.getResolveDateString(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class NSDate;

SWIFT_CLASS("_TtC7LPInfra12LPFileEntity")
@interface LPFileEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable fileExtension;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable relativeFilePath;
@property (nonatomic, copy) NSString * _Nullable relativeThumbnailPath;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, strong) NSDate * _Nullable creationDate;
@property (nonatomic, strong) LPMessageEntity * _Nullable ownerMessage;
@property (nonatomic, copy) NSString * _Nullable swiftRelativePath;
@property (nonatomic, strong) LPFileMetaDataContainer * _Nullable metaDataContainer;
@property (nonatomic, strong) UIImage * _Nullable thumbnailImage;
@property (nonatomic, copy) void (^ _Nullable completion)(void);
@property (nonatomic, copy) void (^ _Nullable failure)(NSError * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable preUpload)(void);
@property (nonatomic, copy) void (^ _Nullable preDownload)(void);
@property (nonatomic, copy) void (^ _Nullable uploading)(double);
@property (nonatomic) CGFloat uploadPercentage;
@property (nonatomic, copy) void (^ _Nullable downloading)(double);
@property (nonatomic) CGFloat downloadPercentage;
@property (nonatomic, copy) void (^ _Nullable synced)(void);
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFileEntity (SWIFT_EXTENSION(LPInfra))
/// Determines if the file is currently being tranffering (download/upload)
@property (nonatomic, readonly) BOOL isTransferring;
/// Determine if the file is audio file
- (BOOL)isAudioFile SWIFT_WARN_UNUSED_RESULT;
/// Clears blocks handlers
- (void)clearFileBlocks;
@end



SWIFT_CLASS("_TtC7LPInfra12LPFormEntity")
@interface LPFormEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable formID;
@property (nonatomic, copy) NSString * _Nonnull invitationID;
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable submissionID;
@property (nonatomic, strong) NSOrderedSet * _Nonnull ownerMessages;
@property (nonatomic, copy) NSString * _Nullable readOTK;
@property (nonatomic, copy) NSString * _Nullable writeOTK;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFormEntity (SWIFT_EXTENSION(LPInfra))
/// Create new File instance with UID
+ (LPFormEntity * _Nonnull)createNewFormWithFormID:(NSString * _Nullable)formID invitationID:(NSString * _Nonnull)invitationID title:(NSString * _Nullable)title ownerMessage:(LPMessageEntity * _Nonnull)ownerMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) LPDialogEntity * _Nullable ownerDialog;
@end

@class LPWebSocket;
@class UploadInfo;
@class LPUser;

SWIFT_CLASS("_TtC7LPInfra13LPInfraFacade")
@interface LPInfraFacade : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BOOL)initializeInfra SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Brand query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationBrandQuery:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Consumer and Skill query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationConsumerQuery:(NSString * _Nullable)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken SWIFT_WARN_UNUSED_RESULT;
/// Get current WebSocket (LPWebSocket) for brand if exists
+ (LPWebSocket * _Nullable)getSocket:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// Open and reconnect each WebSocket in the web sockets map.
+ (void)openAllSockets;
/// Open and reconnect single WebSocket and assign to web sockets map.
/// This method creates new WebSocket instances based on the previous ones because we can’t reuse WebSocket instances.
+ (void)openSocket:(LPWebSocket * _Nonnull)webSocket;
/// Close all sockets in the web sockets map
/// We DON’T remove the web sockets from the map in order to be able to re-create web socket from a previous one
+ (void)closeAllSockets;
/// Remove all sockets from web sockets map and clear their open requests
+ (void)removeSockets;
+ (void)saveData:(NSManagedObjectContext * _Nullable)givenContext;
+ (void)saveContext;
+ (NSManagedObjectContext * _Nullable)getContext SWIFT_WARN_UNUSED_RESULT;
+ (void)saveDataWithGetContextFrom:(NSManagedObject * _Nullable)obj;
+ (BOOL)deleteManagedObject:(NSManagedObject * _Nonnull)object context:(NSManagedObjectContext * _Nullable)givenContext SWIFT_WARN_UNUSED_RESULT;
+ (void)resetDatabaseWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Clear all singleton managers with their properties from memory.
/// This method will release any data objects and data structures.
+ (void)clearManagers;
/// Create file from UploadInfo and return when ready if succeeded, invoke error otherwise.
/// Using GeneratePhotoOperation
+ (void)prepareFileWithUploadInfo:(UploadInfo * _Nonnull)uploadInfo fileReadyCompletion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))fileReadyCompletion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Upload File to Swift server and AMS using file operation
+ (void)uploadFileWithFile:(LPFileEntity * _Nonnull)file uploadRelativePath:(NSString * _Nonnull)uploadRelativePath tempURLSig:(NSString * _Nonnull)tempURLSig tempURLExpiry:(NSString * _Nonnull)tempURLExpiry completion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full photo image from disk using file path.
/// If file path is invalid, an error will be invoked.
/// If file does not exist on disk, function will return nil for image.
+ (void)getPhotoFromFileWithFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Ensure file has been written to disk.
/// If file path is invalid, an error will be invoked.
/// If file does not exist on disk, function will return nil for fileEntity.
+ (void)getFilefromFileEntityWithFileEntity:(LPFileEntity * _Nonnull)fileEntity completion:(void (^ _Nonnull)(LPFileEntity * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full thumbnail image from disk using file path.
/// If image fails to created or file path is invalid, an error will be invoked.
+ (void)getThumbnailFromFileWithFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get thumbnail for the files in file sharing from custom configurations.
/// If custom configurations is nil, provide the thumbnail based on the files UTI
/// \param file local file to get the thumbnail from
///
+ (UIImage * _Nonnull)getThumbnailForFileTypeWithFile:(LPFileEntity * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
/// Returns a base64 string representation of the file’s thumbnail
+ (void)getBase64ThumbnailStringWithFile:(LPFileEntity * _Nonnull)file completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
///
+ (void)getBase64BlankThumbnailStringWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Deletes file and thumbnail from disk
+ (void)deleteFileFromDiskWithFile:(LPFileEntity * _Nonnull)file;
/// Deleting the main directory with all files in it.
/// This method is performed in background thread
+ (void)deleteAllFilesFromDisk;
+ (void)deleteAllFilesFromDiskWithCompletion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method delete number of files that exceeded maxNumberOfSavedFilesOnDisk from configuration.
/// The files will be get deleted accoring to FIFO methodology.
/// This method is performed in background thread and only of the photo sharing feature is enabled
+ (void)handleMaxNumberOfSavedFilesOnDisk;
/// Get root path where all SDK files are stored
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull filesDirectoryPath;)
+ (NSString * _Nonnull)filesDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Get temporary folder path for storing temporary files
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull filesTemporaryDirectoryPath;)
+ (NSString * _Nonnull)filesTemporaryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Check if supported image extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isImageExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Check if supported audio extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isAudioExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Check if supported file extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isFileExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Get Brand object for account ID
/// If there is no brand object for the account ID, a new brand will be created in DB
+ (LPBrandEntity * _Nonnull)getOrCreateBrandByAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
/// Set authentication params for brand
+ (void)setAuthenticationParams:(LPAuthenticationParams * _Nullable)params brandId:(NSString * _Nonnull)brandId;
+ (NSArray<NSString *> * _Nonnull)getCacheBrandByAccountIDs SWIFT_WARN_UNUSED_RESULT;
/// Get authentication params for brand
+ (LPAuthenticationParams * _Nullable)authenticationParamsForBrandWithBrandId:(NSString * _Nonnull)brandId SWIFT_WARN_UNUSED_RESULT;
/// Clear a single conversation and its assoicated messages and files.
/// Return TRUE if the conversation and its messages was deleted.
/// Return FALSE if the conversation or one if its messages were failed to delete.
+ (BOOL)clearConversationFromDB:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Delete all closed conversation and their
+ (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery isClearOpenConversation:(BOOL)isClearOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Delete any closed conversations which has close date older than the configured number of months
/// <ul>
///   <li>
///     When a candidate conversation was found - first delete all its messages and when done, delete the conversation
///   </li>
/// </ul>
+ (void)deleteOldConversations;
/// Get all closed conversations
+ (NSArray<LPConversationEntity *> * _Nullable)getAllClosedConversations:(NSDate * _Nullable)olderThanDate SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations from DB sorted by creation date (first object is the latest conversation)
/// If includeQueriedOnly parameter is false, only new conversations or conversations which messages should not be queried, will be returned
+ (NSArray<LPConversationEntity *> * _Nonnull)getConversationsSortedByDate:(id <ConversationParamProtocol> _Nonnull)query conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nullable)conversationHistoryControlParam SWIFT_WARN_UNUSED_RESULT;
/// Get conversation by handlerID from DB.
/// \param handlerID conversation handlerID
///
///
/// returns:
/// If conversation doens’t exist in DB nil will be returned
+ (LPConversationEntity * _Nullable)getConversationByHandlerID:(NSString * _Nonnull)handlerID SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation from DB
///
/// returns:
/// an open conversation if exists - if none, returns nil
+ (LPConversationEntity * _Nullable)getOpenConveration SWIFT_WARN_UNUSED_RESULT;
/// Get array of consumer ids that are related to messages that contain a certain string
/// This method iterates all messages in the database and returns the consumer id of those containing the wanted string
/// \param text The string that the messages should contain
///
///
/// returns:
/// Array of consumer ids or nil if none found
+ (NSArray<NSString *> * _Nullable)getConsumerIdsRelatedToMessagesThatContainsWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Get user details from ACCDN
/// \param brandID brandID of the user
///
/// \param userID user ID to get details for
///
/// \param completion comepltion block with User instance
///
/// \param failure failure block
///
+ (void)getUserDetailsFromACCDN:(NSString * _Nonnull)brandID userID:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(LPUserEntity * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Attach completion block which is being invoken when the Consumer (My) User is retrieved
+ (void)attachMyUserCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// This method fetch user from the database.
/// <ul>
///   <li>
///     Fetch user data from database
///   </li>
///   <li>
///     If user does not exist, a nil will be returned
///   </li>
/// </ul>
+ (LPUserEntity * _Nullable)getUserFromDatabaseWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Fetching the user profile (consumer or agent) from server and update in database received details and current date as lastUpdated
/// Fetch will be performed in the following cases:
/// <ol>
///   <li>
///     User was never fetched
///   </li>
///   <li>
///     User was not fetched in current app run
///   </li>
///   <li>
///     User was not fetched for more than 24Hrs
///   </li>
/// </ol>
+ (void)refreshUserProfileWithBrandID:(NSString * _Nonnull)brandID user:(LPUserEntity * _Nonnull)user;
/// Set user profile in database with details of user
+ (void)setUserProfileWithDetails:(LPUser * _Nonnull)lpuser brandID:(NSString * _Nonnull)brandID;
/// Get MY user ID from memory if exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable myUserID;)
+ (NSString * _Nullable)myUserID SWIFT_WARN_UNUSED_RESULT;
/// Get MY ALTERNATIVE user ID from memory if exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable myAgentVepUserID;)
+ (NSString * _Nullable)myAgentVepUserID SWIFT_WARN_UNUSED_RESULT;
/// Handle agent details that fetched and notifiy for fetched user
/// User details can be nil incase there should be notify for no assigned agent
+ (void)agentDetailsDidFetchWithUser:(LPUserEntity * _Nullable)user;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isNetworkReachable;)
+ (BOOL)isNetworkReachable SWIFT_WARN_UNUSED_RESULT;
/// Set image for URL in images cache
+ (void)setImageByURL:(UIImage * _Nonnull)image url:(NSString * _Nonnull)url;
/// Get image by URL from images cache
+ (UIImage * _Nullable)getImageByURL:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Send local notification (from type: UILocalNotification) in iOS notification center
+ (void)sendLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
+ (NSString * _Nonnull)getAppIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Register pusher with push notification token received from APNS (Apple).
/// Before registering the Pusher, we make sure have the following params:
/// <ul>
///   <li>
///     Consumer UserID
///   </li>
///   <li>
///     Push Token from Apple
///   </li>
///   <li>
///     CSDS Domain for Pusher
///   </li>
///   <li>
///     Account (brand account)
///     When all params availble - perform register
///   </li>
/// </ul>
+ (void)registerPusher:(LPBrandEntity * _Nonnull)brand;
/// Unregister pusher.
/// Before unregistering the Pusher, we make sure we have the following params:
/// param: Consumer UserID
/// param: CSDS Domain for Pusher
/// param: Account (brand account)
/// When all params available - perform unregister
+ (void)unregisterPusher:(LPBrandEntity * _Nonnull)brand completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=12.1.0,obsoleted=14.0.0,message="Use unregisterPusherFor(_ brandId: String) instead");
/// Unregister pusher.
/// <ul>
///   <li>
///     Account (brand account)
///   </li>
/// </ul>
+ (void)unregisterPusherFor:(NSString * _Nonnull)brandId completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get unread message badge counter
/// There are two options to get this counter:
/// <ol>
///   <li>
///     If the time condition is met we are performing a REST request to get it from pusher
///   </li>
///   <li>
///     otherwise, return the cached number we have
///   </li>
/// </ol>
/// note:
/// this method requires the user to accept/allow push notifications (dependancy of pusher)
/// \param conversationQuery used to identify the related brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessagesCount:(id <ConversationParamProtocol> _Nonnull)conversationQuery completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get unread message badge counter
/// \param brandID the account number for the brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessageCountWithBrandID:(NSString * _Nonnull)brandID completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get All CSDS Service Domains
/// This method uses cache to store and fetch services domains. For every new app session, the CSDS cache will get updated from server
/// Completion blocks will be invoked once there is a stored cache or after the request from the server completed
/// \param accountID accountID to get all services for
///
/// \param completion completion block with the response domains from server
///
/// \param failure failure block with error which will be invoked if server request failed
///
+ (void)getAllCSDSDomains:(NSString * _Nonnull)accountID completion:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Returns a string value for a specified key.
/// \param keyName The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
+ (NSString * _Nullable)keychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given keyname, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param forKey The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
+ (BOOL)setKeychainString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove a string associated with a specified key.
/// \param keyName The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
+ (BOOL)removeKeychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove all object from keychain
+ (BOOL)removeAllKeychainObjects SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nullable)getMessagesOfLatestConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nonnull)getMessagesFromConversationWithConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getLastMessageTimeStamp:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get next conversation which messages need to query.
/// Calculating of next conversation is done by gathering all the conversations that needs to be queried, and the one with the latest creationDate
+ (LPConversationEntity * _Nullable)getNextConversationForQueryMessagesIfExists:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getConversations:(id <ConversationParamProtocol> _Nonnull)query predicate:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get all active conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (LPConversationEntity * _Nullable)getActiveConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get the newest (latest) close conversation if exists
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(id <ConversationParamProtocol> _Nonnull)query conversationsCount:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
+ (LPConversationEntity * _Nonnull)createConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Clear a initial created conversation and its assoicated messages.
/// An initial created conversation is a conversation which is created and now only shows welcome message
/// Before removing the conversation, we are checking that there is no multiple messages which are still not sent to prevent cases when new conversation with messages still not synced with server and may be deleted
/// \param conversation initial conversation to delete from DB
///
///
/// returns:
/// true if deleted from DB, else false
+ (BOOL)clearInitialCreatedConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Get the assigned agent of the recent open/closed conversation if exists.
+ (LPUserEntity * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Returns the message boards if exist.
/// The message boards are the link preview data structures
/// built from the html meta data of the source url
+ (void)getMessageBoardsWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Delete preview images directory from disk and all its content
+ (void)deleteAllPreviewImagesFromDiskWithCompletion:(void (^ _Nullable)(void))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Get expiration token of a JWT from a token string
/// \param jwtToken JWT string to extract the expiration from
///
///
/// returns:
/// expiration Data instance or nil incase JWT failed to be decoded
+ (NSDate * _Nullable)getExpirationDateFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
/// Get UserID of a JWT from a token string
/// \param jwtToken jwtToken: JWT string to extract the userID from
///
///
/// returns:
/// userID String or nil incase JWT failed to be decoded
+ (NSString * _Nullable)getUserIDFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
@end

/// All SDK supported languages
/// The enum contains general languages and specific if exists.
/// For example: Portuguese from ‘pt’ folder will be used for all regions when the language is Portuguese. Portuguese from ‘pt-PT’ folder will be used for Portugal region only when the language is Portuguese (Portugal)
typedef SWIFT_ENUM(NSInteger, LPLanguage, closed) {
  LPLanguageDevice = 0,
  LPLanguageEn = 1,
  LPLanguageEn_GB = 2,
  LPLanguagePt = 3,
  LPLanguagePt_PT = 4,
  LPLanguageFr = 5,
  LPLanguageBg = 6,
  LPLanguageCs = 7,
  LPLanguageDa = 8,
  LPLanguageSr = 9,
  LPLanguageDe = 10,
  LPLanguageEl = 11,
  LPLanguageHe = 12,
  LPLanguageHe_IL = 13,
  LPLanguageEs = 14,
  LPLanguageEt = 15,
  LPLanguageFi = 16,
  LPLanguageHi = 17,
  LPLanguageHr = 18,
  LPLanguageHu = 19,
  LPLanguageIt = 20,
  LPLanguageJa = 21,
  LPLanguageKo = 22,
  LPLanguageLt = 23,
  LPLanguageLv = 24,
  LPLanguageMk = 25,
  LPLanguageNb = 26,
  LPLanguageNl = 27,
  LPLanguagePl = 28,
  LPLanguageRo = 29,
  LPLanguageRu = 30,
  LPLanguageSl = 31,
  LPLanguageSk = 32,
  LPLanguageSv = 33,
  LPLanguageTh = 34,
  LPLanguageTr = 35,
  LPLanguageUk = 36,
  LPLanguageVi = 37,
  LPLanguageZh = 38,
  LPLanguageZh_Hans = 39,
  LPLanguageZh_Hant_hk = 40,
};


SWIFT_CLASS("_TtC7LPInfra19LPLinkPreviewEntity")
@interface LPLinkPreviewEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable captionTitle;
@property (nonatomic, copy) NSString * _Nullable captionDescription;
@property (nonatomic, copy) NSString * _Nullable captionSiteName;
@property (nonatomic, copy) NSString * _Nullable relativeImagePath;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable imageState;
@property (nonatomic, strong) LPCustomBoardEntity * _Nonnull ownerCustomBoard;
@property (nonatomic, copy) void (^ _Nullable imageDownloadCompleted)(UIImage * _Nullable);
@property (nonatomic, copy) void (^ _Nullable imageDownloadFailed)(NSError * _Nonnull);
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPLinkPreviewEntity (SWIFT_EXTENSION(LPInfra))
- (void)setImageWithImage:(UIImage * _Nullable)image relativePath:(NSString * _Nonnull)relativePath;
/// Get custom image. First look for an image from RAM, then look for an image from DISK, lastely, download image from url
/// \param completion completion with optional UIImage
///
- (void)getImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (UIImage * _Nullable)getImageFromCache SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra5LPLog")
@interface LPLog : NSObject
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable className;
@property (nonatomic, copy) NSString * _Nullable funcName;
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StructuredContentItemContainer;

SWIFT_CLASS("_TtC7LPInfra15LPMessageEntity")
@interface LPMessageEntity : NSManagedObject
@property (nonatomic, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull content;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull statusRaw;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull messageType;
@property (nonatomic, strong) LPDialogEntity * _Nonnull ownerDialog;
@property (nonatomic, strong) LPUserEntity * _Nullable ownerUser;
@property (nonatomic, strong) LPFileEntity * _Nullable file;
@property (nonatomic, strong) LPFormEntity * _Nullable form;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, strong) NSOrderedSet * _Nullable customBoards;
@property (nonatomic, copy) NSString * _Nullable linkPreviewState;
@property (nonatomic, strong) StructuredContentItemContainer * _Nullable structuredContentItemContainer;
@property (nonatomic) BOOL presented;
@property (nonatomic, copy) void (^ _Nullable boardsBuildCompleted)(NSArray<LPCustomBoardEntity *> * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.boardsBuildCompleted' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable boardsBuildFailed)(NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.boardsBuildFailed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// time when UI requested to show ‘Sending’ text
@property (nonatomic, copy) NSDate * _Nullable requestedToShowSendingState SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.requestedToShowSendingState' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nonnull lastSendingTimestamp SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.lastSendingTimestamp' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable messageMetadata SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.messageMetadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable maskedContent SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.maskedContent' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Migration for older agent messages types to new messages RemoteUser type
/// NOTE: JUNE 2016 - THIS METHOD CAN BE REMOVED AFTER THE NEXT 2-3 SDK RELEASES ARE OUT
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface LPMessageEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL isSystemMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isSystemMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isRemoteMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isRemoteMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isUserMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isUserMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isControllerMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isControllerMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isLinkPreview SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isLinkPreview' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isStructuredContent SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isStructuredContent' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (NSString * _Nonnull)buildUID:(NSString * _Nonnull)dialogUID sequence:(NSInteger)sequence SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.buildUID(_:sequence:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (NSPredicate * _Nonnull)byDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.byDate(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get messages boards from message
/// If boards already exist, return it, else pending to boards build completion
/// \param completion completion with array of board. Array can be empty if there are no boards
///
- (void)getBoardsWithCompletion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.getBoards(completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

/// ENUM to list major features to control from config.
/// <ul>
///   <li>
///     userFileSharing: Enable sharing files from consumer to agent. (photo and files)
///   </li>
///   <li>
///     audioSharing: Enable sharing audio from consumer to agent.
///   </li>
///   <li>
///     agentFileSharing: Allow sending files from agent to consumer. (photo and files)
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LPMessagingSDKFeature, closed) {
  LPMessagingSDKFeatureUserFileSharing = 0,
  LPMessagingSDKFeatureAudioSharing = 1,
  LPMessagingSDKFeatureAgentFileSharing = 2,
};


SWIFT_CLASS("_TtC7LPInfra11LPOperation")
@interface LPOperation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (void)start;
- (void)finishOperation SWIFT_DEPRECATED_OBJC("Swift method 'LPOperation.finishOperation()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)cancel;
@property (nonatomic, readonly, getter=isReady) BOOL ready;
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
/// Cleaning operation when canceled
/// It is recommended to implement this method in sublclass and nullify blocks
- (void)clearOperationOnCancel SWIFT_DEPRECATED_OBJC("Swift method 'LPOperation.clearOperationOnCancel()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPPermissionTypes, closed) {
  LPPermissionTypesLocation = 0,
  LPPermissionTypesContacts = 1,
  LPPermissionTypesCalendars = 2,
  LPPermissionTypesReminders = 3,
  LPPermissionTypesPhotos = 4,
  LPPermissionTypesBluetooth = 5,
  LPPermissionTypesMicrophone = 6,
  LPPermissionTypesSpeechRecognition = 7,
  LPPermissionTypesCamera = 8,
  LPPermissionTypesHealth = 9,
  LPPermissionTypesHomekit = 10,
  LPPermissionTypesMediaLibrary = 11,
  LPPermissionTypesMotionAndFitness = 12,
};

@class NSBundle;

SWIFT_CLASS("_TtC7LPInfra12LPSDKManager")
@interface LPSDKManager : NSObject <GeneralManagerProtocol>
@property (nonatomic, strong) id <ConversationParamProtocol> _Nullable conversationQuery;
@property (nonatomic) BOOL isWindowMode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPSDKManager * _Nonnull instance;)
+ (LPSDKManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Fetch the bundle - LPMessagingSDKModels.bundle
///
/// returns:
/// Return a Bundle
+ (NSBundle * _Nullable)getBundle SWIFT_WARN_UNUSED_RESULT;
/// Fetch the SDKVersion from the current bundle
///
/// returns:
/// string with the current version. If failed to fetched returns nil
+ (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// This method determines if the current SDK version is applicable according to 2 different validations:
/// <ol>
///   <li>
///     First validation will check with the value from LPCDN (which we use for all users), if version applicable procceed.
///   </li>
///   <li>
///     If LPCDN version is applicable, we check the version compared to ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the version was applicable.
///   </li>
/// </ol>
/// \param brandID brandID to determine its min sdk setting
///
/// \param completion a boolean in a completion block. The SDK is applicable if the current version is greater or euqal to the fetched value
///
+ (void)isVersionApplicableWithBrandID:(NSString * _Nonnull)brandID configurationKey:(NSString * _Nullable)configurationKey useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL, BOOL))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Determines if a feature is enabled for account
/// <ol>
///   <li>
///     Fetch the static configuration data from LPCDN for global setting
///   </li>
///   <li>
///     If LPCDN setting is enabled, we check the feature with ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the feature enabled
///   </li>
/// </ol>
/// \param brandID brand/account id of the desired request
///
/// \param completion completion with boolean that shows if feature is enabled/disabled which calculated using LPConfig, LPCDN and ACCDN
///
+ (void)isFeatureEnabledWithFeature:(enum LPMessagingSDKFeature)feature brandID:(NSString * _Nonnull)brandID useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL))completion;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra7LPTimer")
@interface LPTimer : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration handler:(void (^ _Nonnull)(NSTimeInterval))handler OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPTimer.init(duration:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)start SWIFT_DEPRECATED_OBJC("Swift method 'LPTimer.start()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LPUrlPreviewStyle, closed) {
  LPUrlPreviewStyleSlim = 0,
  LPUrlPreviewStyleLarge = 1,
};


SWIFT_CLASS("_TtC7LPInfra6LPUser")
@interface LPUser : NSObject
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(LPUserEntity * _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra12LPUserEntity")
@interface LPUserEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nonnull typeRaw;
@property (nonatomic, copy) NSString * _Nullable bio;
@property (nonatomic, strong) NSSet * _Nonnull userMessages;
@property (nonatomic) BOOL isSaved;
@property (nonatomic, copy) NSDate * _Nullable lastUpdated;
@property (nonatomic, copy) NSString * _Nullable employeeID;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPUserEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL isConsumer;
@property (nonatomic, readonly, copy) NSString * _Nonnull fullName;
@property (nonatomic, readonly) BOOL isMe;
@property (nonatomic, readonly) BOOL isController;
@end


SWIFT_CLASS("_TtC7LPInfra19LPUserProfileEntity")
@interface LPUserProfileEntity : LPUserEntity
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class LPSRSecurityPolicy;

SWIFT_CLASS("_TtC7LPInfra11LPWebSocket")
@interface LPWebSocket : LPSRWebSocket
@property (nonatomic, copy) NSString * _Nonnull requestIndex SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.requestIndex' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.headers' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isClosed SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isClosed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isReadyToOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isReadyToOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)flushQueue SWIFT_DEPRECATED_OBJC("Swift method 'LPWebSocket.flushQueue()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSURL * _Null_unspecified socketURL SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.socketURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)cancelRequest:(NSString * _Nonnull)requestIndex SWIFT_DEPRECATED_OBJC("Swift method 'LPWebSocket.cancelRequest(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)open;
- (void)close;
- (nonnull instancetype)initWithURLRequest:(NSURLRequest * _Nonnull)request protocols:(NSArray<NSString *> * _Nullable)protocols securityPolicy:(LPSRSecurityPolicy * _Nonnull)securityPolicy SWIFT_UNAVAILABLE;
@end

enum MessageFrequency : NSInteger;
@class LPWelcomeMessageOption;
@class QuickReplyItem;

SWIFT_CLASS("_TtC7LPInfra16LPWelcomeMessage")
@interface LPWelcomeMessage : NSObject
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic) enum MessageFrequency frequency;
@property (nonatomic, readonly, copy) NSArray<LPWelcomeMessageOption *> * _Nonnull options;
@property (nonatomic, readonly) NSInteger numberOfOptionsPerRow;
@property (nonatomic, readonly, strong) QuickReplyItem * _Nullable quickReply;
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)message frequency:(enum MessageFrequency)frequency OBJC_DESIGNATED_INITIALIZER;
- (BOOL)shouldDisplayDefaultMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setWithOptions:(NSArray<LPWelcomeMessageOption *> * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
- (void)clearOptions;
- (void)setWithNumberOfOptionsPerRow:(NSInteger)NumberOfOptionsPerRow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MessageFrequency, closed) {
  MessageFrequencyFirstTimeConversation = 0,
  MessageFrequencyEveryConversation = 1,
};

typedef SWIFT_ENUM(NSInteger, LPWelcomeMessageError, closed) {
  LPWelcomeMessageErrorMaximumOptions = 0,
  LPWelcomeMessageErrorMaximumOptionTitleCharacters = 1,
  LPWelcomeMessageErrorMinimumOptionTitleCharacters = 2,
};
static NSString * _Nonnull const LPWelcomeMessageErrorDomain = @"LPInfra.LPWelcomeMessage.LPWelcomeMessageError";


SWIFT_CLASS("_TtC7LPInfra22LPWelcomeMessageOption")
@interface LPWelcomeMessageOption : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra16LanguagesManager")
@interface LanguagesManager : NSObject <GeneralManagerProtocol>
@property (nonatomic, copy) NSString * _Nullable c4mLanguage;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull supportedLanguages;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)supportedLanguages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LanguagesManager * _Nonnull instance;)
+ (LanguagesManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Prints all localized strings keys
+ (void)printAllKeys;
/// Prints the SDK supported languages
+ (void)printSupportedLanguages;
/// Get all supported languages by key-value (key is locale key and value is language description), call the following:
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Returns current locale special format for Form localization
/// Format based on <language-Region> for example “he-IL”
/// Supported Languages:
/// ar-AE bg-BG cs-CZ Cy-sr-SP da-DK de-DE el-GR es-ES et-EE fi-FI fr-FR he-IL hi-IN hr-HR hu-HU
/// it-IT ja-JP ko-KR it-LT lv-LV mk-MK nb-NO nl-NL pl-PL pt-BR pt-PT ro-RO ru-RU sk-SK sl-SL sv-SE th-TH tr-TR uk-UA vi-VN zh-CN zh-HK zh-TW
///
/// returns:
/// locale formatted string
+ (NSString * _Nonnull)getFormattedLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the language to use in SDK from native preferred language
/// <ol>
///   <li>
///     Get the first object from preferredLanguages and try to find it in our supported languages enum. If found, set it as default
///   </li>
///   <li>
///     If the language not found, try to take only the language itself (without the region) and do the same. If found, set it as default
///   </li>
///   <li>
///     If nothing found - set “en” as default language
///   </li>
/// </ol>
+ (NSString * _Nonnull)sdkLanguageFromLocalePreferredLanguage SWIFT_WARN_UNUSED_RESULT;
- (void)clearManager;
@end

enum LogLevel : NSInteger;

SWIFT_CLASS("_TtC7LPInfra8LogEvent")
@interface LogEvent : NSObject
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@property (nonatomic, readonly, copy) NSString * _Nonnull functionName;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LogLevel, closed) {
  LogLevelTrace = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelOff = 5,
};


SWIFT_CLASS("_TtC7LPInfra26MessagingEventNotification")
@interface MessagingEventNotification : GeneralResponse
@property (nonatomic, copy) NSString * _Nullable conversationID;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra21MessagingServiceEvent")
@interface MessagingServiceEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventId;
@property (nonatomic, readonly, strong) LPDialogEntity * _Null_unspecified dialog;
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable sender;
@property (nonatomic, copy) void (^ _Nullable fileMessageCompletion)(LPMessageEntity * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable fileMessageFailure)(NSError * _Nonnull);
- (nullable instancetype)initWithFailure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface NSManagedObject (SWIFT_EXTENSION(LPInfra))
/// Save changes in managed object context
/// <ul>
///   <li>
///     Parameter: completion - optional completion handler
///   </li>
/// </ul>
- (void)saveContextWithCompletion:(void (^ _Nullable)(BOOL))completion SWIFT_DEPRECATED_OBJC("Swift method 'NSManagedObject.saveContext(completion:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Determines whether the object was delete or it still exists in its managedObjectContext
@property (nonatomic, readonly) BOOL isValid SWIFT_DEPRECATED_OBJC("Swift property 'NSManagedObject.isValid' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Returns objectID string representation if the object is not temporary. Otherwise returns nil
@property (nonatomic, readonly, copy) NSString * _Nullable objectIDPermanentString SWIFT_DEPRECATED_OBJC("Swift property 'NSManagedObject.objectIDPermanentString' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end








SWIFT_CLASS("_TtC7LPInfra12PublishEvent")
@interface PublishEvent : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra16QuickReplyAction")
@interface QuickReplyAction : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyAction.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyAction.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class QuickReplyButtonDetails;

SWIFT_CLASS("_TtC7LPInfra16QuickReplyButton")
@interface QuickReplyButton : UIButton
@property (nonatomic, strong) QuickReplyButtonDetails * _Nullable details SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButton.details' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithQuickReplyButtonDetails:(QuickReplyButtonDetails * _Nonnull)quickReplyButtonDetails SWIFT_DEPRECATED_OBJC("Swift initializer 'QuickReplyButton.init(quickReplyButtonDetails:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)drawRect:(CGRect)rect;
@end

@class QuickReplyClick;
@class QuickReplyStyle;

SWIFT_CLASS("_TtC7LPInfra23QuickReplyButtonDetails")
@interface QuickReplyButtonDetails : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable text SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable tooltip SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.tooltip' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) QuickReplyClick * _Nullable click SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.click' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) QuickReplyStyle * _Nullable style SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.style' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra15QuickReplyClick")
@interface QuickReplyClick : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable metadata SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.metadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<QuickReplyAction *> * _Nullable actions SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.actions' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra14QuickReplyItem")
@interface QuickReplyItem : NSObject <NSCoding>
@property (nonatomic) NSInteger sequence SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.sequence' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable ownerMessageUID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.ownerMessageUID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<QuickReplyButtonDetails *> * _Nullable buttonsDetails SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.buttonsDetails' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithSequence:(NSInteger)sequence OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'QuickReplyItem.init(sequence:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra20QuickReplyLinkAction")
@interface QuickReplyLinkAction : QuickReplyAction
@property (nonatomic, copy) NSString * _Nonnull uri SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyLinkAction.uri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable deepLinkUri SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyLinkAction.deepLinkUri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra24QuickReplyNavigateAction")
@interface QuickReplyNavigateAction : QuickReplyAction
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyNavigateAction.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyNavigateAction.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra27QuickReplyPublishTextAction")
@interface QuickReplyPublishTextAction : QuickReplyAction
@property (nonatomic, copy) NSString * _Nonnull text SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyPublishTextAction.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra15QuickReplyStyle")
@interface QuickReplyStyle : NSObject <NSCoding>
@property (nonatomic, strong) UIColor * _Nullable color SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.color' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable borderColor SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.borderColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable backgroundColor SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.backgroundColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable size SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.size' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra19RequestConversation")
@interface RequestConversation : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra15RequestSwiftURL")
@interface RequestSwiftURL : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra4Ring")
@interface Ring : NSObject
@property (nonatomic, copy) NSString * _Nullable ringID SWIFT_DEPRECATED_OBJC("Swift property 'Ring.ringID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable brandId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.brandId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable conversationID SWIFT_DEPRECATED_OBJC("Swift property 'Ring.conversationID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable consumerId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.consumerId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable skillId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.skillId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable ringExpiration SWIFT_DEPRECATED_OBJC("Swift property 'Ring.ringExpiration' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra11RingUpdated")
@interface RingUpdated : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra23RoutingTaskNotification")
@interface RoutingTaskNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra25SecureFormReadOTKResponse")
@interface SecureFormReadOTKResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra23StructuredContentAction")
@interface StructuredContentAction : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentAction.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentAction.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StructuredContentClick;
@class StructuredContentStyle;

SWIFT_CLASS("_TtC7LPInfra21StructuredContentItem")
@interface StructuredContentItem : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable tooltip SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.tooltip' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentClick * _Nullable click SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.click' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentStyle * _Nullable style SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.style' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL requiresBorder SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.requiresBorder' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull structuredContentAccessibilityLabel SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.structuredContentAccessibilityLabel' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentButtonItem")
@interface StructuredContentButtonItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nullable title SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentButtonItem.title' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the button item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the text item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22StructuredContentClick")
@interface StructuredContentClick : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable metadata SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.metadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<StructuredContentAction *> * _Nullable actions SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.actions' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Click, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra26StructuredContentImageItem")
@interface StructuredContentImageItem : StructuredContentItem
@property (nonatomic, strong) UIImage * _Nullable image SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.image' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull imageURL SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable relativeImagePath SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.relativeImagePath' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable imageState SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageState' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable imageCaption SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageCaption' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable imageLoadingCompleted)(UIImage * _Nullable) SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageLoadingCompleted' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable imageLoadingFailed)(NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageLoadingFailed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the image item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the image item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end



@interface StructuredContentItem (SWIFT_EXTENSION(LPInfra))
- (void)iterateThroughWithIterationStep:(SWIFT_NOESCAPE void (^ _Nonnull)(StructuredContentItem * _Nonnull))iterationStep SWIFT_DEPRECATED_OBJC("Swift method 'StructuredContentItem.iterateThrough(iterationStep:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


SWIFT_CLASS("_TtC7LPInfra30StructuredContentItemContainer")
@interface StructuredContentItemContainer : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItemContainer.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentItem * _Nullable item SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItemContainer.item' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithStructuredContentItem:(StructuredContentItem * _Nonnull)structuredContentItem OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'StructuredContentItemContainer.init(structuredContentItem:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the StructuredContentItamsContainer, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the StructuredContentItamsContainer, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentLayoutItem")
@interface StructuredContentLayoutItem : StructuredContentItem
@property (nonatomic, copy) NSArray<StructuredContentItem *> * _Nullable itemsArray SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLayoutItem.itemsArray' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the horizontal item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the horizontal item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentLinkAction")
@interface StructuredContentLinkAction : StructuredContentAction
@property (nonatomic, copy) NSString * _Nonnull uri SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkAction.uri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable deepLinkUri SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkAction.deepLinkUri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Link action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra32StructuredContentLinkPreviewItem")
@interface StructuredContentLinkPreviewItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkPreviewItem.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable title SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkPreviewItem.title' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Link item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra24StructuredContentMapItem")
@interface StructuredContentMapItem : StructuredContentItem
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIImage * _Nullable snapShotImage SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.snapShotImage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the map item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the map item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra31StructuredContentNavigateAction")
@interface StructuredContentNavigateAction : StructuredContentAction
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentNavigateAction.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentNavigateAction.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Navigate action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Navigate action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra34StructuredContentPublishTextAction")
@interface StructuredContentPublishTextAction : StructuredContentAction
@property (nonatomic, copy) NSString * _Nonnull text SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentPublishTextAction.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the publishText action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22StructuredContentStyle")
@interface StructuredContentStyle : NSObject <NSCoding>
@property (nonatomic, strong) UIColor * _Nullable color SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.color' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable backgroundColor SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.backgroundColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable size SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.size' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Style, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Style, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra25StructuredContentTextItem")
@interface StructuredContentTextItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nullable text SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentTextItem.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the text item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the text item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra28StructuredContentWebviewItem")
@interface StructuredContentWebviewItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentWebviewItem.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Webview item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Webview item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22SubscribeConversations")
@interface SubscribeConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7LPInfra8TTRModel")
@interface TTRModel : NSObject <NSCoding>
@property (nonatomic, copy) NSDate * _Null_unspecified effectiveTTR SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.effectiveTTR' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable manualETTR SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.manualETTR' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) NSInteger ttrValue SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.ttrValue' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable delay SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.delay' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEffectiveTTR:(NSDate * _Nonnull)effectiveTTR manualETTR:(NSDate * _Nullable)manualETTR ttrValue:(NSInteger)ttrValue delay:(NSDate * _Nullable)delay OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'TTRModel.init(effectiveTTR:manualETTR:ttrValue:delay:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Compare two TTRModels based on the values of:
/// ttrValue, manualETTR and delay
/// \param other other TTRModel to compare
///
///
/// returns:
/// true if same, else false
- (BOOL)compareWithOther:(TTRModel * _Nonnull)other SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'TTRModel.compare(other:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIColor (SWIFT_EXTENSION(LPInfra))
- (nonnull instancetype)initWithRgba:(NSString * _Nonnull)rgba SWIFT_DEPRECATED_OBJC("Swift initializer 'UIColor.init(rgba:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIImage (SWIFT_EXTENSION(LPInfra))
- (UIImage * _Nullable)imageWithTint:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.imageWithTint(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get UIImage resized by provided size
- (UIImage * _Nullable)resizeImageWithTargetSize:(CGSize)targetSize scale:(CGFloat)scale opaque:(BOOL)opaque SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.resizeImage(targetSize:scale:opaque:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.getResizedImageSize(image:maxHeight:maxWidth:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Gets an image, blur and return it
/// if process failed it will return a nil
- (UIImage * _Nullable)blurImageWithRadius:(CGFloat)radius size:(CGSize)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.blurImage(radius:size:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Customize default image with background color and image color.
/// Used for remote message avatar image customization.
/// \param backgroundColor color to replace transparent background
///
/// \param imageColor color to replace image color
///
- (UIImage * _Nonnull)customizedDefaultRemoteAvatarImageWithBackgroundColor:(UIColor * _Nullable)backgroundColor imageColor:(UIColor * _Nullable)imageColor SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.customizedDefaultRemoteAvatarImage(backgroundColor:imageColor:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end




SWIFT_CLASS("_TtC7LPInfra10UploadInfo")
@interface UploadInfo : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull fileInfo SWIFT_DEPRECATED_OBJC("Swift property 'UploadInfo.fileInfo' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull brandID SWIFT_DEPRECATED_OBJC("Swift property 'UploadInfo.brandID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Update fileInfo object for audio file
- (BOOL)setAudioFileInfoFrom:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_OBJC("Swift method 'UploadInfo.setAudioFileInfo(from:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)setFileInfoFrom:(NSURL * _Nonnull)url caption:(NSString * _Nonnull)caption error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_OBJC("Swift method 'UploadInfo.setFileInfo(from:caption:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSUserDefaults (SWIFT_EXTENSION(LPInfra))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSUserDefaults * _Nonnull lpStandard SWIFT_DEPRECATED_OBJC("Swift property 'UserDefaults.lpStandard' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");)
+ (NSUserDefaults * _Nonnull)lpStandard SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift property 'UserDefaults.lpStandard' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


SWIFT_CLASS("_TtC7LPInfra5Utils")
@interface Utils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull backgroundQueue;)
+ (dispatch_queue_t _Nonnull)backgroundQueue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)JSONStringify:(NSDictionary<NSString *, id> * _Nonnull)value prettyPrinted:(BOOL)prettyPrinted SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)JSONDictionaryFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)trim:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidEmail:(NSString * _Nonnull)testStr SWIFT_WARN_UNUSED_RESULT;
+ (void)delay:(double)delay closure:(void (^ _Nonnull)(void))closure;
+ (NSInteger)minutesBetweenDates:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
+ (void)backgroundThread:(void (^ _Nonnull)(void))job;
+ (BOOL)isJWTExpired:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
+ (void)mainThread:(void (^ _Nonnull)(void))job;
/// Returns a random Int number from min to max
+ (NSInteger)randWithMin:(NSInteger)min max:(NSInteger)max SWIFT_WARN_UNUSED_RESULT;
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
+ (id _Nonnull)unwrapWithAny:(id _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Show Local iOS notification
+ (void)showLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
/// Play vibration sound based on iOS system vibration method
+ (void)playVibrationSound;
/// This method returns true if the device is landscape (it ignores states such as flat, face or back)
+ (BOOL)isLandscape SWIFT_WARN_UNUSED_RESULT;
/// This method returns true if the device is portrait (it ignores states such as flat, face or back)
+ (BOOL)isProtrait SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#else
// Headers for Device
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreGraphics;
@import CoreLocation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <LPInfra/LPInfra.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LPInfra",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AMSState, closed) {
  AMSStateIN_PROCESS = 0,
  AMSStateNETWORK_REACHABLE = 1,
  AMSStateCSDS_REACHABLE = 2,
  AMSStateVALID_TOKEN = 3,
  AMSStateOPENING_SOCKET = 4,
  AMSStateVALID_SOCKET = 5,
  AMSStateVALID_USERID = 6,
  AMSStateREADY = 7,
  AMSStateREADY_WITH_DATA = 8,
  AMSStateSDK_ERROR = -1,
  AMSStateGENERAL_ERROR = -2,
  AMSStateNETWORK_UNREACHABLE = -3,
  AMSStateCSDS_UNREACHABLE = -4,
  AMSStateNO_TOKEN = -5,
  AMSStateCLOSING_SOCKET = -6,
  AMSStateSOCKET_UNREACHABLE = -7,
  AMSStateNO_USERID = -8,
  AMSStateNO_SUBSCRIPTION = -9,
  AMSStateCERT_PINNING_FAILED = -10,
};


SWIFT_CLASS("_TtC7LPInfra15GeneralResponse")
@interface GeneralResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable kind;
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull responseDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra22AgentStateNotification")
@interface AgentStateNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end

@class LPConversationEntity;
@class NSPredicate;
@class LPDialogEntity;

SWIFT_PROTOCOL("_TtP7LPInfra25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
@end

@class LPCampaignInfo;

SWIFT_CLASS("_TtC7LPInfra10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by brand.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by brand, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation.
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all closed conversation
- (NSArray<LPConversationEntity *> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation.
- (LPConversationEntity * _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Get open Dialog.
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
/// Get the latest closed conversation.
- (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (LPCampaignInfo * _Nullable)getCampaignInfo SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra9CSATModel")
@interface CSATModel : NSObject
@property (nonatomic) BOOL skipped SWIFT_DEPRECATED_OBJC("Swift property 'CSATModel.skipped' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CheckmarksState, closed) {
  CheckmarksStateSentOnly = 1,
  CheckmarksStateSentAndAccepted = 2,
  CheckmarksStateAll = 3,
};


SWIFT_CLASS("_TtC7LPInfra13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * _Nonnull)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by consumerID.
- (NSArray<LPConversationEntity *> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation based on state and consumerID
- (LPConversationEntity * _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by consumerID, filtered with predicate
- (NSArray<LPConversationEntity *> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (LPConversationEntity * _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7LPInfra30ConversationChangeNotification")
@interface ConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7LPInfra41EngagementHistoryConsumerMessagesResponse")
@interface EngagementHistoryConsumerMessagesResponse : GeneralResponse
@property (nonatomic, copy) NSString * _Nullable ownerConversationID;
@property (nonatomic, copy) NSString * _Nullable brandID;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra24EngagementHistoryRequest")
@interface EngagementHistoryRequest : NSObject
@property (nonatomic, copy) NSString * _Nonnull brandID SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.brandID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable agentBearer SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.agentBearer' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable jwt SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.jwt' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable consumerID SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.consumerID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSString *> * _Nullable conversationsStatus SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.conversationsStatus' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable sortKeyword SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.sortKeyword' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable searchKeyword SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.searchKeyword' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) LPConversationEntity * _Nullable conversation SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.conversation' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable url SWIFT_DEPRECATED_OBJC("Swift property 'EngagementHistoryRequest.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra13ErrorResponse")
@interface ErrorResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra32ExConversationChangeNotification")
@interface ExConversationChangeNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7LPInfra22GeneralManagerProtocol_")
@protocol GeneralManagerProtocol
- (void)clearManager;
@end



SWIFT_CLASS("_TtC7LPInfra24SubscribeExConversations")
@interface SubscribeExConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra24GenericSubscribeResponse")
@interface GenericSubscribeResponse : SubscribeExConversations
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra15GetBrandProfile")
@interface GetBrandProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra8GetClock")
@interface GetClock : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra14GetUserProfile")
@interface GetUserProfile : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAcCdnDictionary:(NSDictionary<NSString *, id> * _Nonnull)acCdnDictionary OBJC_DESIGNATED_INITIALIZER;
@end

@class LPBrandEntity;
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC7LPInfra15LPAccountEntity")
@interface LPAccountEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull accountId;
@property (nonatomic, strong) LPBrandEntity * _Nonnull brand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPAccountEnviroment, closed) {
  LPAccountEnviromentProduction = 0,
  LPAccountEnviromentAlpha = 1,
  LPAccountEnviromentQa = 2,
};

@class NSCoder;

/// Base class for file metadata container attribute
SWIFT_CLASS("_TtC7LPInfra23LPFileMetaDataContainer")
@interface LPFileMetaDataContainer : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra28LPAudioFileMetaDataContainer")
@interface LPAudioFileMetaDataContainer : LPFileMetaDataContainer
@property (nonatomic, copy) void (^ _Nullable audioPlayerDidStart)(NSString * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerDidStart' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable audioPlayerDidFail)(NSString * _Nonnull, NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerDidFail' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable audioPlayerProgress)(NSString * _Nonnull, NSTimeInterval, NSTimeInterval) SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.audioPlayerProgress' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL isPlaying SWIFT_DEPRECATED_OBJC("Swift property 'LPAudioFileMetaDataContainer.isPlaying' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFileDuration:(NSInteger)fileDuration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPAudioFileMetaDataContainer.init(fileDuration:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)updateFrom:(LPAudioFileMetaDataContainer * _Nonnull)container SWIFT_DEPRECATED_OBJC("Swift method 'LPAudioFileMetaDataContainer.updateFrom(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum LPAuthenticationType : NSInteger;

/// #LPAuthenticationParams
/// This class represents an object to determine the properties of an authenticated connection. If using an authenticated connection, this parameter must be passed: LPAuthenticationParams supports Code Flow login, Implicit Flow login, or Unauthenticated login. See Constructor for details.
SWIFT_CLASS("_TtC7LPInfra22LPAuthenticationParams")
@interface LPAuthenticationParams : NSObject
@property (nonatomic, copy) NSString * _Nullable authenticationCode;
@property (nonatomic, copy) NSString * _Nullable jwt;
@property (nonatomic, copy) NSString * _Nullable redirectURI;
/// will hold the Cert pining validation public keys
@property (nonatomic, copy) NSArray<NSString *> * _Nullable certPinningPublicKeys;
@property (nonatomic) enum LPAuthenticationType type;
/// LPAuthenticationParams initialization with params
/// \param authenticationCode an optional authCode which is used for ‘Code Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param jwt an optional JWT which is used for ‘Implicit Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param redirectURI IDP redirect URI
///
/// \param certPinningPublicKeys Set the certificate public key hash this API can get multiple public key hashes for the ability to support more then one key and if the certificate leaf change his public key we will still be able to validate the keys of the others certificate leaf
/// if nil the Cert Pinning is disable
///
/// \param authenticationType .authenticated for Code Flow or Implicit, .unauthenticated for Unauthenticated.  If left as nil will default to .signup flow.
///
- (nonnull instancetype)initWithAuthenticationCode:(NSString * _Nullable)authenticationCode jwt:(NSString * _Nullable)jwt redirectURI:(NSString * _Nullable)redirectURI certPinningPublicKeys:(NSArray<NSString *> * _Nullable)certPinningPublicKeys authenticationType:(enum LPAuthenticationType)authenticationType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum is used for determine the authentication type with the following options:
/// signup (default) // old unauthenticated method
/// unauthenticated
/// authenticated
typedef SWIFT_ENUM(NSInteger, LPAuthenticationType, closed) {
  LPAuthenticationTypeSignup = 0,
  LPAuthenticationTypeUnauthenticated = 1,
  LPAuthenticationTypeAuthenticated = 2,
};

@class NSSet;

SWIFT_CLASS("_TtC7LPInfra13LPBrandEntity")
@interface LPBrandEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull iconURL;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable logoURL;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull details;
@property (nonatomic, strong) NSSet * _Nonnull brandCampaigns;
@property (nonatomic, strong) NSSet * _Nonnull brandConversations;
@property (nonatomic, copy) NSDate * _Nonnull dateJoined;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) NSSet * _Nonnull accounts;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPBrandEntity (SWIFT_EXTENSION(LPInfra))
- (LPConversationEntity * _Nullable)getCreatedConversation SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<LPConversationEntity *> * _Nonnull)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)getLastMessageTimeStamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAuthenticated SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra16LPCampaignEntity")
@interface LPCampaignEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra14LPCampaignInfo")
@interface LPCampaignInfo : NSObject
@property (nonatomic) NSInteger campaignId;
@property (nonatomic) NSInteger engagementId;
@property (nonatomic, copy) NSString * _Nullable contextId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable visitorId;
- (nonnull instancetype)initWithCampaignId:(NSInteger)campaignId engagementId:(NSInteger)engagementId contextId:(NSString * _Nullable)contextId sessionId:(NSString * _Nullable)sessionId visitorId:(NSString * _Nullable)visitorId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIImage;
enum LPUrlPreviewStyle : NSInteger;
@class UIBlurEffect;
enum LPLanguage : NSInteger;
@class LPConversationScrollConfiguration;

SWIFT_CLASS("_TtC7LPInfra8LPConfig")
@interface LPConfig : NSObject
/// A boolean which determines whether to retrieve the agent details from the last closed conversation in case there is no assigned agent. Agent details will be retrieved from API method: func getAssignedAgent(conversationQuery: ConversationParamProtocol)
@property (nonatomic) BOOL retrieveAssignedAgentFromLastClosedConversation;
/// Maximum time frame for recording audio message (in seconds).
@property (nonatomic) NSTimeInterval recordingDurationLimit;
/// Enable or disable audio sharing feature. True is enabled.
@property (nonatomic) BOOL enableAudioSharing;
/// Max number of allowed saved audio files on disk. This refers only to audio files.
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedAudioFilesOnDisk;
/// The brand name will be shown as a title on toolbar when there is no active conversation.
@property (nonatomic, copy) NSString * _Nonnull brandName;
/// Color for the entire view background.
@property (nonatomic, strong) UIColor * _Nonnull conversationBackgroundColor;
/// Custom font name for conversation feed. This font will affect all messages, timestamp and separators.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameConversationFeed;
/// Custom font name for all non conversation feed controls. Such as: buttons, alerts, banners, menu and external windows.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameNonConversationFeed;
/// Array of images for creating the custom refresh controller. The custom refresh controller will loop the images from the array. It will need two or more images in the array for loop to take effect.
@property (nonatomic, copy) NSArray<UIImage *> * _Nullable customRefreshControllerImagesArray;
/// Custom refresh controller speed animation define the full images loop time
/// The smaller the value the faster the animation.
@property (nonatomic) float customRefreshControllerAnimationSpeed;
/// When not nil, will be used as the conversation portrait background image.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundPortraitImage;
/// When not nil, use this attribute as the conversation portrait background image. When an image is shown, it is recommended to set ‘dateSeparatorBackgroundColor’ config to clear.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundLandscapeImage;
/// Decides the content mode of the conversation background image.
@property (nonatomic) UIViewContentMode conversationBackgroundImageContentMode;
/// Color code for the background of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingBackgroundColor;
/// Color code for the text of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingTextColor;
/// Connection status toast (failed to connect) background color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectBackgroundColor;
/// Connection status toast (failed to connect) text color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectTextColor;
/// Color code for the text of the controller bubble.
@property (nonatomic, strong) UIColor * _Nonnull controllerBubbleTextColor;
/// Amount of conversations to show in advance.
@property (nonatomic) NSUInteger maxPreviousConversationToPresent;
/// Upon SDK initialization, all closed conversation with end date older than X months, will be deleted from the database. Setting 0 will delete all closed conversation.
@property (nonatomic) NSUInteger deleteClosedConversationOlderThanMonths;
/// Maximum number of minutes to send the message.
@property (nonatomic) NSUInteger sendingMessageTimeoutInMinutes;
/// Conversation separator text and line color.
@property (nonatomic, strong) UIColor * _Nonnull conversationSeparatorTextColor;
/// Toggle conversation separator text message when conversation resolved from agent or consumer.
@property (nonatomic) BOOL enableConversationSeparatorTextMessage;
/// Toggle conversation separator line when conversation resolved from agent or consumer.
@property (nonatomic) BOOL enableConversationSeparatorLine;
/// Define the conversation Closed Separator font size.
@property (nonatomic) UIFontTextStyle _Nonnull conversationSeparatorFontSize;
/// Define the conversation Closed label to separator line padding.
@property (nonatomic) float conversationSeparatorBottomPadding;
/// Custom font name for conversation closed separator.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable conversationSeparatorFontName;
/// Define the conversation separator view bottom padding.
@property (nonatomic) float conversationSeparatorViewBottomPadding;
/// Define the conversation Closed Separator Top padding.
@property (nonatomic) float conversationSeparatorTopPadding;
/// Toggle device vibration when a new message from a remote user received.
@property (nonatomic) BOOL enableVibrationOnMessageFromRemoteUser;
/// If true, show agent is typing indicator. In accessibility mode, announce when agent is typing.
/// When false will not show any indication that the agent is typing, and will not announce when agent is typing in accessibility.
@property (nonatomic) BOOL announceAgentTyping;
/// When true, shows agent  is typing indicator in a message bubble. When false, show indicator under Agent label in navigator bar.
/// When announceAgentTyping is false, will not show any “is typing” indicator regardless of current value.
@property (nonatomic) BOOL showAgentTypingInMessageBubble;
/// Enabling this flag, SDK will use regular expression defined in ‘clientOnlyMaskingRegex’ to mask text on the consumer device.  This is client only masking because it is both set and executed within the consumers device. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableClientOnlyMasking;
/// Enabling this flag, SDK will use regular expression defined in ‘realTimeMaskingRegex’ to mask text originated on the consumer device.  This masking is applied to messages both on the consumer device and sent to the agent. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server masked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableRealTimeMasking;
/// Regular expression string applied to the ‘enableClientOnlyMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull clientOnlyMaskingRegex;
/// Regular expression string applied to the ‘enableRealTimeMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull realTimeMaskingRegex;
/// Custom formatting for date string (day, year..), for example: ‘d MMM’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateFormat;
/// Custom formatting for time string (hours, minutes..), for example: ‘hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpTimeFormat;
/// Custom formatting for date and time string, for example: ‘EEEE MM/dd/YY hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateTimeFormat;
/// Color code for date separator title background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTitleBackgroundColor;
/// Color code for date separator text color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTextColor;
/// Line color of the title for the dates separator in the view screen.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorLineBackgroundColor;
/// Color code for date separator background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorBackgroundColor;
/// Define the Date Separator font text style.
@property (nonatomic) UIFontTextStyle _Nonnull dateSeparatorFontSize;
/// Custom font name for Timestamp.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameDateSeparator;
/// Define the Date Separator Top padding.
@property (nonatomic) float dateSeparatorTopPadding;
/// Define the  DateSeparator bottom padding.
@property (nonatomic) float dateSeparatorBottomPadding;
/// Checkmark visibility of the following options (type CheckmarksState):
/// SentOnly - Show checkmarks for only Sent messages.
/// SentAndAccepted - Show checkmarks for only Sent and Accepted messages.
/// All - Show checkmarks for Sent, Accepted and Read messages.
@property (nonatomic) enum CheckmarksState checkmarkVisibility;
/// Color of checkmark indication signs of Read messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkReadColor;
/// Color of checkmark indication signs of Distributed messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkDistributedColor;
/// Color of checkmark indication signs of Sent messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkSentColor;
/// Two options for read indication:
/// If true = Read receipt “text mode”.
/// If false = Read receipt “icon mode”.
@property (nonatomic) BOOL isReadReceiptTextMode;
/// Color of the remote user typing bubbles animation.
@property (nonatomic) BOOL messageStatusNumericTimestampOnly;
/// The show duration of the local notifications view in the SDK.
@property (nonatomic) double notificationShowDurationInSeconds;
/// Enable or disable real time link preview feature when the consumer is typing a url.
@property (nonatomic) BOOL enableRealTimeLinkPreview;
/// Enable or disable link preview feature. If disabled, user will not see site’s link preview or link preview.
@property (nonatomic) BOOL enableLinkPreview;
/// Color code for the background of the link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBackgroundColor;
/// Color code for the title text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewTitleTextColor;
/// Color code for the description text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewDescriptionTextColor;
/// Color code for the description site name link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewSiteNameTextColor;
/// Double number for the outline width of link preview area inside cell.
@property (nonatomic) double linkPreviewBorderWidth;
/// Color code for border color of link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBorderColor;
/// LPUrlPreviewStyle defines the style in which the link prview cells will be shown
/// slim - Small preview space with a small image, a title and a description
/// large - Large preview space with a large image, a title and a description.
@property (nonatomic) enum LPUrlPreviewStyle urlPreviewStyle;
/// The color of the background color of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBackgroundColor;
/// The color of the border of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBorderColor;
/// The width of the border of the main view.
@property (nonatomic) CGFloat urlRealTimePreviewBorderWidth;
/// The color of the title at the top of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewTitleTextColor;
/// The color of the description at the bottom of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewDescriptionTextColor;
/// “urlPreview” will also use non-OG tags to parse urls instead of using only OG tags if useNonOGTagsForLinkPreview is true.
@property (nonatomic) BOOL useNonOGTagsForLinkPreview;
/// The configuration to control our modal presentation styles within the SDK.
/// Default is .fullscreen. Value We support any current UIModalPresentationStyle
/// except “.none” or “.popover”.
/// Finally, we do not allow customization of the presentation of the camera view.
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// The type of effect on the loading view.
@property (nonatomic, strong) UIBlurEffect * _Nonnull loadingViewBlurEffect;
/// The background color of the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewBackgroundColor;
/// The text color for the label on the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewTextColor;
/// The background color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressBackgroundColor;
/// The tint color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressTintColor;
/// Country code - when it is not nil, it will be combined with ‘language’ (”<language>_<country>”, for example: en_US) and used instead of device default locale when formatting date and time.
/// The combined value have to be a part of iOS available Locale identifiers (use Locale.availableIdentifiers to validate). Otherwise, default locale will be used.
/// NOTE: the 24/12 Hours time style also will be affected by using the specific Locale when formatting times.
/// If no value is provided, the SDK will use the country according to the device’s locale.
@property (nonatomic, copy) NSString * _Nullable country;
/// Language that will be used instead of default device language.
/// It’s type is LPLanguage enum that contains all the languages that are supported by MessagingSDK.
/// It will affect following areas:
/// <ol>
///   <li>
///     will be used when getting localized strings
///   </li>
///   <li>
///     will be combined with ‘country’ (“language_country”, for example: en_US) and used instead of default device locale when formatting time and date.
///     If no value is provided, the SDK will use the device’s language.
///   </li>
/// </ol>
@property (nonatomic) enum LPLanguage language;
/// Bool used to allow manual configuration for enabling the SDK to register to LP Pusher service. Requires user logout to change current configuration. Default is set to true.
@property (nonatomic) BOOL enableLpPusherService;
/// Background color of navigation bar in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationBackgroundColor;
/// Navigation title color in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationTitleColor;
/// Status bar style in conversation screen.
@property (nonatomic) UIStatusBarStyle conversationStatusBarStyle;
/// LivePerson Navigation Bar Left Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarLeftItemImageButton;
/// LivePerson Navigation Bar Right Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarRightItemImageButton;
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL fileSharingFromAgent;
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL fileSharingFromConsumer;
/// Max number of allowed saved files on disk. This refers only to full photo files.
/// NOTE: The validation of allowed max number of files will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedFilesOnDisk;
/// Max number of allowed saved documents on disk. This refers only to document files
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedDocumentsOnDisk;
/// Photosharing menu background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuBackgroundColor;
/// Photosharing menu buttons background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsBackgroundColor;
/// Photosharing menu buttons tint color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTintColor;
/// Photosharing menu buttons text color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTextColor;
/// Camera button color in enabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonEnabledColor;
/// Camera button color in disabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonDisabledColor;
/// File Cell Loader fill color.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderFillColor;
/// Color of the loader progress line.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingProgressColor;
/// Color of the loader progress line background.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingBackgroundColor;
/// Photo sharing open menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingOpenMenuImageButton;
/// Photo sharing close menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingCloseMenuImageButton;
/// Custom Camera image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuCameraImage;
/// Custom Library image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuLibraryImage;
/// Custom file image in the file Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable fileSharingMenuFileImage;
/// Image for custom the thumbnail of unsupported files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingUniversalFileThumbnailimage;
/// Image for custom the thumbnail of PDF files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPDFFileThumbnailimage;
/// Image for custom the thumbnail of PPTX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPPTXFileThumbnailimage;
/// Image for custom the thumbnail of DOCX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingDOCXFileThumbnailimage;
/// Image for custom the thumbnail of XLSX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingXLSXFileThumbnailimage;
/// Color code for the empty state label.
@property (nonatomic, strong) UIColor * _Nonnull conversationEmptyStateTextColor;
/// Tint color for the state of files received from agents.
@property (nonatomic, strong) UIColor * _Nonnull remoteFileStateTint;
/// Tint color for the state of files send by user.
@property (nonatomic, strong) UIColor * _Nonnull userFileStateTint;
/// Tint color for the state of photos send by user.
@property (nonatomic, strong) UIColor * _Nonnull userPhotoStateTint;
/// Distance between the bottom and top edges of the button to the bottom and top edges of the text.
@property (nonatomic) CGFloat quickReplyButtonVerticalPadding;
/// Distance between the right and left edges of the button to the right and left edges of the text.
@property (nonatomic) CGFloat quickReplyButtonHorizontalPadding;
/// Vertical margin between quick reply buttons.
@property (nonatomic) CGFloat quickReplyVerticalMargin;
/// Horizontal padding between quick reply buttons.
@property (nonatomic) CGFloat quickReplyHorizontalMargin;
/// Border size of Quick Reply buttons.
@property (nonatomic) CGFloat quickReplyButtonBorderWidth;
/// Conversation Scroll configurations for scenarios:
/// <ul>
///   <li>
///     app navigation
///   </li>
///   <li>
///     background to foreground
///   </li>
///   <li>
///     scroll to bottom button pressed
///   </li>
///   <li>
///     push notification tapped
///   </li>
/// </ul>
@property (nonatomic, strong) LPConversationScrollConfiguration * _Nonnull conversationScrollConfiguration;
/// Back button color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBackButtonColor;
/// The style (UIStatusBarStyle) for the secure form screen.
@property (nonatomic) UIStatusBarStyle secureFormUIStatusBarStyle;
/// Background color of navigation bar in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationBackgroundColor;
/// Navigation title color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationTitleColor;
/// Secure form bubble background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBackgroundColor;
/// Secure form bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBorderColor;
/// Secure form bubble border width in pixels.
@property (nonatomic) double secureFormBubbleBorderWidth;
/// Secure form bubble form title color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleTitleColor;
/// Secure form bubble form description color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleDescriptionColor;
/// Secure form bubble fill form button text color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonTextColor;
/// Secure form bubble fill form button background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonBackgroundColor;
/// Secure form bubble form image tint color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFormImageTintColor;
/// Secure form custom font name to be used while user filling the secure form. If not set, the default font will be used.
@property (nonatomic, copy) NSString * _Nonnull secureFormCustomFontName;
/// Secure form flag to hiding the secure form logo in the top of the form.
@property (nonatomic) BOOL secureFormHideLogo;
/// Secure form loading indicator color while loading form before opening.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleLoadingIndicatorColor;
/// Send button color in disabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonDisabledColor;
/// Send button color in enabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonEnabledColor;
/// Send button Image in the conversation screen. The custom image changes only if <code>isSendMessageButtonInTextMode</code> = <em>false</em>.
/// The image must conforms Apple’s <a href="https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/custom-icons/">Custom Icon guidelines</a>.
/// NOTE: this property gets its tintColor from <code>sendButtonDisabledColor</code> or <code>sendButtonEnabledColor</code> - depending on state
@property (nonatomic, strong) UIImage * _Nullable sendButtonImage;
/// Two options for the send message button mode:
/// <ol>
///   <li>
///     <em>text mode</em> (taken from localized resources)
///   </li>
///   <li>
///     <em>icon mode</em>.
///   </li>
/// </ol>
@property (nonatomic) BOOL isSendMessageButtonInTextMode;
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStructuredContent;
/// Structured Content bubble border width in pixels.
@property (nonatomic) double structuredContentBubbleBorderWidth;
/// Structured Content bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull structuredContentBubbleBorderColor;
/// Structured Content bubble top left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopLeftCornerRadius;
/// Structured Content bubble top right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopRightCornerRadius;
/// Structured Content bubble bottom left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomLeftCornerRadius;
/// Structured Content bubble bottom right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomRightCornerRadius;
/// Structured Content Latitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLongitudeDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLatitudeDeltaDeltaSpan;
/// Structured Content Longitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLatitudeDeltaDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLongitudeDeltaSpan;
/// Corner radius for submit button.
@property (nonatomic) double csatSubmitButtonCornerRadius;
/// Corner radius for (Yes/No) buttons.
@property (nonatomic) double csatYesNoButtonsCornerRadius;
/// Background color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonBackgroundColor;
/// Text color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonTextColor;
/// Background Color of the rating buttons.
@property (nonatomic, strong) UIColor * _Nonnull csatRatingButtonSelectedColor;
/// Color for the resolution confirmation buttons (Yes/No) when selected
@property (nonatomic, strong) UIColor * _Nonnull csatResolutionButtonSelectedColor;
/// Titles text colors for all labels.
@property (nonatomic, strong) UIColor * _Nonnull csatAllTitlesTextColor;
/// Hides the survey (Yes/No) question.
/// To show CSAT resolution, ‘csatAgentViewHidden’ must be set to True
@property (nonatomic) BOOL csatResolutionHidden;
/// Hides the view of agent avatar and name.
@property (nonatomic) BOOL csatAgentViewHidden;
/// Hides the Thanks You screen after tapping ‘Submit’ button.
/// <ol>
///   <li>
///     If true, CSAT view will disappear immediately after tapping ‘Submit’.
///   </li>
///   <li>
///     If false, Thank You screen will appear for 2 seconds after tapping ‘Submit’ and then all the CSAT view will disappear.
///   </li>
/// </ol>
@property (nonatomic) BOOL csatThankYouScreenHidden;
/// Background color of navigation bar in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationBackgroundColor;
/// Text color of the title in the survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationTitleColor;
/// Skip button color in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatSkipButtonColor;
/// The style (UIStatusBarStyle) for the survey screen.
@property (nonatomic) UIStatusBarStyle csatUIStatusBarStyle;
/// Hides the whole survey view and disables it.
@property (nonatomic) BOOL csatShowSurveyView;
/// Expiration of CSAT in minutes from the moment the conversation was ended. If Survey exceeded the expiration, it will not be presented to the user.
@property (nonatomic) NSUInteger csatSurveyExpirationInMinutes;
/// Color code for the text of the system messages.
@property (nonatomic, strong) UIColor * _Nonnull systemBubbleTextColor;
/// When set to <em>true</em>, the TTR notifications show with off hours.  When the auto messages feature is enabled, TTR notifications do not display when the auto messages featuer is enabled, regardless of the value set for this attribute.
@property (nonatomic) BOOL ttrShouldShow;
/// Enable or disable shift toaster (’An agent will respond…’).
@property (nonatomic) BOOL ttrShowShiftBanner;
/// Number of seconds before the first Time to Respond (TTR) notification appears.
@property (nonatomic) double ttrFirstTimeDelay;
/// When set to <em>true</em>, the timestamp of the TTR notification displays.
/// Otherwise, the “An agent will respond shortly” message displays.
@property (nonatomic) BOOL ttrShouldShowTimestamp;
/// Controls the TTR frequency, for example, don’t show the TTR more than once in 8 seconds.
@property (nonatomic) NSUInteger ttrShowFrequencyInSeconds;
/// Enable or disable the off-hours toaster.
@property (nonatomic) BOOL showOffHoursBanner;
/// Background color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerBackgroundColor;
/// Text color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerTextColor;
/// Off Hours banner timezone based on NSTimeZone names. If sending empty string, the local timezone will be used (Server sends UTC time)
@property (nonatomic, copy) NSString * _Nonnull offHoursTimeZoneName;
/// Enable toast notifications such as offline and TTR notifications.
@property (nonatomic) BOOL toastNotificationsEnabled;
/// Scroll to bottom button background color of the whole button.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBackgroundColor;
/// Scroll to bottom button text color of the last unread message preview.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonMessagePreviewTextColor;
/// Scroll to bottom button unread message badge background color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeBackgroundColor;
/// Scroll to bottom button unread message badge text color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeTextColor;
/// Scroll to bottom button arrow tint color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonArrowColor;
/// Unread Messages divider background color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerBackgroundColor;
/// Unread Messages divider text color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerTextColor;
/// Toggle the mode of the scroll to bottom button.
@property (nonatomic) BOOL scrollToBottomButtonEnabled;
/// Toggle the mode of the scroll to bottom unread message text preview.
@property (nonatomic) BOOL scrollToBottomButtonMessagePreviewEnabled;
/// Toggle the mode of the Unread Messages divider.
/// important:
/// As of SDK 5.1 & above, This configuration no longer impacts the scroll of the conversation or the scroll to bottom button (message preview or count indicator)
/// note:
/// Behavior for SDK version 5.0:
/// If disabled, the <code>scroll to bottom</code> button will scroll to bottom of the conversation but the count indicator and message preview  will not be displayed. Regardless of <em>unreadMessagesDividerEnabled</em> value, the conversation screen will always scrolls to the last position where the user left off.
@property (nonatomic) BOOL unreadMessagesDividerEnabled;
/// Define the corners radius of the unread messages.
@property (nonatomic) float unreadMessagesCornersRadius;
/// Define the top left and bottom left corners radius.
@property (nonatomic) float scrollToBottomButtonCornerRadius;
/// Define the scroll to bottom badge corners radius.
@property (nonatomic) float scrollToBottomButtonBadgeCornerRadius;
/// Background color of the remote user’s avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarBackgroundColor;
/// Define the remote avatar Leading padding  (left edge to avatar).
@property (nonatomic) float remoteUserAvatarLeadingPadding;
/// Define the remote avatar Trailing padding (Avatar to bubble).
@property (nonatomic) float remoteUserAvatarTrailingPadding;
/// Icon color of default remoteUser avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconColor;
/// Default Avatar image of the remote user.
/// When assigned, this image will disable <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code> configurations.
/// If remote user has an avatar image in his profile, this attribute will be ignored.
@property (nonatomic, strong) UIImage * _Nullable remoteUserDefaultAvatarImage;
/// Define the remote avatar icon border width.
@property (nonatomic) CGFloat remoteUserAvatarIconBorderWidth;
/// Define the remote avatar icon border color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconBorderColor;
/// Default avatar image for Brand.
/// If setting nil - default avatar image will be used with <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code>
@property (nonatomic, strong) UIImage * _Nullable brandAvatarImage;
/// Background color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarBackgroundColor;
/// Icon color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarIconColor;
/// User Input TextView container background color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewContainerBackgroundColor;
/// User Input TextView corner radius.
@property (nonatomic) double inputTextViewCornerRadius;
/// Input TextView top border color default clear color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewTopBorderColor;
/// Color code for the background of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBackgroundColor;
/// Color code for the outline color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBorderColor;
/// Color code for links in the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLinkColor;
/// Color code for the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double remoteUserBubbleBorderWidth;
/// Color code for the timestamp of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTimestampColor;
/// Color of the typing indicator for when the remote user is typing.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserTypingTintColor;
/// Color of the remote user’s bubble overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLongPressOverlayColor;
/// Alpha of the remote user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true. Default value is LPColor.lpLabel.
@property (nonatomic) float remoteUserBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually. Default value is 0.3.
@property (nonatomic) float remoteUserBubbleTopLeftCornerRadius;
/// Top right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomRightCornerRadius;
/// Color code for the background of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBackgroundColor;
/// Color code for the outline of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBorderColor;
/// Color code for links in the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLinkColor;
/// Color code for the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double userBubbleBorderWidth;
/// Color code for the timestamp of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTimestampColor;
/// Color code for the send status text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleSendStatusTextColor;
/// Color code for the error view text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorTextColor;
/// Color code for the error view border of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorBorderColor;
/// Enable bubbles overlay when user performing a long press gesture on messaging bubbles.
@property (nonatomic) BOOL enableBubblesOverlayOnLongPress;
/// Color of the user bubble’s overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLongPressOverlayColor;
/// Alpha of the user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.  Default value is Default value is 0.3.
@property (nonatomic) float userBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopLeftCornerRadius;
/// Top right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomRightCornerRadius;
/// Regular expression for email hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubbleEmailLinksRegex;
/// Regular expression for url hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubbleUrlLinksRegex;
/// Regular expression for phone hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubblePhoneLinksRegex;
/// Define the bubble Top Padding.
@property (nonatomic) float bubbleTopPadding;
/// Define the bubble Bottom Padding.
@property (nonatomic) float bubbleBottomPadding;
/// Define the bubble Leading Padding.
@property (nonatomic) float bubbleLeadingPadding;
/// Define the bubble Trailing Padding.
@property (nonatomic) float bubbleTrailingPadding;
/// Define the bubble Timestamp Bottom Padding.
@property (nonatomic) float bubbleTimestampBottomPadding;
/// Define the bubble Timestamp Top Padding.
@property (nonatomic) float bubbleTimestampTopPadding;
/// When true, user and remote user messages containing one or two emojies will be enlarged in chat. Messages with one emoji will be the largest, two emojis will be large, and 3 or more will be displayed as normal text.
@property (nonatomic) BOOL enableEnlargeEmojies;
/// Custom button icon image that displays on the navigation bar.
/// NOTE: this property gets its tintColor from <code>conversationNavigationTitleColor</code>
/// When pressed, the <a href="mobile-app-messaging-sdk-for-ios-sdk-apis-callbacks-index.html#lpmessagingsdkcustombuttontapped">LPMessagingSDKCustomButtonTapped</a> callback gets invoked.
@property (nonatomic, strong) UIImage * _Nullable customButtonImage;
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL enableFileSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromAgent");
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL enablePhotoSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromConsumer");
/// Should display status bar of the secure form screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL secureFormUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use secureFormUIStatusBarStyle");
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStrucutredContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use enableStructuredContent instead");
/// Should display status bar of the survey screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL csatUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use csatUIStatusBarStyle instead");
/// TTR - Time To Respond. Enable presentation of ‘Urgent’ button in the TTR notification
/// DEPRECATED - Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu.
@property (nonatomic) BOOL showUrgentButtonInTTRNotification SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu");
/// Opacity level of TTR  banner background (values: 0.0 - 1.0).
@property (nonatomic) double ttrBannerOpacityAlpha SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="instead of using opacity alpha, use supported light/dark colors on 'ttrBannerBackgroundColor' and 'ttrBannerTextColor'");
/// Custom button image. This will be displayed on the navigation bar.
@property (nonatomic, copy) NSString * _Nonnull customButtonIconName SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonImage instead");
/// DEPRECATED - use customButtonAccessibilityDescription key in Localization languages files instead
/// Accessibility voiceover string for the custom button.
@property (nonatomic, copy) NSString * _Nonnull customButtonDescription SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonAccessibilityDescription key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextDistributed SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextDistributed key in Localization languages files instead");
/// DEPRECATED - use readReceiptTextSent key in Localization languages files instead
/// Text for sent indication.
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextSent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextSent key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextRead SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextRead key in Localization languages files instead");
/// User text underline color.
@property (nonatomic, strong) UIColor * _Nonnull editTextUnderlineColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="underline is not used any more. To change background color of TextView container use inputTextViewContainerBackgroundColor");
/// DEPRECATED - Color of checkmark indication signs of Read messages
/// Use checkmarkReadColor instead.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use checkmarkReadColor instead");
/// Allow URL Protocol sniffing via the use of HTTP request with URLSession shared instance. NOTE: When setting this configuration TRUE - Cert Pinning option will be disabled!
@property (nonatomic) BOOL allowURLProtocolSniffing;
/// LivePerson enviornment account is set to .production, .alpha, or .qa
@property (nonatomic) enum LPAccountEnviroment accountEnvironment;
/// CSDS Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull csdsDomain;
/// lpTag Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull lpTagDomain;
/// The maximum height of the input text field in pixels. Default is 100 pixels.
/// Cannot be smaller than 50 pixels.
@property (nonatomic) CGFloat inputTextViewMaxHeight;
/// LPConfig is a singletone class,
/// When defaultConfiguration is called it initializes the LPConfig
/// and returns its object with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LPConfig * _Nonnull defaultConfiguration;)
+ (LPConfig * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultConfiguration:(LPConfig * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Calling this will reset the configurations to default values… not all values will be updated based on how the respective managers are instantiated.
- (void)resetToDefaultConfiguration;
/// Fallback in case setValueForKey failed. This method is necessary as the host app might call a deprecated value which will cause an NSUnknownKeyException if this method is not implemented.
/// \param value The value of the unknown key
///
/// \param key The key which wasn’t found in LPConfig
///
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
/// Prints all the configurations keys of the SDK.
+ (void)printAllConfigurations;
@end

@class LPUserEntity;

SWIFT_CLASS("_TtC7LPInfra12LPConnection")
@interface LPConnection : NSObject
@property (nonatomic, strong) LPUserEntity * _Null_unspecified consumer SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.consumer' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<LPConversationEntity *> * _Null_unspecified conversations SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.conversations' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)initWithConsumer:(LPUserEntity * _Nonnull)consumer conversations:(NSArray<LPConversationEntity *> * _Nonnull)conversations OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPConnection.init(consumer:conversations:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Return last conversation from connection conversations
/// \param connection Connection from which we want to get last (most new) conversation
///
///
/// returns:
/// Conversation or nil
@property (nonatomic, readonly, strong) LPConversationEntity * _Nullable lastConversation SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.lastConversation' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSDate * _Nullable effectiveTtr SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.effectiveTtr' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LPConnection (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) NSInteger numberOfUnreadMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.numberOfUnreadMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get title label with the following priorities:
/// Fullname > Phone Number > Consumer ID
@property (nonatomic, readonly, copy) NSString * _Nonnull titleLabel SWIFT_DEPRECATED_OBJC("Swift property 'LPConnection.titleLabel' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

typedef SWIFT_ENUM(NSInteger, LPConversationCloseReason, closed) {
  LPConversationCloseReasonAgent = 0,
  LPConversationCloseReasonConsumer = 1,
  LPConversationCloseReasonSystem = 2,
};

@class TTRModel;
@class NSOrderedSet;
@class NSMutableSet;

SWIFT_CLASS("_TtC7LPInfra20LPConversationEntity")
@interface LPConversationEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSString * _Nonnull ttrTypeRaw;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, strong) TTRModel * _Nullable ttrModel;
@property (nonatomic, strong) LPBrandEntity * _Nonnull ownerBrand;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSSet * _Nonnull conversationDialogs;
@property (nonatomic, readonly, strong) NSOrderedSet * _Nonnull conversationMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.conversationMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL resolved SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.resolved' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) NSMutableSet * _Nonnull currentlyAcceptedSequences SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.currentlyAcceptedSequences' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL isHistoryFilterEnable SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isHistoryFilterEnable' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL presented SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.presented' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull logDescription SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.logDescription' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class LPMessageEntity;

@interface LPConversationEntity (SWIFT_EXTENSION(LPInfra))
- (void)addConversationDialogsObject:(LPDialogEntity * _Nonnull)value;
- (void)removeConversationDialogsObject:(LPDialogEntity * _Nonnull)value;
- (void)addConversationDialogs:(NSSet * _Nonnull)values;
- (void)removeConversationDialogs:(NSSet * _Nonnull)values;
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull sortedMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.sortedMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull unreadMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.unreadMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, strong) LPMessageEntity * _Nullable lastMessageObj SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.lastMessageObj' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable lastMessageOriginator SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.lastMessageOriginator' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull relatedSocketID SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.relatedSocketID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)isActivityInIdle SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.isActivityInIdle()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (NSArray<LPMessageEntity *> * _Nonnull)getMessagesPage:(NSInteger)from pageSize:(NSInteger)pageSize SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getMessagesPage(_:pageSize:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)isCurrentlyUrgent SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.isCurrentlyUrgent()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isResolvedAutomatically SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isResolvedAutomatically' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.resolve()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve:(NSString * _Nonnull)closeReason SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.resolve(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Takes pending messages from a conversation that is about to be closed and pass them to a new converation to be sent at
/// \param resolvingConversation The conversation that is about to be closed
///
- (void)passPendingMessagesToNewConversationWithResolvingConversation:(LPConversationEntity * _Nonnull)resolvingConversation SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.passPendingMessagesToNewConversation(resolvingConversation:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// TODO:
/// Move this function to UITimestampsFormatter once the new system messages will be implemented and the timestamp will not be saved to DB.
- (NSString * _Nonnull)getResolveDateString:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getResolveDateString(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (LPConversationEntity * _Nonnull)createNewConversation:(LPBrandEntity * _Nonnull)brand SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.createNewConversation(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Determines if CSAT should be displayed for the conversation based on
/// Configuation, agent details and previous CSAT submission
@property (nonatomic, readonly) BOOL canShowCSAT SWIFT_DEPRECATED_OBJC("Swift property 'LPConversationEntity.canShowCSAT' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Update existing effectiveTTR for conversation
/// This method will update the effectiveTTR with calculation of the current time and saved params from the last ttr notification which recevied
/// in the last exConversationChangeNotification.
/// In case manualETTR is set - effectiveTTR will be equal
/// \param reset reset effectiveTTR which will be applied only if there’s no manualETTR. Reset usuall should be sent upon agent’s messages
///
- (void)updateTTRModelWithReset:(BOOL)reset SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.updateTTRModel(reset:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return all open dialog for conversation
///
/// returns:
/// open dialog array
- (NSArray<LPDialogEntity *> * _Nonnull)getOpenDialogs SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getOpenDialogs()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the first object (first phase in multi dialog we will need to support only one open dialog for conversation)
///
/// returns:
/// Dialog
- (LPDialogEntity * _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getOpenDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the latest created dialog for conversation sort by  dialog.creationDate
///
/// returns:
/// latest dialog
- (LPDialogEntity * _Nullable)getLatestDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getLatestDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// return the latest created dialog for conversation sort by  dialog.creationDate
///
/// returns:
/// latest dialog
- (LPDialogEntity * _Nullable)getPendingDialog SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPConversationEntity.getPendingDialog()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

enum LPConversationsHistoryStateToDisplay : NSInteger;
enum LPConversationHistoryMaxDaysDateType : NSInteger;

SWIFT_CLASS("_TtC7LPInfra33LPConversationHistoryControlParam")
@interface LPConversationHistoryControlParam : NSObject
@property (nonatomic) NSInteger historyConversationsMaxDays;
@property (nonatomic) enum LPConversationsHistoryStateToDisplay historyConversationsStateToDisplay;
@property (nonatomic) enum LPConversationHistoryMaxDaysDateType historyConversationMaxDaysType;
@property (nonatomic, readonly) BOOL isEnable;
- (nonnull instancetype)initWithHistoryConversationsStateToDisplay:(enum LPConversationsHistoryStateToDisplay)historyConversationsStateToDisplay historyConversationsMaxDays:(NSInteger)historyConversationsMaxDays historyMaxDaysType:(enum LPConversationHistoryMaxDaysDateType)historyMaxDaysType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control if filter the max dayes by conversation start date or by conversation close date
typedef SWIFT_ENUM(NSInteger, LPConversationHistoryMaxDaysDateType, closed) {
  LPConversationHistoryMaxDaysDateTypeStartConversationDate = 0,
  LPConversationHistoryMaxDaysDateTypeEndConversationDate = 1,
};

enum ScrollPosition : NSInteger;

SWIFT_CLASS("_TtC7LPInfra33LPConversationScrollConfiguration")
@interface LPConversationScrollConfiguration : NSObject
/// scenario when the SDK conversation is shown
@property (nonatomic) enum ScrollPosition showConversation;
/// scenario when the application goes from background to foreground state
@property (nonatomic) enum ScrollPosition backgroundToForeground;
/// scenario when the SDK scroll to bottom button is pressed
@property (nonatomic) enum ScrollPosition scrollToBottomButtonPressed;
/// scenario when a push notification is tapped.
/// note:
/// This requires the call <code>LPMessagingSDK.instance.setPushNotificationTapped()</code> immediately after it is determine that a push notification was tapped.
@property (nonatomic) enum ScrollPosition pushNotificationTapped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScrollPosition, closed) {
/// scroll to the bottom of the conversation
  ScrollPositionBottom = 0,
/// scroll to the last known position. If none found, scrolls to bottom of conversation.
  ScrollPositionLastPosition = 1,
/// scroll to the first unread message. If none found, scrolls to bottom of conversation.
  ScrollPositionFirstUnreadMessage = 2,
};

@class UIViewController;
@class LPWelcomeMessage;

/// <h1>LPConversationViewParams</h1>
/// Represents an object to determine on conversation mode, filter and container. Such as Container or Window or if ViewOnly.
SWIFT_CLASS("_TtC7LPInfra24LPConversationViewParams")
@interface LPConversationViewParams : NSObject
@property (nonatomic, strong) id <ConversationParamProtocol> _Nonnull conversationQuery;
@property (nonatomic, strong) UIViewController * _Nullable containerViewController;
@property (nonatomic, readonly) BOOL isViewOnly;
@property (nonatomic, readonly, strong) LPConversationHistoryControlParam * _Nonnull conversationHistoryControlParam;
@property (nonatomic, strong) LPWelcomeMessage * _Nonnull welcomeMessage;
/// <h1>LPConversationViewParams</h1>
/// \param conversationQuery Type ConversationParamProtocol which ties this object to the brand.
///
/// \param containerViewController Type UIViewController used as a reference if embedding the view.
///
/// \param isViewOnly Bool is the request pertaining to obtaining a single view (true) to embed or a whole view stack (false).
///
/// \param conversationHistoryControlParam LPConversationHistoryControlParam object related to displaying history within a conversation.
///
/// \param welcomeMessage LPWelcome object related to welcome message at the start of the conversation.
///
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam welcomeMessage:(LPWelcomeMessage * _Nonnull)welcomeMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,deprecated=12.0.0,obsoleted=14.0.0,message="Use public init(conversationQuery: ConversationParamProtocol, containerViewController: UIViewController? = nil, isViewOnly: Bool = false, conversationHistoryControlParam: LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .none), welcomeMessage: LPWelcomeMessage = LPWelcomeMessage(message: nil)) instead");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control what kind of conversation to show
typedef SWIFT_ENUM(NSInteger, LPConversationsHistoryStateToDisplay, closed) {
  LPConversationsHistoryStateToDisplayOpen = 0,
  LPConversationsHistoryStateToDisplayClose = 1,
  LPConversationsHistoryStateToDisplayNone = 2,
};


SWIFT_CLASS("_TtC7LPInfra19LPCustomBoardEntity")
@interface LPCustomBoardEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, strong) NSOrderedSet * _Nonnull linkPreviewItems;
@property (nonatomic, strong) LPMessageEntity * _Nonnull ownerMessage;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class NSError;

SWIFT_PROTOCOL("_TtP7LPInfra24LPDataManagerSDKDelegate_")
@protocol LPDataManagerSDKDelegate
- (void)LPMessagingSDKDataEncryptionFailed:(NSError * _Nonnull)error;
@end

@class NSNumber;

SWIFT_CLASS("_TtC7LPInfra14LPDialogEntity")
@interface LPDialogEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable assignedAgentId;
@property (nonatomic, copy) NSString * _Nullable channelType;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nullable dialogType;
@property (nonatomic, strong) NSNumber * _Nonnull lastReceivedSequence;
@property (nonatomic) BOOL resolved;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, strong) LPConversationEntity * _Nonnull ownerConversation;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSOrderedSet * _Nonnull dialogMessages;
@property (nonatomic, readonly, strong) LPMessageEntity * _Nullable lastMessageObj SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.lastMessageObj' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSArray<LPMessageEntity *> * _Nonnull sortedMessages SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.sortedMessages' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isClose SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.isClose' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull logDescription SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.logDescription' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPDialogEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPDialogEntity.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)resolve:(NSString * _Nonnull)closeReason SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.resolve(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// create dialog for the welcome message
/// in this dialog there is no uid
/// \param conversation owner conversation
///
+ (LPDialogEntity * _Nonnull)createDialogFrom:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.createDialog(from:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Sequence number is received from the QueryMessages or from OnlineEvent messages. Sequence number is increased by the server for both new message and accept status (ACCEPT/READ).
/// If the sequence number is following to what we have, set it as the last one
/// If not, save it in a temporary array in order to set it as the last one in the future
/// After words, it goes through self.currentlyAcceptedSequences and sets each object as the last one if it is following to the current last one (and removes from the temporary array)
- (void)acceptSequence:(NSInteger)seq SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.acceptSequence(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// TODO:
/// Move this function to UITimestampsFormatter once the new system messages will be implemented and the timestamp will not be saved to DB.
- (NSString * _Nonnull)getResolveDateString:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPDialogEntity.getResolveDateString(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

@class NSDate;

SWIFT_CLASS("_TtC7LPInfra12LPFileEntity")
@interface LPFileEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable fileExtension;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable relativeFilePath;
@property (nonatomic, copy) NSString * _Nullable relativeThumbnailPath;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, strong) NSDate * _Nullable creationDate;
@property (nonatomic, strong) LPMessageEntity * _Nullable ownerMessage;
@property (nonatomic, copy) NSString * _Nullable swiftRelativePath;
@property (nonatomic, strong) LPFileMetaDataContainer * _Nullable metaDataContainer;
@property (nonatomic, strong) UIImage * _Nullable thumbnailImage;
@property (nonatomic, copy) void (^ _Nullable completion)(void);
@property (nonatomic, copy) void (^ _Nullable failure)(NSError * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable preUpload)(void);
@property (nonatomic, copy) void (^ _Nullable preDownload)(void);
@property (nonatomic, copy) void (^ _Nullable uploading)(double);
@property (nonatomic) CGFloat uploadPercentage;
@property (nonatomic, copy) void (^ _Nullable downloading)(double);
@property (nonatomic) CGFloat downloadPercentage;
@property (nonatomic, copy) void (^ _Nullable synced)(void);
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFileEntity (SWIFT_EXTENSION(LPInfra))
/// Determines if the file is currently being tranffering (download/upload)
@property (nonatomic, readonly) BOOL isTransferring;
/// Determine if the file is audio file
- (BOOL)isAudioFile SWIFT_WARN_UNUSED_RESULT;
/// Clears blocks handlers
- (void)clearFileBlocks;
@end



SWIFT_CLASS("_TtC7LPInfra12LPFormEntity")
@interface LPFormEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nullable formID;
@property (nonatomic, copy) NSString * _Nonnull invitationID;
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable submissionID;
@property (nonatomic, strong) NSOrderedSet * _Nonnull ownerMessages;
@property (nonatomic, copy) NSString * _Nullable readOTK;
@property (nonatomic, copy) NSString * _Nullable writeOTK;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPFormEntity (SWIFT_EXTENSION(LPInfra))
/// Create new File instance with UID
+ (LPFormEntity * _Nonnull)createNewFormWithFormID:(NSString * _Nullable)formID invitationID:(NSString * _Nonnull)invitationID title:(NSString * _Nullable)title ownerMessage:(LPMessageEntity * _Nonnull)ownerMessage SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) LPDialogEntity * _Nullable ownerDialog;
@end

@class LPWebSocket;
@class UploadInfo;
@class LPUser;

SWIFT_CLASS("_TtC7LPInfra13LPInfraFacade")
@interface LPInfraFacade : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BOOL)initializeInfra SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Brand query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationBrandQuery:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Consumer and Skill query type.
+ (id <ConversationParamProtocol> _Nonnull)getConversationConsumerQuery:(NSString * _Nullable)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken SWIFT_WARN_UNUSED_RESULT;
/// Get current WebSocket (LPWebSocket) for brand if exists
+ (LPWebSocket * _Nullable)getSocket:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// Open and reconnect each WebSocket in the web sockets map.
+ (void)openAllSockets;
/// Open and reconnect single WebSocket and assign to web sockets map.
/// This method creates new WebSocket instances based on the previous ones because we can’t reuse WebSocket instances.
+ (void)openSocket:(LPWebSocket * _Nonnull)webSocket;
/// Close all sockets in the web sockets map
/// We DON’T remove the web sockets from the map in order to be able to re-create web socket from a previous one
+ (void)closeAllSockets;
/// Remove all sockets from web sockets map and clear their open requests
+ (void)removeSockets;
+ (void)saveData:(NSManagedObjectContext * _Nullable)givenContext;
+ (void)saveContext;
+ (NSManagedObjectContext * _Nullable)getContext SWIFT_WARN_UNUSED_RESULT;
+ (void)saveDataWithGetContextFrom:(NSManagedObject * _Nullable)obj;
+ (BOOL)deleteManagedObject:(NSManagedObject * _Nonnull)object context:(NSManagedObjectContext * _Nullable)givenContext SWIFT_WARN_UNUSED_RESULT;
+ (void)resetDatabaseWithCompletion:(void (^ _Nonnull)(BOOL))completion;
/// Clear all singleton managers with their properties from memory.
/// This method will release any data objects and data structures.
+ (void)clearManagers;
/// Create file from UploadInfo and return when ready if succeeded, invoke error otherwise.
/// Using GeneratePhotoOperation
+ (void)prepareFileWithUploadInfo:(UploadInfo * _Nonnull)uploadInfo fileReadyCompletion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))fileReadyCompletion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Upload File to Swift server and AMS using file operation
+ (void)uploadFileWithFile:(LPFileEntity * _Nonnull)file uploadRelativePath:(NSString * _Nonnull)uploadRelativePath tempURLSig:(NSString * _Nonnull)tempURLSig tempURLExpiry:(NSString * _Nonnull)tempURLExpiry completion:(void (^ _Nonnull)(LPFileEntity * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full photo image from disk using file path.
/// If file path is invalid, an error will be invoked.
/// If file does not exist on disk, function will return nil for image.
+ (void)getPhotoFromFileWithFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Ensure file has been written to disk.
/// If file path is invalid, an error will be invoked.
/// If file does not exist on disk, function will return nil for fileEntity.
+ (void)getFilefromFileEntityWithFileEntity:(LPFileEntity * _Nonnull)fileEntity completion:(void (^ _Nonnull)(LPFileEntity * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get full thumbnail image from disk using file path.
/// If image fails to created or file path is invalid, an error will be invoked.
+ (void)getThumbnailFromFileWithFile:(LPFileEntity * _Nonnull)file completion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get thumbnail for the files in file sharing from custom configurations.
/// If custom configurations is nil, provide the thumbnail based on the files UTI
/// \param file local file to get the thumbnail from
///
+ (UIImage * _Nonnull)getThumbnailForFileTypeWithFile:(LPFileEntity * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
/// Returns a base64 string representation of the file’s thumbnail
+ (void)getBase64ThumbnailStringWithFile:(LPFileEntity * _Nonnull)file completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
///
+ (void)getBase64BlankThumbnailStringWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nonnull))completion failure:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Deletes file and thumbnail from disk
+ (void)deleteFileFromDiskWithFile:(LPFileEntity * _Nonnull)file;
/// Deleting the main directory with all files in it.
/// This method is performed in background thread
+ (void)deleteAllFilesFromDisk;
+ (void)deleteAllFilesFromDiskWithCompletion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method delete number of files that exceeded maxNumberOfSavedFilesOnDisk from configuration.
/// The files will be get deleted accoring to FIFO methodology.
/// This method is performed in background thread and only of the photo sharing feature is enabled
+ (void)handleMaxNumberOfSavedFilesOnDisk;
/// Get root path where all SDK files are stored
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull filesDirectoryPath;)
+ (NSString * _Nonnull)filesDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Get temporary folder path for storing temporary files
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull filesTemporaryDirectoryPath;)
+ (NSString * _Nonnull)filesTemporaryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Check if supported image extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isImageExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Check if supported audio extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isAudioExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Check if supported file extension
/// <ul>
///   <li>
///     Return Bool: file extension is supported
///   </li>
/// </ul>
/// \param text file extension type to be checked
///
+ (BOOL)isFileExtension:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Get Brand object for account ID
/// If there is no brand object for the account ID, a new brand will be created in DB
+ (LPBrandEntity * _Nonnull)getOrCreateBrandByAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
/// Set authentication params for brand
+ (void)setAuthenticationParams:(LPAuthenticationParams * _Nullable)params brandId:(NSString * _Nonnull)brandId;
+ (NSArray<NSString *> * _Nonnull)getCacheBrandByAccountIDs SWIFT_WARN_UNUSED_RESULT;
/// Get authentication params for brand
+ (LPAuthenticationParams * _Nullable)authenticationParamsForBrandWithBrandId:(NSString * _Nonnull)brandId SWIFT_WARN_UNUSED_RESULT;
/// Clear a single conversation and its assoicated messages and files.
/// Return TRUE if the conversation and its messages was deleted.
/// Return FALSE if the conversation or one if its messages were failed to delete.
+ (BOOL)clearConversationFromDB:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Delete all closed conversation and their
+ (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery isClearOpenConversation:(BOOL)isClearOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Delete any closed conversations which has close date older than the configured number of months
/// <ul>
///   <li>
///     When a candidate conversation was found - first delete all its messages and when done, delete the conversation
///   </li>
/// </ul>
+ (void)deleteOldConversations;
/// Get all closed conversations
+ (NSArray<LPConversationEntity *> * _Nullable)getAllClosedConversations:(NSDate * _Nullable)olderThanDate SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations from DB sorted by creation date (first object is the latest conversation)
/// If includeQueriedOnly parameter is false, only new conversations or conversations which messages should not be queried, will be returned
+ (NSArray<LPConversationEntity *> * _Nonnull)getConversationsSortedByDate:(id <ConversationParamProtocol> _Nonnull)query conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nullable)conversationHistoryControlParam SWIFT_WARN_UNUSED_RESULT;
/// Get conversation by handlerID from DB.
/// \param handlerID conversation handlerID
///
///
/// returns:
/// If conversation doens’t exist in DB nil will be returned
+ (LPConversationEntity * _Nullable)getConversationByHandlerID:(NSString * _Nonnull)handlerID SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation from DB
///
/// returns:
/// an open conversation if exists - if none, returns nil
+ (LPConversationEntity * _Nullable)getOpenConveration SWIFT_WARN_UNUSED_RESULT;
/// Get array of consumer ids that are related to messages that contain a certain string
/// This method iterates all messages in the database and returns the consumer id of those containing the wanted string
/// \param text The string that the messages should contain
///
///
/// returns:
/// Array of consumer ids or nil if none found
+ (NSArray<NSString *> * _Nullable)getConsumerIdsRelatedToMessagesThatContainsWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Get user details from ACCDN
/// \param brandID brandID of the user
///
/// \param userID user ID to get details for
///
/// \param completion comepltion block with User instance
///
/// \param failure failure block
///
+ (void)getUserDetailsFromACCDN:(NSString * _Nonnull)brandID userID:(NSString * _Nonnull)userID completion:(void (^ _Nullable)(LPUserEntity * _Nonnull))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Attach completion block which is being invoken when the Consumer (My) User is retrieved
+ (void)attachMyUserCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// This method fetch user from the database.
/// <ul>
///   <li>
///     Fetch user data from database
///   </li>
///   <li>
///     If user does not exist, a nil will be returned
///   </li>
/// </ul>
+ (LPUserEntity * _Nullable)getUserFromDatabaseWithUserID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Fetching the user profile (consumer or agent) from server and update in database received details and current date as lastUpdated
/// Fetch will be performed in the following cases:
/// <ol>
///   <li>
///     User was never fetched
///   </li>
///   <li>
///     User was not fetched in current app run
///   </li>
///   <li>
///     User was not fetched for more than 24Hrs
///   </li>
/// </ol>
+ (void)refreshUserProfileWithBrandID:(NSString * _Nonnull)brandID user:(LPUserEntity * _Nonnull)user;
/// Set user profile in database with details of user
+ (void)setUserProfileWithDetails:(LPUser * _Nonnull)lpuser brandID:(NSString * _Nonnull)brandID;
/// Get MY user ID from memory if exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable myUserID;)
+ (NSString * _Nullable)myUserID SWIFT_WARN_UNUSED_RESULT;
/// Get MY ALTERNATIVE user ID from memory if exists
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable myAgentVepUserID;)
+ (NSString * _Nullable)myAgentVepUserID SWIFT_WARN_UNUSED_RESULT;
/// Handle agent details that fetched and notifiy for fetched user
/// User details can be nil incase there should be notify for no assigned agent
+ (void)agentDetailsDidFetchWithUser:(LPUserEntity * _Nullable)user;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isNetworkReachable;)
+ (BOOL)isNetworkReachable SWIFT_WARN_UNUSED_RESULT;
/// Set image for URL in images cache
+ (void)setImageByURL:(UIImage * _Nonnull)image url:(NSString * _Nonnull)url;
/// Get image by URL from images cache
+ (UIImage * _Nullable)getImageByURL:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Send local notification (from type: UILocalNotification) in iOS notification center
+ (void)sendLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
+ (NSString * _Nonnull)getAppIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Register pusher with push notification token received from APNS (Apple).
/// Before registering the Pusher, we make sure have the following params:
/// <ul>
///   <li>
///     Consumer UserID
///   </li>
///   <li>
///     Push Token from Apple
///   </li>
///   <li>
///     CSDS Domain for Pusher
///   </li>
///   <li>
///     Account (brand account)
///     When all params availble - perform register
///   </li>
/// </ul>
+ (void)registerPusher:(LPBrandEntity * _Nonnull)brand;
/// Unregister pusher.
/// Before unregistering the Pusher, we make sure we have the following params:
/// param: Consumer UserID
/// param: CSDS Domain for Pusher
/// param: Account (brand account)
/// When all params available - perform unregister
+ (void)unregisterPusher:(LPBrandEntity * _Nonnull)brand completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=12.1.0,obsoleted=14.0.0,message="Use unregisterPusherFor(_ brandId: String) instead");
/// Unregister pusher.
/// <ul>
///   <li>
///     Account (brand account)
///   </li>
/// </ul>
+ (void)unregisterPusherFor:(NSString * _Nonnull)brandId completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get unread message badge counter
/// There are two options to get this counter:
/// <ol>
///   <li>
///     If the time condition is met we are performing a REST request to get it from pusher
///   </li>
///   <li>
///     otherwise, return the cached number we have
///   </li>
/// </ol>
/// note:
/// this method requires the user to accept/allow push notifications (dependancy of pusher)
/// \param conversationQuery used to identify the related brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessagesCount:(id <ConversationParamProtocol> _Nonnull)conversationQuery completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get unread message badge counter
/// \param brandID the account number for the brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessageCountWithBrandID:(NSString * _Nonnull)brandID completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Get All CSDS Service Domains
/// This method uses cache to store and fetch services domains. For every new app session, the CSDS cache will get updated from server
/// Completion blocks will be invoked once there is a stored cache or after the request from the server completed
/// \param accountID accountID to get all services for
///
/// \param completion completion block with the response domains from server
///
/// \param failure failure block with error which will be invoked if server request failed
///
+ (void)getAllCSDSDomains:(NSString * _Nonnull)accountID completion:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Returns a string value for a specified key.
/// \param keyName The key to lookup data for.
///
///
/// returns:
/// The String associated with the key if it exists. If no data exists, or the data found cannot be encoded as a string, returns nil.
+ (NSString * _Nullable)keychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Save a String value to the keychain associated with a specified key. If a String value already exists for the given keyname, the string will be overwritten with the new value.
/// \param value The String value to save.
///
/// \param forKey The key to save the String under.
///
///
/// returns:
/// True if the save was successful, false otherwise.
+ (BOOL)setKeychainString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove a string associated with a specified key.
/// \param keyName The key value to remove data for.
///
///
/// returns:
/// True if successful, false otherwise.
+ (BOOL)removeKeychainStringForKey:(NSString * _Nonnull)keyName SWIFT_WARN_UNUSED_RESULT;
/// Remove all object from keychain
+ (BOOL)removeAllKeychainObjects SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nullable)getMessagesOfLatestConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<LPMessageEntity *> * _Nonnull)getMessagesFromConversationWithConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getLastMessageTimeStamp:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get next conversation which messages need to query.
/// Calculating of next conversation is done by gathering all the conversations that needs to be queried, and the one with the latest creationDate
+ (LPConversationEntity * _Nullable)getNextConversationForQueryMessagesIfExists:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getConversations:(id <ConversationParamProtocol> _Nonnull)query predicate:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get all active conversations per query and params.
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (LPConversationEntity * _Nullable)getActiveConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Get the newest (latest) close conversation if exists
/// <ul>
///   <li>
///     QueryParamProtocol: protocol of the current requested type
///   </li>
/// </ul>
+ (NSArray<LPConversationEntity *> * _Nullable)getLatestClosedConversations:(id <ConversationParamProtocol> _Nonnull)query conversationsCount:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
+ (LPConversationEntity * _Nonnull)createConversation:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Clear a initial created conversation and its assoicated messages.
/// An initial created conversation is a conversation which is created and now only shows welcome message
/// Before removing the conversation, we are checking that there is no multiple messages which are still not sent to prevent cases when new conversation with messages still not synced with server and may be deleted
/// \param conversation initial conversation to delete from DB
///
///
/// returns:
/// true if deleted from DB, else false
+ (BOOL)clearInitialCreatedConversation:(LPConversationEntity * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
/// Get the assigned agent of the recent open/closed conversation if exists.
+ (LPUserEntity * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// Returns the message boards if exist.
/// The message boards are the link preview data structures
/// built from the html meta data of the source url
+ (void)getMessageBoardsWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Delete preview images directory from disk and all its content
+ (void)deleteAllPreviewImagesFromDiskWithCompletion:(void (^ _Nullable)(void))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
/// Get expiration token of a JWT from a token string
/// \param jwtToken JWT string to extract the expiration from
///
///
/// returns:
/// expiration Data instance or nil incase JWT failed to be decoded
+ (NSDate * _Nullable)getExpirationDateFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
/// Get UserID of a JWT from a token string
/// \param jwtToken jwtToken: JWT string to extract the userID from
///
///
/// returns:
/// userID String or nil incase JWT failed to be decoded
+ (NSString * _Nullable)getUserIDFromJWT:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
@end

/// All SDK supported languages
/// The enum contains general languages and specific if exists.
/// For example: Portuguese from ‘pt’ folder will be used for all regions when the language is Portuguese. Portuguese from ‘pt-PT’ folder will be used for Portugal region only when the language is Portuguese (Portugal)
typedef SWIFT_ENUM(NSInteger, LPLanguage, closed) {
  LPLanguageDevice = 0,
  LPLanguageEn = 1,
  LPLanguageEn_GB = 2,
  LPLanguagePt = 3,
  LPLanguagePt_PT = 4,
  LPLanguageFr = 5,
  LPLanguageBg = 6,
  LPLanguageCs = 7,
  LPLanguageDa = 8,
  LPLanguageSr = 9,
  LPLanguageDe = 10,
  LPLanguageEl = 11,
  LPLanguageHe = 12,
  LPLanguageHe_IL = 13,
  LPLanguageEs = 14,
  LPLanguageEt = 15,
  LPLanguageFi = 16,
  LPLanguageHi = 17,
  LPLanguageHr = 18,
  LPLanguageHu = 19,
  LPLanguageIt = 20,
  LPLanguageJa = 21,
  LPLanguageKo = 22,
  LPLanguageLt = 23,
  LPLanguageLv = 24,
  LPLanguageMk = 25,
  LPLanguageNb = 26,
  LPLanguageNl = 27,
  LPLanguagePl = 28,
  LPLanguageRo = 29,
  LPLanguageRu = 30,
  LPLanguageSl = 31,
  LPLanguageSk = 32,
  LPLanguageSv = 33,
  LPLanguageTh = 34,
  LPLanguageTr = 35,
  LPLanguageUk = 36,
  LPLanguageVi = 37,
  LPLanguageZh = 38,
  LPLanguageZh_Hans = 39,
  LPLanguageZh_Hant_hk = 40,
};


SWIFT_CLASS("_TtC7LPInfra19LPLinkPreviewEntity")
@interface LPLinkPreviewEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable captionTitle;
@property (nonatomic, copy) NSString * _Nullable captionDescription;
@property (nonatomic, copy) NSString * _Nullable captionSiteName;
@property (nonatomic, copy) NSString * _Nullable relativeImagePath;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable imageState;
@property (nonatomic, strong) LPCustomBoardEntity * _Nonnull ownerCustomBoard;
@property (nonatomic, copy) void (^ _Nullable imageDownloadCompleted)(UIImage * _Nullable);
@property (nonatomic, copy) void (^ _Nullable imageDownloadFailed)(NSError * _Nonnull);
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPLinkPreviewEntity (SWIFT_EXTENSION(LPInfra))
- (void)setImageWithImage:(UIImage * _Nullable)image relativePath:(NSString * _Nonnull)relativePath;
/// Get custom image. First look for an image from RAM, then look for an image from DISK, lastely, download image from url
/// \param completion completion with optional UIImage
///
- (void)getImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (UIImage * _Nullable)getImageFromCache SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7LPInfra5LPLog")
@interface LPLog : NSObject
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable className;
@property (nonatomic, copy) NSString * _Nullable funcName;
@property (nonatomic, copy) NSString * _Nullable text;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StructuredContentItemContainer;

SWIFT_CLASS("_TtC7LPInfra15LPMessageEntity")
@interface LPMessageEntity : NSManagedObject
@property (nonatomic, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, copy) NSString * _Nonnull content;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull statusRaw;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull messageType;
@property (nonatomic, strong) LPDialogEntity * _Nonnull ownerDialog;
@property (nonatomic, strong) LPUserEntity * _Nullable ownerUser;
@property (nonatomic, strong) LPFileEntity * _Nullable file;
@property (nonatomic, strong) LPFormEntity * _Nullable form;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, strong) NSOrderedSet * _Nullable customBoards;
@property (nonatomic, copy) NSString * _Nullable linkPreviewState;
@property (nonatomic, strong) StructuredContentItemContainer * _Nullable structuredContentItemContainer;
@property (nonatomic) BOOL presented;
@property (nonatomic, copy) void (^ _Nullable boardsBuildCompleted)(NSArray<LPCustomBoardEntity *> * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.boardsBuildCompleted' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable boardsBuildFailed)(NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.boardsBuildFailed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// time when UI requested to show ‘Sending’ text
@property (nonatomic, copy) NSDate * _Nullable requestedToShowSendingState SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.requestedToShowSendingState' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nonnull lastSendingTimestamp SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.lastSendingTimestamp' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable messageMetadata SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.messageMetadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable maskedContent SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.maskedContent' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Migration for older agent messages types to new messages RemoteUser type
/// NOTE: JUNE 2016 - THIS METHOD CAN BE REMOVED AFTER THE NEXT 2-3 SDK RELEASES ARE OUT
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface LPMessageEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL isSystemMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isSystemMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isRemoteMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isRemoteMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isUserMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isUserMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isControllerMessage SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isControllerMessage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isLinkPreview SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isLinkPreview' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isStructuredContent SWIFT_DEPRECATED_OBJC("Swift property 'LPMessageEntity.isStructuredContent' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (NSString * _Nonnull)buildUID:(NSString * _Nonnull)dialogUID sequence:(NSInteger)sequence SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.buildUID(_:sequence:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
+ (NSPredicate * _Nonnull)byDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.byDate(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get messages boards from message
/// If boards already exist, return it, else pending to boards build completion
/// \param completion completion with array of board. Array can be empty if there are no boards
///
- (void)getBoardsWithCompletion:(void (^ _Nonnull)(NSArray<LPCustomBoardEntity *> * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_OBJC("Swift method 'LPMessageEntity.getBoards(completion:failure:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

/// ENUM to list major features to control from config.
/// <ul>
///   <li>
///     userFileSharing: Enable sharing files from consumer to agent. (photo and files)
///   </li>
///   <li>
///     audioSharing: Enable sharing audio from consumer to agent.
///   </li>
///   <li>
///     agentFileSharing: Allow sending files from agent to consumer. (photo and files)
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LPMessagingSDKFeature, closed) {
  LPMessagingSDKFeatureUserFileSharing = 0,
  LPMessagingSDKFeatureAudioSharing = 1,
  LPMessagingSDKFeatureAgentFileSharing = 2,
};


SWIFT_CLASS("_TtC7LPInfra11LPOperation")
@interface LPOperation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (void)start;
- (void)finishOperation SWIFT_DEPRECATED_OBJC("Swift method 'LPOperation.finishOperation()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)cancel;
@property (nonatomic, readonly, getter=isReady) BOOL ready;
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
/// Cleaning operation when canceled
/// It is recommended to implement this method in sublclass and nullify blocks
- (void)clearOperationOnCancel SWIFT_DEPRECATED_OBJC("Swift method 'LPOperation.clearOperationOnCancel()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPPermissionTypes, closed) {
  LPPermissionTypesLocation = 0,
  LPPermissionTypesContacts = 1,
  LPPermissionTypesCalendars = 2,
  LPPermissionTypesReminders = 3,
  LPPermissionTypesPhotos = 4,
  LPPermissionTypesBluetooth = 5,
  LPPermissionTypesMicrophone = 6,
  LPPermissionTypesSpeechRecognition = 7,
  LPPermissionTypesCamera = 8,
  LPPermissionTypesHealth = 9,
  LPPermissionTypesHomekit = 10,
  LPPermissionTypesMediaLibrary = 11,
  LPPermissionTypesMotionAndFitness = 12,
};

@class NSBundle;

SWIFT_CLASS("_TtC7LPInfra12LPSDKManager")
@interface LPSDKManager : NSObject <GeneralManagerProtocol>
@property (nonatomic, strong) id <ConversationParamProtocol> _Nullable conversationQuery;
@property (nonatomic) BOOL isWindowMode;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPSDKManager * _Nonnull instance;)
+ (LPSDKManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Fetch the bundle - LPMessagingSDKModels.bundle
///
/// returns:
/// Return a Bundle
+ (NSBundle * _Nullable)getBundle SWIFT_WARN_UNUSED_RESULT;
/// Fetch the SDKVersion from the current bundle
///
/// returns:
/// string with the current version. If failed to fetched returns nil
+ (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// This method determines if the current SDK version is applicable according to 2 different validations:
/// <ol>
///   <li>
///     First validation will check with the value from LPCDN (which we use for all users), if version applicable procceed.
///   </li>
///   <li>
///     If LPCDN version is applicable, we check the version compared to ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the version was applicable.
///   </li>
/// </ol>
/// \param brandID brandID to determine its min sdk setting
///
/// \param completion a boolean in a completion block. The SDK is applicable if the current version is greater or euqal to the fetched value
///
+ (void)isVersionApplicableWithBrandID:(NSString * _Nonnull)brandID configurationKey:(NSString * _Nullable)configurationKey useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL, BOOL))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Determines if a feature is enabled for account
/// <ol>
///   <li>
///     Fetch the static configuration data from LPCDN for global setting
///   </li>
///   <li>
///     If LPCDN setting is enabled, we check the feature with ACCDN for the specific brand.
///     NOTE: In any case, if fail to get the setting from the services, proceed as the feature enabled
///   </li>
/// </ol>
/// \param brandID brand/account id of the desired request
///
/// \param completion completion with boolean that shows if feature is enabled/disabled which calculated using LPConfig, LPCDN and ACCDN
///
+ (void)isFeatureEnabledWithFeature:(enum LPMessagingSDKFeature)feature brandID:(NSString * _Nonnull)brandID useCacheIfExists:(BOOL)useCacheIfExists completion:(void (^ _Nonnull)(BOOL))completion;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra7LPTimer")
@interface LPTimer : NSObject
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration handler:(void (^ _Nonnull)(NSTimeInterval))handler OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'LPTimer.init(duration:handler:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)start SWIFT_DEPRECATED_OBJC("Swift method 'LPTimer.start()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LPUrlPreviewStyle, closed) {
  LPUrlPreviewStyleSlim = 0,
  LPUrlPreviewStyleLarge = 1,
};


SWIFT_CLASS("_TtC7LPInfra6LPUser")
@interface LPUser : NSObject
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(LPUserEntity * _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra12LPUserEntity")
@interface LPUserEntity : NSManagedObject
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nonnull typeRaw;
@property (nonatomic, copy) NSString * _Nullable bio;
@property (nonatomic, strong) NSSet * _Nonnull userMessages;
@property (nonatomic) BOOL isSaved;
@property (nonatomic, copy) NSDate * _Nullable lastUpdated;
@property (nonatomic, copy) NSString * _Nullable employeeID;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPUserEntity (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly) BOOL isConsumer;
@property (nonatomic, readonly, copy) NSString * _Nonnull fullName;
@property (nonatomic, readonly) BOOL isMe;
@property (nonatomic, readonly) BOOL isController;
@end


SWIFT_CLASS("_TtC7LPInfra19LPUserProfileEntity")
@interface LPUserProfileEntity : LPUserEntity
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@class LPSRSecurityPolicy;

SWIFT_CLASS("_TtC7LPInfra11LPWebSocket")
@interface LPWebSocket : LPSRWebSocket
@property (nonatomic, copy) NSString * _Nonnull requestIndex SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.requestIndex' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.headers' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isClosed SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isClosed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly) BOOL isReadyToOpen SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.isReadyToOpen' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)flushQueue SWIFT_DEPRECATED_OBJC("Swift method 'LPWebSocket.flushQueue()' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSURL * _Null_unspecified socketURL SWIFT_DEPRECATED_OBJC("Swift property 'LPWebSocket.socketURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)cancelRequest:(NSString * _Nonnull)requestIndex SWIFT_DEPRECATED_OBJC("Swift method 'LPWebSocket.cancelRequest(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)open;
- (void)close;
- (nonnull instancetype)initWithURLRequest:(NSURLRequest * _Nonnull)request protocols:(NSArray<NSString *> * _Nullable)protocols securityPolicy:(LPSRSecurityPolicy * _Nonnull)securityPolicy SWIFT_UNAVAILABLE;
@end

enum MessageFrequency : NSInteger;
@class LPWelcomeMessageOption;
@class QuickReplyItem;

SWIFT_CLASS("_TtC7LPInfra16LPWelcomeMessage")
@interface LPWelcomeMessage : NSObject
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic) enum MessageFrequency frequency;
@property (nonatomic, readonly, copy) NSArray<LPWelcomeMessageOption *> * _Nonnull options;
@property (nonatomic, readonly) NSInteger numberOfOptionsPerRow;
@property (nonatomic, readonly, strong) QuickReplyItem * _Nullable quickReply;
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)message frequency:(enum MessageFrequency)frequency OBJC_DESIGNATED_INITIALIZER;
- (BOOL)shouldDisplayDefaultMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setWithOptions:(NSArray<LPWelcomeMessageOption *> * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
- (void)clearOptions;
- (void)setWithNumberOfOptionsPerRow:(NSInteger)NumberOfOptionsPerRow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MessageFrequency, closed) {
  MessageFrequencyFirstTimeConversation = 0,
  MessageFrequencyEveryConversation = 1,
};

typedef SWIFT_ENUM(NSInteger, LPWelcomeMessageError, closed) {
  LPWelcomeMessageErrorMaximumOptions = 0,
  LPWelcomeMessageErrorMaximumOptionTitleCharacters = 1,
  LPWelcomeMessageErrorMinimumOptionTitleCharacters = 2,
};
static NSString * _Nonnull const LPWelcomeMessageErrorDomain = @"LPInfra.LPWelcomeMessage.LPWelcomeMessageError";


SWIFT_CLASS("_TtC7LPInfra22LPWelcomeMessageOption")
@interface LPWelcomeMessageOption : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra16LanguagesManager")
@interface LanguagesManager : NSObject <GeneralManagerProtocol>
@property (nonatomic, copy) NSString * _Nullable c4mLanguage;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull supportedLanguages;)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)supportedLanguages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LanguagesManager * _Nonnull instance;)
+ (LanguagesManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Prints all localized strings keys
+ (void)printAllKeys;
/// Prints the SDK supported languages
+ (void)printSupportedLanguages;
/// Get all supported languages by key-value (key is locale key and value is language description), call the following:
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Returns current locale special format for Form localization
/// Format based on <language-Region> for example “he-IL”
/// Supported Languages:
/// ar-AE bg-BG cs-CZ Cy-sr-SP da-DK de-DE el-GR es-ES et-EE fi-FI fr-FR he-IL hi-IN hr-HR hu-HU
/// it-IT ja-JP ko-KR it-LT lv-LV mk-MK nb-NO nl-NL pl-PL pt-BR pt-PT ro-RO ru-RU sk-SK sl-SL sv-SE th-TH tr-TR uk-UA vi-VN zh-CN zh-HK zh-TW
///
/// returns:
/// locale formatted string
+ (NSString * _Nonnull)getFormattedLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the language to use in SDK from native preferred language
/// <ol>
///   <li>
///     Get the first object from preferredLanguages and try to find it in our supported languages enum. If found, set it as default
///   </li>
///   <li>
///     If the language not found, try to take only the language itself (without the region) and do the same. If found, set it as default
///   </li>
///   <li>
///     If nothing found - set “en” as default language
///   </li>
/// </ol>
+ (NSString * _Nonnull)sdkLanguageFromLocalePreferredLanguage SWIFT_WARN_UNUSED_RESULT;
- (void)clearManager;
@end

enum LogLevel : NSInteger;

SWIFT_CLASS("_TtC7LPInfra8LogEvent")
@interface LogEvent : NSObject
@property (nonatomic, readonly) enum LogLevel logLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull className;
@property (nonatomic, readonly, copy) NSString * _Nonnull functionName;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LogLevel, closed) {
  LogLevelTrace = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelOff = 5,
};


SWIFT_CLASS("_TtC7LPInfra26MessagingEventNotification")
@interface MessagingEventNotification : GeneralResponse
@property (nonatomic, copy) NSString * _Nullable conversationID;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra21MessagingServiceEvent")
@interface MessagingServiceEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventId;
@property (nonatomic, readonly, strong) LPDialogEntity * _Null_unspecified dialog;
@property (nonatomic, readonly, strong) LPUserEntity * _Nullable sender;
@property (nonatomic, copy) void (^ _Nullable fileMessageCompletion)(LPMessageEntity * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable fileMessageFailure)(NSError * _Nonnull);
- (nullable instancetype)initWithFailure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface NSManagedObject (SWIFT_EXTENSION(LPInfra))
/// Save changes in managed object context
/// <ul>
///   <li>
///     Parameter: completion - optional completion handler
///   </li>
/// </ul>
- (void)saveContextWithCompletion:(void (^ _Nullable)(BOOL))completion SWIFT_DEPRECATED_OBJC("Swift method 'NSManagedObject.saveContext(completion:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Determines whether the object was delete or it still exists in its managedObjectContext
@property (nonatomic, readonly) BOOL isValid SWIFT_DEPRECATED_OBJC("Swift property 'NSManagedObject.isValid' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Returns objectID string representation if the object is not temporary. Otherwise returns nil
@property (nonatomic, readonly, copy) NSString * _Nullable objectIDPermanentString SWIFT_DEPRECATED_OBJC("Swift property 'NSManagedObject.objectIDPermanentString' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end








SWIFT_CLASS("_TtC7LPInfra12PublishEvent")
@interface PublishEvent : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra16QuickReplyAction")
@interface QuickReplyAction : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyAction.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyAction.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class QuickReplyButtonDetails;

SWIFT_CLASS("_TtC7LPInfra16QuickReplyButton")
@interface QuickReplyButton : UIButton
@property (nonatomic, strong) QuickReplyButtonDetails * _Nullable details SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButton.details' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithQuickReplyButtonDetails:(QuickReplyButtonDetails * _Nonnull)quickReplyButtonDetails SWIFT_DEPRECATED_OBJC("Swift initializer 'QuickReplyButton.init(quickReplyButtonDetails:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)drawRect:(CGRect)rect;
@end

@class QuickReplyClick;
@class QuickReplyStyle;

SWIFT_CLASS("_TtC7LPInfra23QuickReplyButtonDetails")
@interface QuickReplyButtonDetails : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable text SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable tooltip SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.tooltip' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) QuickReplyClick * _Nullable click SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.click' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) QuickReplyStyle * _Nullable style SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyButtonDetails.style' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra15QuickReplyClick")
@interface QuickReplyClick : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable metadata SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.metadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<QuickReplyAction *> * _Nullable actions SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyClick.actions' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra14QuickReplyItem")
@interface QuickReplyItem : NSObject <NSCoding>
@property (nonatomic) NSInteger sequence SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.sequence' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable ownerMessageUID SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.ownerMessageUID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<QuickReplyButtonDetails *> * _Nullable buttonsDetails SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyItem.buttonsDetails' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithSequence:(NSInteger)sequence OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'QuickReplyItem.init(sequence:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra20QuickReplyLinkAction")
@interface QuickReplyLinkAction : QuickReplyAction
@property (nonatomic, copy) NSString * _Nonnull uri SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyLinkAction.uri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable deepLinkUri SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyLinkAction.deepLinkUri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra24QuickReplyNavigateAction")
@interface QuickReplyNavigateAction : QuickReplyAction
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyNavigateAction.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyNavigateAction.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra27QuickReplyPublishTextAction")
@interface QuickReplyPublishTextAction : QuickReplyAction
@property (nonatomic, copy) NSString * _Nonnull text SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyPublishTextAction.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra15QuickReplyStyle")
@interface QuickReplyStyle : NSObject <NSCoding>
@property (nonatomic, strong) UIColor * _Nullable color SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.color' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable borderColor SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.borderColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable backgroundColor SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.backgroundColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable size SWIFT_DEPRECATED_OBJC("Swift property 'QuickReplyStyle.size' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra19RequestConversation")
@interface RequestConversation : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra15RequestSwiftURL")
@interface RequestSwiftURL : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra4Ring")
@interface Ring : NSObject
@property (nonatomic, copy) NSString * _Nullable ringID SWIFT_DEPRECATED_OBJC("Swift property 'Ring.ringID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable brandId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.brandId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable conversationID SWIFT_DEPRECATED_OBJC("Swift property 'Ring.conversationID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable consumerId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.consumerId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable skillId SWIFT_DEPRECATED_OBJC("Swift property 'Ring.skillId' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable ringExpiration SWIFT_DEPRECATED_OBJC("Swift property 'Ring.ringExpiration' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra11RingUpdated")
@interface RingUpdated : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra23RoutingTaskNotification")
@interface RoutingTaskNotification : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra25SecureFormReadOTKResponse")
@interface SecureFormReadOTKResponse : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra23StructuredContentAction")
@interface StructuredContentAction : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentAction.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentAction.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StructuredContentClick;
@class StructuredContentStyle;

SWIFT_CLASS("_TtC7LPInfra21StructuredContentItem")
@interface StructuredContentItem : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull type SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.type' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable tooltip SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.tooltip' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentClick * _Nullable click SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.click' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentStyle * _Nullable style SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.style' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) BOOL requiresBorder SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.requiresBorder' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull structuredContentAccessibilityLabel SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItem.structuredContentAccessibilityLabel' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentButtonItem")
@interface StructuredContentButtonItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nullable title SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentButtonItem.title' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the button item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the text item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22StructuredContentClick")
@interface StructuredContentClick : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable metadata SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.metadata' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSArray<StructuredContentAction *> * _Nullable actions SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentClick.actions' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Click, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra26StructuredContentImageItem")
@interface StructuredContentImageItem : StructuredContentItem
@property (nonatomic, strong) UIImage * _Nullable image SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.image' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull imageURL SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable relativeImagePath SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.relativeImagePath' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable imageState SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageState' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable imageCaption SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageCaption' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable imageLoadingCompleted)(UIImage * _Nullable) SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageLoadingCompleted' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) void (^ _Nullable imageLoadingFailed)(NSError * _Nonnull) SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentImageItem.imageLoadingFailed' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the image item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the image item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end



@interface StructuredContentItem (SWIFT_EXTENSION(LPInfra))
- (void)iterateThroughWithIterationStep:(SWIFT_NOESCAPE void (^ _Nonnull)(StructuredContentItem * _Nonnull))iterationStep SWIFT_DEPRECATED_OBJC("Swift method 'StructuredContentItem.iterateThrough(iterationStep:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


SWIFT_CLASS("_TtC7LPInfra30StructuredContentItemContainer")
@interface StructuredContentItemContainer : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull ID SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItemContainer.ID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) StructuredContentItem * _Nullable item SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentItemContainer.item' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithStructuredContentItem:(StructuredContentItem * _Nonnull)structuredContentItem OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'StructuredContentItemContainer.init(structuredContentItem:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the StructuredContentItamsContainer, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the StructuredContentItamsContainer, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentLayoutItem")
@interface StructuredContentLayoutItem : StructuredContentItem
@property (nonatomic, copy) NSArray<StructuredContentItem *> * _Nullable itemsArray SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLayoutItem.itemsArray' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the horizontal item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the horizontal item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra27StructuredContentLinkAction")
@interface StructuredContentLinkAction : StructuredContentAction
@property (nonatomic, copy) NSString * _Nonnull uri SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkAction.uri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable deepLinkUri SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkAction.deepLinkUri' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Link action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra32StructuredContentLinkPreviewItem")
@interface StructuredContentLinkPreviewItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkPreviewItem.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable title SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentLinkPreviewItem.title' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Link item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra24StructuredContentMapItem")
@interface StructuredContentMapItem : StructuredContentItem
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIImage * _Nullable snapShotImage SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentMapItem.snapShotImage' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the map item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the map item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra31StructuredContentNavigateAction")
@interface StructuredContentNavigateAction : StructuredContentAction
@property (nonatomic) CLLocationDegrees latitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentNavigateAction.latitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) CLLocationDegrees longitude SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentNavigateAction.longitude' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Navigate action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Navigate action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra34StructuredContentPublishTextAction")
@interface StructuredContentPublishTextAction : StructuredContentAction
@property (nonatomic, copy) NSString * _Nonnull text SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentPublishTextAction.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the publishText action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22StructuredContentStyle")
@interface StructuredContentStyle : NSObject <NSCoding>
@property (nonatomic, strong) UIColor * _Nullable color SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.color' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, strong) UIColor * _Nullable backgroundColor SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.backgroundColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nullable size SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentStyle.size' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the base Style, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Style, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7LPInfra25StructuredContentTextItem")
@interface StructuredContentTextItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nullable text SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentTextItem.text' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the text item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the text item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra28StructuredContentWebviewItem")
@interface StructuredContentWebviewItem : StructuredContentItem
@property (nonatomic, copy) NSString * _Nonnull url SWIFT_DEPRECATED_OBJC("Swift property 'StructuredContentWebviewItem.url' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Decodes the Webview item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the Webview item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC7LPInfra22SubscribeConversations")
@interface SubscribeConversations : GeneralResponse
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7LPInfra8TTRModel")
@interface TTRModel : NSObject <NSCoding>
@property (nonatomic, copy) NSDate * _Null_unspecified effectiveTTR SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.effectiveTTR' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable manualETTR SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.manualETTR' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic) NSInteger ttrValue SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.ttrValue' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSDate * _Nullable delay SWIFT_DEPRECATED_OBJC("Swift property 'TTRModel.delay' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)initWithEffectiveTTR:(NSDate * _Nonnull)effectiveTTR manualETTR:(NSDate * _Nullable)manualETTR ttrValue:(NSInteger)ttrValue delay:(NSDate * _Nullable)delay OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'TTRModel.init(effectiveTTR:manualETTR:ttrValue:delay:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Compare two TTRModels based on the values of:
/// ttrValue, manualETTR and delay
/// \param other other TTRModel to compare
///
///
/// returns:
/// true if same, else false
- (BOOL)compareWithOther:(TTRModel * _Nonnull)other SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'TTRModel.compare(other:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIColor (SWIFT_EXTENSION(LPInfra))
- (nonnull instancetype)initWithRgba:(NSString * _Nonnull)rgba SWIFT_DEPRECATED_OBJC("Swift initializer 'UIColor.init(rgba:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


@interface UIImage (SWIFT_EXTENSION(LPInfra))
- (UIImage * _Nullable)imageWithTint:(UIColor * _Nonnull)tint SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.imageWithTint(_:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get UIImage resized by provided size
- (UIImage * _Nullable)resizeImageWithTargetSize:(CGSize)targetSize scale:(CGFloat)scale opaque:(BOOL)opaque SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.resizeImage(targetSize:scale:opaque:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.getResizedImageSize(image:maxHeight:maxWidth:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Gets an image, blur and return it
/// if process failed it will return a nil
- (UIImage * _Nullable)blurImageWithRadius:(CGFloat)radius size:(CGSize)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.blurImage(radius:size:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Customize default image with background color and image color.
/// Used for remote message avatar image customization.
/// \param backgroundColor color to replace transparent background
///
/// \param imageColor color to replace image color
///
- (UIImage * _Nonnull)customizedDefaultRemoteAvatarImageWithBackgroundColor:(UIColor * _Nullable)backgroundColor imageColor:(UIColor * _Nullable)imageColor SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'UIImage.customizedDefaultRemoteAvatarImage(backgroundColor:imageColor:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end




SWIFT_CLASS("_TtC7LPInfra10UploadInfo")
@interface UploadInfo : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull fileInfo SWIFT_DEPRECATED_OBJC("Swift property 'UploadInfo.fileInfo' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@property (nonatomic, copy) NSString * _Nonnull brandID SWIFT_DEPRECATED_OBJC("Swift property 'UploadInfo.brandID' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Update fileInfo object for audio file
- (BOOL)setAudioFileInfoFrom:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_OBJC("Swift method 'UploadInfo.setAudioFileInfo(from:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (BOOL)setFileInfoFrom:(NSURL * _Nonnull)url caption:(NSString * _Nonnull)caption error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_OBJC("Swift method 'UploadInfo.setFileInfo(from:caption:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSUserDefaults (SWIFT_EXTENSION(LPInfra))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSUserDefaults * _Nonnull lpStandard SWIFT_DEPRECATED_OBJC("Swift property 'UserDefaults.lpStandard' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");)
+ (NSUserDefaults * _Nonnull)lpStandard SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift property 'UserDefaults.lpStandard' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end


SWIFT_CLASS("_TtC7LPInfra5Utils")
@interface Utils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull backgroundQueue;)
+ (dispatch_queue_t _Nonnull)backgroundQueue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)JSONStringify:(NSDictionary<NSString *, id> * _Nonnull)value prettyPrinted:(BOOL)prettyPrinted SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)JSONDictionaryFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)trim:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidEmail:(NSString * _Nonnull)testStr SWIFT_WARN_UNUSED_RESULT;
+ (void)delay:(double)delay closure:(void (^ _Nonnull)(void))closure;
+ (NSInteger)minutesBetweenDates:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
+ (void)backgroundThread:(void (^ _Nonnull)(void))job;
+ (BOOL)isJWTExpired:(NSString * _Nonnull)jwtToken SWIFT_WARN_UNUSED_RESULT;
+ (void)mainThread:(void (^ _Nonnull)(void))job;
/// Returns a random Int number from min to max
+ (NSInteger)randWithMin:(NSInteger)min max:(NSInteger)max SWIFT_WARN_UNUSED_RESULT;
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
+ (id _Nonnull)unwrapWithAny:(id _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// Show Local iOS notification
+ (void)showLocalNotification:(NSString * _Nonnull)text uid:(NSString * _Nullable)uid;
/// Play vibration sound based on iOS system vibration method
+ (void)playVibrationSound;
/// This method returns true if the device is landscape (it ignores states such as flat, face or back)
+ (BOOL)isLandscape SWIFT_WARN_UNUSED_RESULT;
/// This method returns true if the device is portrait (it ignores states such as flat, face or back)
+ (BOOL)isProtrait SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
