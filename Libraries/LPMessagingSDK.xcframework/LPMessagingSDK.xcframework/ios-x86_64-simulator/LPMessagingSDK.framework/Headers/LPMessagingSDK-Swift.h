// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <LPMessagingSDK/LPMessagingSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LPMessagingSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AMSState, open) {
  AMSStateIN_PROCESS = 0,
  AMSStateNETWORK_REACHABLE = 1,
  AMSStateCSDS_REACHABLE = 2,
  AMSStateVALID_TOKEN = 3,
  AMSStateOPENING_SOCKET = 4,
  AMSStateVALID_SOCKET = 5,
  AMSStateVALID_USERID = 6,
  AMSStateREADY = 7,
  AMSStateREADY_WITH_DATA = 8,
  AMSStateSDK_ERROR = -1,
  AMSStateGENERAL_ERROR = -2,
  AMSStateNETWORK_UNREACHABLE = -3,
  AMSStateCSDS_UNREACHABLE = -4,
  AMSStateNO_TOKEN = -5,
  AMSStateCLOSING_SOCKET = -6,
  AMSStateSOCKET_UNREACHABLE = -7,
  AMSStateNO_USERID = -8,
  AMSStateNO_SUBSCRIPTION = -9,
  AMSStateCERT_PINNING_FAILED = -10,
};

@protocol EntityInterface;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK24EntityEquatableInterface_")
@protocol EntityEquatableInterface
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueIdentifier;
@property (nonatomic, readonly) NSInteger uniqueHashValue;
- (BOOL)isThisEqualTo:(id <EntityInterface> _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK15EntityInterface_")
@protocol EntityInterface <EntityEquatableInterface>
@end

@protocol Brand;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK7Account_")
@protocol Account <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull accountId;
@property (nonatomic, strong) id <Brand> _Nonnull brand;
@end

@class NSSet;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK5Brand_")
@protocol Brand <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull iconURL;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable logoURL;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull details;
@property (nonatomic, strong) NSSet * _Nonnull brandCampaigns;
@property (nonatomic, strong) NSSet * _Nonnull brandConversations;
@property (nonatomic, copy) NSDate * _Nonnull dateJoined;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) NSSet * _Nonnull accounts;
@end

@protocol Conversation;
@class NSPredicate;
@protocol Dialog;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<id <Conversation>> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <Conversation>> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <Conversation>> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
- (id <Conversation> _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
- (id <Conversation> _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
- (id <Dialog> _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
- (NSArray<id <Conversation>> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (id <Conversation> _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(id <Conversation> _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
@end

@class LPCampaignInfo;

SWIFT_CLASS("_TtC14LPMessagingSDK10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by brand.
- (NSArray<id <Conversation>> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by brand, filtered with predicate
- (NSArray<id <Conversation>> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation.
- (id <Conversation> _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all closed conversation
- (NSArray<id <Conversation>> * _Nullable)getClosedConversations SWIFT_WARN_UNUSED_RESULT;
/// Get open conversation.
- (id <Conversation> _Nullable)getOpenConversation SWIFT_WARN_UNUSED_RESULT;
/// Get open Dialog.
- (id <Dialog> _Nullable)getOpenDialog SWIFT_WARN_UNUSED_RESULT;
/// Get the latest closed conversation.
- (NSArray<id <Conversation>> * _Nullable)getLatestClosedConversations:(NSInteger)conversationsCount SWIFT_WARN_UNUSED_RESULT;
- (id <Conversation> _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(id <Conversation> _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (LPCampaignInfo * _Nullable)getCampaignInfo SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)getQueryProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionViewLayoutAttributes;
@class NSCoder;

SWIFT_CLASS("_TtC14LPMessagingSDK18CalendarFlowLayout")
@interface CalendarFlowLayout : UICollectionViewFlowLayout
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK8Campaign_")
@protocol Campaign <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, strong) id <Brand> _Nonnull ownerBrand;
@end

typedef SWIFT_ENUM(NSInteger, CheckmarksState, open) {
  CheckmarksStateSentOnly = 1,
  CheckmarksStateSentAndAccepted = 2,
  CheckmarksStateAll = 3,
};


SWIFT_CLASS("_TtC14LPMessagingSDK13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * _Nonnull)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;
/// Get all conversations by consumerID.
- (NSArray<id <Conversation>> * _Nullable)getConversations SWIFT_WARN_UNUSED_RESULT;
/// Get active conversation based on state and consumerID
- (id <Conversation> _Nullable)getActiveConversation SWIFT_WARN_UNUSED_RESULT;
/// Get all conversations by consumerID, filtered with predicate
- (NSArray<id <Conversation>> * _Nullable)getConversations:(NSPredicate * _Nullable)predicate SWIFT_WARN_UNUSED_RESULT;
- (id <Conversation> _Nonnull)createNewConversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isConversationRelatedToQuery:(id <Conversation> _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getQueryUID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_UNAVAILABLE;
@end

@class TTRModel;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK12Conversation_")
@protocol Conversation <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSString * _Nonnull ttrTypeRaw;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable consumerId;
@property (nonatomic, strong) TTRModel * _Nullable ttrModel;
@property (nonatomic, strong) id <Brand> _Nonnull ownerBrand;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSSet * _Nonnull conversationDialogs;
@property (nonatomic) BOOL csatSubmitted;
@property (nonatomic) BOOL isHistoryFilterEnable;
@property (nonatomic) BOOL presented;
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@end



SWIFT_PROTOCOL("_TtP14LPMessagingSDK39ConversationViewControllerAgentDelegate_")
@protocol ConversationViewControllerAgentDelegate
@optional
- (void)agentDidChangeUserInputText:(NSString * _Nonnull)text;
@end

@class NSOrderedSet;
@protocol Message;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK11CustomBoard_")
@protocol CustomBoard <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, strong) NSOrderedSet * _Nonnull linkPreviewItems;
@property (nonatomic, strong) id <Message> _Nonnull ownerMessage;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK6Dialog_")
@protocol Dialog <EntityInterface>
@property (nonatomic, copy) NSString * _Nullable assignedAgentId;
@property (nonatomic, copy) NSString * _Nullable channelType;
@property (nonatomic, copy) NSDate * _Nullable closeDate;
@property (nonatomic, copy) NSDate * _Nullable lastUpdateDate;
@property (nonatomic, copy) NSString * _Nullable closeReason;
@property (nonatomic, copy) NSDate * _Nonnull creationDate;
@property (nonatomic, copy) NSString * _Nullable dialogType;
@property (nonatomic, strong) NSNumber * _Nonnull lastReceivedSequence;
@property (nonatomic) BOOL resolved;
@property (nonatomic, copy) NSString * _Nonnull stateRaw;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull handlerId;
@property (nonatomic, strong) id <Conversation> _Nonnull ownerConversation;
@property (nonatomic, strong) NSSet * _Nonnull participants;
@property (nonatomic, strong) NSOrderedSet * _Nonnull dialogMessages;
@property (nonatomic, copy) NSString * _Nonnull chatStateRaw;
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@end



@class NSDate;
@class LPFileMetaDataContainer;
@class UIImage;
@class NSError;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK4File_")
@protocol File <EntityInterface>
@property (nonatomic, copy) NSString * _Nullable fileExtension;
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable relativeFilePath;
@property (nonatomic, copy) NSString * _Nullable relativeThumbnailPath;
@property (nonatomic, strong) NSNumber * _Nullable fileSize;
@property (nonatomic, strong) NSDate * _Nullable creationDate;
@property (nonatomic, strong) id <Message> _Nullable ownerMessage;
@property (nonatomic, copy) NSString * _Nullable swiftRelativePath;
@property (nonatomic, strong) LPFileMetaDataContainer * _Nullable metaDataContainer;
@property (nonatomic, strong) UIImage * _Nullable thumbnailImage;
@property (nonatomic, copy) void (^ _Nullable completion)(void);
@property (nonatomic, copy) void (^ _Nullable failure)(NSError * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable preUpload)(void);
@property (nonatomic, copy) void (^ _Nullable preDownload)(void);
@property (nonatomic, copy) void (^ _Nullable uploading)(double);
@property (nonatomic) CGFloat uploadPercentage;
@property (nonatomic, copy) void (^ _Nullable downloading)(double);
@property (nonatomic) CGFloat downloadPercentage;
@property (nonatomic, copy) void (^ _Nullable synced)(void);
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK4Form_")
@protocol Form <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull formID;
@property (nonatomic, copy) NSString * _Nonnull invitationID;
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable submissionID;
@property (nonatomic, strong) NSOrderedSet * _Nonnull ownerMessages;
@property (nonatomic, copy) NSString * _Nullable readOTK;
@property (nonatomic, copy) NSString * _Nullable writeOTK;
@property (nonatomic, copy) NSURL * _Nullable url;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK15GeneralResponse")
@interface GeneralResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable kind;
@property (nonatomic, copy) NSString * _Nullable reqId;
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)initWithJsonDict:(NSDictionary<NSString *, id> * _Nonnull)jsonDict OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull responseDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LPAccountEnviroment, open) {
  LPAccountEnviromentProduction = 0,
  LPAccountEnviromentAlpha = 1,
  LPAccountEnviromentQa = 2,
};


SWIFT_CLASS("_TtC14LPMessagingSDK17LPAppointmentList")
@interface LPAppointmentList : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end









@class UITableView;
@class UITableViewCell;

@interface LPAppointmentList (SWIFT_EXTENSION(LPMessagingSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didDeselectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didEndDisplayingCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

enum LPAuthenticationType : NSInteger;

/// #LPAuthenticationParams
/// This class represents an object to determine the properties of an authenticated connection. If using an authenticated connection, this parameter must be passed: LPAuthenticationParams supports Code Flow login, Implicit Flow login, or Unauthenticated login. See Constructor for details.
SWIFT_CLASS("_TtC14LPMessagingSDK22LPAuthenticationParams")
@interface LPAuthenticationParams : NSObject
@property (nonatomic, copy) NSString * _Nullable authenticationCode;
@property (nonatomic, copy) NSString * _Nullable jwt;
@property (nonatomic, copy) NSString * _Nullable redirectURI;
/// will hold the Cert pining validation public keys
@property (nonatomic, copy) NSArray<NSString *> * _Nullable certPinningPublicKeys;
@property (nonatomic) enum LPAuthenticationType type;
/// LPAuthenticationParams initialization with params
/// \param authenticationCode an optional authCode which is used for ‘Code Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param jwt an optional JWT which is used for ‘Implicit Flow’ authentication. If passing JWT - authenticationCode will be ignored
///
/// \param redirectURI IDP redirect URI
///
/// \param certPinningPublicKeys Set the certificate public key hash this API can get multiple public key hashes for the ability to support more then one key and if the certificate leaf change his public key we will still be able to validate the keys of the others certificate leaf
/// if nil the Cert Pinning is disable
///
/// \param authenticationType .authenticated for Code Flow or Implicit, .unauthenticated for Unauthenticated.  If left as nil will default to .signup flow.
///
- (nonnull instancetype)initWithAuthenticationCode:(NSString * _Nullable)authenticationCode jwt:(NSString * _Nullable)jwt redirectURI:(NSString * _Nullable)redirectURI certPinningPublicKeys:(NSArray<NSString *> * _Nullable)certPinningPublicKeys authenticationType:(enum LPAuthenticationType)authenticationType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum is used for determine the authentication type with the following options:
/// signup (default) // old unauthenticated method
/// unauthenticated
/// authenticated
typedef SWIFT_ENUM(NSInteger, LPAuthenticationType, open) {
  LPAuthenticationTypeSignup = 0,
  LPAuthenticationTypeUnauthenticated = 1,
  LPAuthenticationTypeAuthenticated = 2,
};


SWIFT_CLASS("_TtC14LPMessagingSDK17LPCalendarDayCell")
@interface LPCalendarDayCell : UICollectionViewCell
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK20LPCalendarHeaderView")
@interface LPCalendarHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK14LPCalendarView")
@interface LPCalendarView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end



@class UICollectionView;
@class UIScrollView;

@interface LPCalendarView (SWIFT_EXTENSION(LPMessagingSDK)) <UICollectionViewDelegateFlowLayout>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end


@interface LPCalendarView (SWIFT_EXTENSION(LPMessagingSDK))
- (void)layoutSubviews;
@end






@interface LPCalendarView (SWIFT_EXTENSION(LPMessagingSDK)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK14LPCampaignInfo")
@interface LPCampaignInfo : NSObject
@property (nonatomic) NSInteger campaignId;
@property (nonatomic) NSInteger engagementId;
@property (nonatomic, copy) NSString * _Nullable contextId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable visitorId;
- (nonnull instancetype)initWithCampaignId:(NSInteger)campaignId engagementId:(NSInteger)engagementId contextId:(NSString * _Nullable)contextId sessionId:(NSString * _Nullable)sessionId visitorId:(NSString * _Nullable)visitorId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIFont;
enum LPUrlPreviewStyle : NSInteger;
@class UIBlurEffect;
enum LPRegionCode : NSInteger;
enum LPLanguage : NSInteger;
@class LPConversationScrollConfiguration;
enum VoiceVideoEndCallButtonType : NSInteger;

SWIFT_CLASS("_TtC14LPMessagingSDK8LPConfig")
@interface LPConfig : NSObject
/// A boolean which determines whether to retrieve the agent details from the last closed conversation in case there is no assigned agent. Agent details will be retrieved from API method: func getAssignedAgent(conversationQuery: ConversationParamProtocol)
@property (nonatomic) BOOL retrieveAssignedAgentFromLastClosedConversation;
/// Maximum time frame for recording audio message (in seconds).
@property (nonatomic) NSTimeInterval recordingDurationLimit;
/// Enable or disable audio sharing feature. True is enabled.
@property (nonatomic) BOOL enableAudioSharing;
/// Max number of allowed saved audio files on disk. This refers only to audio files.
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedAudioFilesOnDisk;
/// Hides previous chat history until user identify has been verified
@property (nonatomic) BOOL hideUIUntilAuthenticated;
/// The brand name will be shown as a title on toolbar when there is no active conversation.
@property (nonatomic, copy) NSString * _Nonnull brandName;
/// Color for the entire view background.
@property (nonatomic, strong) UIColor * _Nonnull conversationBackgroundColor;
/// Custom font name for conversation feed. This font will affect all messages, timestamp and separators.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameConversationFeed;
/// Custom font name for all non conversation feed controls. Such as: buttons, alerts, banners, menu and external windows.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameNonConversationFeed;
/// Array of images for creating the custom refresh controller. The custom refresh controller will loop the images from the array. It will need two or more images in the array for loop to take effect.
@property (nonatomic, copy) NSArray<UIImage *> * _Nullable customRefreshControllerImagesArray;
/// Custom refresh controller speed animation define the full images loop time
/// The smaller the value the faster the animation.
@property (nonatomic) float customRefreshControllerAnimationSpeed;
/// When not nil, will be used as the conversation portrait background image.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundPortraitImage;
/// When not nil, use this attribute as the conversation portrait background image. When an image is shown, it is recommended to set ‘dateSeparatorBackgroundColor’ config to clear.
@property (nonatomic, strong) UIImage * _Nullable conversationBackgroundLandscapeImage;
/// Decides the content mode of the conversation background image.
@property (nonatomic) UIViewContentMode conversationBackgroundImageContentMode;
/// Color code for the background of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingBackgroundColor;
/// Color code for the text of the connection status bar while connecting.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusConnectingTextColor;
/// Connection status toast (failed to connect) background color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectBackgroundColor;
/// Connection status toast (failed to connect) text color.
@property (nonatomic, strong) UIColor * _Nonnull connectionStatusFailedToConnectTextColor;
/// Color code for the text of the controller bubble.
@property (nonatomic, strong) UIColor * _Nonnull controllerBubbleTextColor;
/// Toggle conversation separator text message when conversation resolved from agent or consumer.
/// attention:
/// if <em>enableConversationSeparator</em> is set to <em>false</em>, Conversation Separator Text won’t be displayed even if this property is enable
@property (nonatomic) BOOL enableConversationSeparatorTextMessage;
/// Toggle conversation separator line when conversation is auto closed
/// attention:
/// if <em>enableConversationSeparator</em> is set to <em>false</em>, Conversation Separator Line won’t be displayed even if this property is enable
@property (nonatomic) BOOL enableConversationSeparatorLineOnAutoClose;
/// Toggle conversation separator line when conversation resolved from agent or consumer.
/// attention:
/// if <em>enableConversationSeparator</em> is set to <em>false</em>, Conversation Separator Line won’t be displayed even if this property is enable
@property (nonatomic) BOOL enableConversationSeparatorLine;
/// Toggle conversation separator view when conversation resolved from agent or consumer.
/// attention:
/// Setting this property to false will also disable <em>enableConversationSeparatorTextMessage</em> & <em>enableConversationSeparatorLine</em>
@property (nonatomic) BOOL enableConversationSeparator;
/// Conversation separator text and line color.
@property (nonatomic, strong) UIColor * _Nonnull conversationSeparatorTextColor;
/// Define the conversation Closed Separator font size.
@property (nonatomic) UIFontTextStyle _Nonnull conversationSeparatorFontSize;
/// Define the conversation Closed label to separator line padding.
@property (nonatomic) float conversationSeparatorBottomPadding;
/// Custom font name for conversation closed separator.
/// Fonts that are not part of the iOS families, must be defined in host app’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable conversationSeparatorFontName;
/// Define the conversation separator view bottom padding.
@property (nonatomic) float conversationSeparatorViewBottomPadding;
/// Define the conversation Closed Separator Top padding.
@property (nonatomic) float conversationSeparatorTopPadding;
/// Define the top padding for the conversation separator content view
@property (nonatomic) CGFloat conversationSeparatorContentViewTopPadding;
/// Define the bottom padding for the conversation separator content view
@property (nonatomic) CGFloat conversationSeparatorContentViewBottomPadding;
/// Amount of conversations to show in advance.
@property (nonatomic) NSUInteger maxPreviousConversationToPresent;
/// Upon SDK initialization, all closed conversation with end date older than X months, will be deleted from the database. Setting 0 will delete all closed conversation.
@property (nonatomic) NSUInteger deleteClosedConversationOlderThanMonths;
/// Maximum number of minutes to send the message.
@property (nonatomic) NSUInteger sendingMessageTimeoutInMinutes;
/// Toggle device vibration when a new message from a remote user received.
@property (nonatomic) BOOL enableVibrationOnMessageFromRemoteUser;
/// If true, show agent is typing indicator. In accessibility mode, announce when agent is typing.
/// When false will not show any indication that the agent is typing, and will not announce when agent is typing in accessibility.
@property (nonatomic) BOOL announceAgentTyping;
/// When true, shows agent  is typing indicator in a message bubble. When false, show indicator under Agent label in navigator bar.
/// When announceAgentTyping is false, will not show any “is typing” indicator regardless of current value.
@property (nonatomic) BOOL showAgentTypingInMessageBubble;
/// Enabling this flag, SDK will use regular expression defined in ‘clientOnlyMaskingRegex’ to mask text on the consumer device.  This is client only masking because it is both set and executed within the consumers device. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server unmasked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableClientOnlyMasking;
/// Enabling this flag, SDK will use regular expression defined in ‘realTimeMaskingRegex’ to mask text originated on the consumer device.  This masking is applied to messages both on the consumer device and sent to the agent. All masked data will appear as asterisks, will be saved to local db masked and will be sent to the server masked. This feature is only available for Unauthenticated conversations.  Default = false.
@property (nonatomic) BOOL enableRealTimeMasking;
/// Regular expression string applied to the ‘enableClientOnlyMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull clientOnlyMaskingRegex;
/// Regular expression string applied to the ‘enableRealTimeMasking’ flag.
/// The regular expression patterns and behavior are based on Perl’s regular expressions. See Apple Reference.
@property (nonatomic, copy) NSString * _Nonnull realTimeMaskingRegex;
/// Custom formatting for date string (day, year..), for example: ‘d MMM’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateFormat;
/// Custom formatting for time string (hours, minutes..), for example: ‘hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpTimeFormat;
/// Custom formatting for date and time string, for example: ‘EEEE MM/dd/YY hh:mm a’.
/// If not defined, one of the default styles will be used.
@property (nonatomic, copy) NSString * _Nullable lpDateTimeFormat;
/// Default value for Calendar View Medium Font
@property (nonatomic) CGFloat appointmentCalendarViewFontMedium;
/// Default value for Calendar View Medium Large
@property (nonatomic) CGFloat appointmentCalendarViewFontLarge;
/// Default value for Calendar View Date Cell Height.
@property (nonatomic) CGFloat appointmentCalendarViewDateCellHeight;
/// Default value for when user presses and selects a cell from the Calendar View
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarViewSelectedColor;
/// Default value for the color of today’s cell
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarViewTodayColor;
/// Default value for dark text
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarViewTextDark;
/// Default value for darkText
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarViewTextLight;
/// Default value for calendar date color
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarViewDateColor;
/// Calendar background color
@property (nonatomic, strong) UIColor * _Nonnull appointmentCalendarBackgroundColor;
/// Default Image for appointment slot
@property (nonatomic, strong) UIImage * _Nullable appointmentSlotImage;
/// Default Color for appointment slot image
@property (nonatomic, strong) UIColor * _Nonnull appointmentCellImageTintColor;
/// Default Image for right chevron
@property (nonatomic, strong) UIImage * _Nullable appointmentRightChevron;
/// Default Image for left chevron
@property (nonatomic, strong) UIImage * _Nullable appointmentLeftChevron;
/// Default value for cell title text color
@property (nonatomic, strong) UIColor * _Nonnull appointmentCellTitleLabelTextColor;
/// Default value for cell detail text color
@property (nonatomic, strong) UIColor * _Nonnull appointmentCellDetailLabelTextColor;
/// Default value for cell accessory text color
@property (nonatomic, strong) UIColor * _Nonnull appointmentCellAccessoryLabelTextColor;
/// Default value for when user presses and selects a cell from the Calendar View
@property (nonatomic, strong) UIColor * _Nonnull appointmentCellSelectedColor;
/// Default color for confirmation view background
@property (nonatomic, strong) UIColor * _Nonnull appointmentConfirmationViewBackroundColor;
/// Default text for confirmation button
@property (nonatomic, copy) NSString * _Nonnull appointmentConfirmButtonTitle;
/// Default radius for confirmation button corner radius
@property (nonatomic) CGFloat appointmentConfirmButtonCornerRadius;
/// Default color for confirmation button background
@property (nonatomic, strong) UIColor * _Nonnull appointmentConfirmButtonBackgroundColor;
/// Default color for confirmation button text
@property (nonatomic, strong) UIColor * _Nonnull appointmentConfirmButtonTitleTextColor;
/// Default size for confirmation button title font
@property (nonatomic) CGFloat appointmentConfirmButtonTitleFontSize;
/// Defualt format to present date in output message
@property (nonatomic, copy) NSString * _Nonnull appointmetnCustomOutputDateFormat;
/// Default
@property (nonatomic, copy) NSString * _Nonnull appointmentCustomFontName;
/// Default format to present Dates
@property (nonatomic, copy) NSString * _Nonnull customDateFormat;
/// Default font color for LPDatePickerHeaderView text
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderFontColor;
/// Default background color for LPDatePickerHeaderView header
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderBackgroundColor;
/// Default tint color for LPDatePickerHeaderView accessory Button.
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderAccessoryButtonTintColor;
/// Default image for LPDatePickerHeaderView accessory Button.
@property (nonatomic, strong) UIImage * _Nullable datePickerHeaderAccessoryButtonImage;
/// Header Picker Configurations
/// Default background color for UIPickerView component on LPDatePickerHeaderView
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderPickerBackgroundColor;
/// Default background color for UIPicker Toolbar component on LPDatePickerHeaderView
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderPickerToolbarBackgroundColor;
/// Default font color for UIPicker Row items on LPDatePickerHeaderView
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderPickerFontColor;
/// Default tint color for UIPicker Confirmation Button component on LPDatePickerHeaderView
@property (nonatomic, strong) UIColor * _Nonnull datePickerHeaderPickerConfirmationButtonTintColor;
/// Default text for UIPicker Confirmation Button component on LPDatePickerHeaderView
@property (nonatomic, copy) NSString * _Nonnull datePickerHeaderPickerConfirmationButtonText;
/// Default style for UIPicker Toolbar component on LPDatePickerHeaderView
@property (nonatomic) UIBarStyle datePickerHeaderPickerToolbarStyle;
/// Footer Configurations
/// Default background color for DatePicker Footer
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterBackgroundColor;
/// Default background color for DatePicker Selection Button
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterButtonBackgroundColor;
/// Default font color for DatePicker Footer Buttons
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterButtonFontColor;
/// Default corner radius for DatePicker Footer Buttons
@property (nonatomic) double datePickerFooterButtonCornerRadius;
/// Default corner radius for DatePicker Footer Buttons
@property (nonatomic, copy) NSString * _Nonnull datePickerFooterButtonText;
/// Default font color for DatePicker Footer Labels
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterLabelsFontColor;
/// Default image for DatePicker Month to Month Arrow (from -> to).
@property (nonatomic, strong) UIImage * _Nullable datePickerFooterArrowImage;
/// Default tint color for DatePicker Month to Month Arrow (from -> to).
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterArrowTintColor;
/// Default background color for DatePicker Month to Month Arrow (from -> to).
@property (nonatomic, strong) UIColor * _Nonnull datePickerFooterArrowBackgroundColor;
/// Generic Properties
@property (nonatomic, copy) NSString * _Nonnull datePickerCustomFontName;
/// Calendar Properties
/// Default calendar background color
@property (nonatomic, strong) UIColor * _Nonnull datePickerCalendarBackgroundColor;
/// Header
@property (nonatomic) CGFloat datePickerCalendarHeaderHeight;
@property (nonatomic) CGFloat datePickerCalendarHeaderTopMargin;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCalendarHeaderTextColor;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCalendarHeaderBackgroundColor;
@property (nonatomic, strong) UIFont * _Nonnull datePickerCalendarHeaderFont;
/// Weekdays
/// Default top margin for weekdays view
@property (nonatomic) CGFloat datePickerCalendarWeekdaysTopMargin;
/// Default bottom margin for weekdays view
@property (nonatomic) CGFloat datePickerCalendarWeekdaysBottomMargin;
/// Default height for weedays view
@property (nonatomic) CGFloat datePickerCalendarWeekdaysHeight;
/// Default textColor for weekdays view
@property (nonatomic, strong) UIColor * _Nonnull datePickerCalendarWeekdaysTextColor;
/// Default backgroundColor for weekdays view
@property (nonatomic, strong) UIColor * _Nonnull datePickerCalendarWeekdaysBackgroundColor;
/// Default fornt for weekdays view
@property (nonatomic, strong) UIFont * _Nonnull datePickerCalendarWeekdaysFont;
@property (nonatomic) BOOL datePickerShowAdjacentDays;
/// Default Style for common cell
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellColorDefault;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellTextColorDefault;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellBorderColor;
@property (nonatomic) CGFloat datePickerCellBorderWidth;
@property (nonatomic, strong) UIFont * _Nonnull datePickerCellFont;
/// Default Style for today cell
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellTextColorToday;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellColorToday;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellBorderColorToday;
@property (nonatomic) CGFloat datePickerCellBorderWidthToday;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellColorOutOfRange;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellColorAdjacent;
/// Default style for selected cell
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellSelectedBorderColor;
@property (nonatomic) CGFloat datePickerCellSelectedBorderWidth;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellSelectedColor;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellSelectedTextColor;
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellInSelectedRangeColor;
/// Default Weekend cell text color
@property (nonatomic, strong) UIColor * _Nonnull datePickerCellTextColorWeekend;
/// Locale Style
@property (nonatomic, copy) NSLocale * _Nonnull locale;
/// Color code for date separator title background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTitleBackgroundColor;
/// Color code for date separator text color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorTextColor;
/// Line color of the title for the dates separator in the view screen.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorLineBackgroundColor;
/// Color code for date separator background color.
@property (nonatomic, strong) UIColor * _Nonnull dateSeparatorBackgroundColor;
/// Define the Date Separator font text style.
@property (nonatomic) UIFontTextStyle _Nonnull dateSeparatorFontSize;
/// Custom font name for Timestamp.
/// Fonts that are not part of the iOS families, must be defined in App’s Info.plist.
@property (nonatomic, copy) NSString * _Nullable customFontNameDateSeparator;
/// Define the Date Separator Top padding.
@property (nonatomic) float dateSeparatorTopPadding;
/// Define the  DateSeparator bottom padding.
@property (nonatomic) float dateSeparatorBottomPadding;
/// Checkmark visibility of the following options (type CheckmarksState):
/// SentOnly - Show checkmarks for only Sent messages.
/// SentAndAccepted - Show checkmarks for only Sent and Accepted messages.
/// All - Show checkmarks for Sent, Accepted and Read messages.
@property (nonatomic) enum CheckmarksState checkmarkVisibility;
/// Color of checkmark indication signs of Read messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkReadColor;
/// Color of checkmark indication signs of Distributed messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkDistributedColor;
/// Color of checkmark indication signs of Sent messages.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkSentColor;
/// Two options for read indication:
/// If true = Read receipt “text mode”.
/// If false = Read receipt “icon mode”.
@property (nonatomic) BOOL isReadReceiptTextMode;
/// Color of the remote user typing bubbles animation.
@property (nonatomic) BOOL messageStatusNumericTimestampOnly;
/// The show duration of the local notifications view in the SDK.
@property (nonatomic) double notificationShowDurationInSeconds;
/// Enable or disable real time link preview feature when the consumer is typing a url.
@property (nonatomic) BOOL enableRealTimeLinkPreview;
/// Enable or disable link preview feature. If disabled, user will not see site’s link preview or link preview.
@property (nonatomic) BOOL enableLinkPreview;
/// Color code for the background of the link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBackgroundColor;
/// Color code for the title text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewTitleTextColor;
/// Color code for the description text inside link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewDescriptionTextColor;
/// Color code for the description site name link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewSiteNameTextColor;
/// Double number for the outline width of link preview area inside cell.
@property (nonatomic) double linkPreviewBorderWidth;
/// Color code for border color of link preview area inside cell.
@property (nonatomic, strong) UIColor * _Nonnull linkPreviewBorderColor;
/// image for loader in Link preview
@property (nonatomic, strong) UIImage * _Nullable linkPreviewLoadingImage;
/// LPUrlPreviewStyle defines the style in which the link prview cells will be shown
/// slim - Small preview space with a small image, a title and a description
/// large - Large preview space with a large image, a title and a description.
@property (nonatomic) enum LPUrlPreviewStyle urlPreviewStyle;
/// The color of the background color of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBackgroundColor;
/// The color of the border of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewBorderColor;
/// The width of the border of the main view.
@property (nonatomic) CGFloat urlRealTimePreviewBorderWidth;
/// The color of the title at the top of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewTitleTextColor;
/// The color of the description at the bottom of the main view.
@property (nonatomic, strong) UIColor * _Nonnull urlRealTimePreviewDescriptionTextColor;
/// “urlPreview” will also use non-OG tags to parse urls instead of using only OG tags if useNonOGTagsForLinkPreview is true.
@property (nonatomic) BOOL useNonOGTagsForLinkPreview;
/// Enable or disable loading view.
/// since:
/// LPMessagingSDK 6.5.0
/// remark:
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableLoadingView;
/// The type of effect on the loading view.
@property (nonatomic, strong) UIBlurEffect * _Nonnull loadingViewBlurEffect;
/// The background color of the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewBackgroundColor;
/// The text color for the label on the loading view.
@property (nonatomic, strong) UIColor * _Nonnull loadingViewTextColor;
/// The background color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressBackgroundColor;
/// The tint color for the progress view on the loading view.
@property (nonatomic, strong) UIColor * _Nullable loadingViewProgressTintColor;
/// Region - when it is not nil, it will be combined with ‘language’ (”<language>_<country>”, for example: en_US) and used instead of device default locale .
/// The combined value have to be a part of iOS available Locale identifiers (use Locale.availableIdentifiers to validate). Otherwise, default locale will be used.
/// NOTE: the 24/12 Hours time style also will be affected by using the specific Locale when formatting times.
/// If no value is provided, the SDK will use the region according to the device’s locale.
@property (nonatomic) enum LPRegionCode region;
/// Language that will be used instead of default device language.
/// It’s type is LPLanguage enum that contains all the languages that are supported by MessagingSDK.
/// It will affect following areas:
/// <ol>
///   <li>
///     will be used when getting localized strings
///   </li>
///   <li>
///     will be combined with ‘country’ (“language_country”, for example: en_US) and used instead of default device locale when formatting time and date.
///     If no value is provided, the SDK will use the device’s language.
///   </li>
/// </ol>
@property (nonatomic) enum LPLanguage language;
/// Bool used to allow manual configuration for enabling the SDK to register to LP Pusher service. Requires user logout to change current configuration. Default is set to true.
@property (nonatomic) BOOL enableLpPusherService;
/// Background color of navigation bar in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationBackgroundColor;
/// Navigation title color in conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull conversationNavigationTitleColor;
/// Status bar style in conversation screen.
@property (nonatomic) UIStatusBarStyle conversationStatusBarStyle;
/// LivePerson Navigation Bar Left Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarLeftItemImageButton;
/// LivePerson Navigation Bar Right Item custom button.
/// NOTE: this property gets it tintColor from <code>conversationNavigationTitleColor</code>
@property (nonatomic, strong) UIImage * _Nullable lpNavigationBarRightItemImageButton;
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL fileSharingFromAgent;
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL fileSharingFromConsumer;
/// Max number of allowed saved files on disk. This refers only to full photo files.
/// NOTE: The validation of allowed max number of files will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedFilesOnDisk;
/// Max number of allowed saved documents on disk. This refers only to document files
/// The validation of allowed max number of documents will be when showing and removing conversation.
@property (nonatomic) NSUInteger maxNumberOfSavedDocumentsOnDisk;
/// Photosharing menu background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuBackgroundColor;
/// Photosharing menu buttons background color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsBackgroundColor;
/// Photosharing menu buttons tint color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTintColor;
/// Photosharing menu buttons text color.
@property (nonatomic, strong) UIColor * _Nonnull photosharingMenuButtonsTextColor;
/// Camera button color in enabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonEnabledColor;
/// Camera button color in disabled mode in the conversation screen. Will be presented only if photo sharing feature is enabled.
@property (nonatomic, strong) UIColor * _Nonnull cameraButtonDisabledColor;
/// File Cell Loader fill color.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderFillColor;
/// Color of the loader progress line.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingProgressColor;
/// Color of the loader progress line background.
@property (nonatomic, strong) UIColor * _Nonnull fileCellLoaderRingBackgroundColor;
/// Photo sharing open menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingOpenMenuImageButton;
/// Photo sharing close menu custom button.
/// NOTE: this property gets its tint color from <code>cameraButtonEnabledColor</code> or <code>cameraButtonDisabledColor</code> - depending on button state
@property (nonatomic, strong) UIImage * _Nullable photoSharingCloseMenuImageButton;
/// Custom Camera image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuCameraImage;
/// Custom Library image in the photo Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable photoSharingMenuLibraryImage;
/// Custom file image in the file Sharing Menu.
/// NOTE: this property gets its tint color from <code>photosharingMenuButtonsTintColor</code> and background color from <code>photosharingMenuButtonsBackgroundColor</code>
@property (nonatomic, strong) UIImage * _Nullable fileSharingMenuFileImage;
/// Image for custom the thumbnail of unsupported files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingUniversalFileThumbnailimage;
/// Image for custom the thumbnail of PDF files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPDFFileThumbnailimage;
/// Image for custom the thumbnail of PPTX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingPPTXFileThumbnailimage;
/// Image for custom the thumbnail of DOCX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingDOCXFileThumbnailimage;
/// Image for custom the thumbnail of XLSX files in file sharing.
@property (nonatomic, strong) UIImage * _Nullable fileSharingXLSXFileThumbnailimage;
/// Color code for the empty state label.
@property (nonatomic, strong) UIColor * _Nonnull conversationEmptyStateTextColor;
/// Tint color for the state of files received from agents.
@property (nonatomic, strong) UIColor * _Nonnull remoteFileStateTint;
/// Tint color for the state of files send by user.
@property (nonatomic, strong) UIColor * _Nonnull userFileStateTint;
/// Tint color for the state of photos send by user.
@property (nonatomic, strong) UIColor * _Nonnull userPhotoStateTint;
/// The configuration to control our modal presentation styles within the SDK.
/// note:
/// Default is .fullscreen. value. We support any current UIModalPresentationStyle except “.none”.
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// The configuration to control our modal presentation stylen for image picker controller within the SDK.
/// note:
/// Default is .fullscreen. value. We support any current UIModalPresentationStyle except “.none”.
@property (nonatomic) UIModalPresentationStyle imagePickerPresentationStyle;
/// The configuration to control our modal presentation stylen for LPDatePicker controller within the SDK.
/// note:
/// Default is .fullscreen. value. We support any current UIModalPresentationStyle except “.none”.
@property (nonatomic) UIModalPresentationStyle datePickerPresentationStyle;
/// The configuration to control our modal presentation stylen for LPAppointmentList controller within the SDK.
/// note:
/// Default is .fullscreen. value. We support any current UIModalPresentationStyle except “.none”.
@property (nonatomic) UIModalPresentationStyle appointmentListPresentationStyle;
/// Enable or disable inapp reporting for push notifications to event manager api.
/// If true: SDK will report delivery, read, and conversation events.
/// <ul>
///   <li>
///     INFO:
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Due to iOS Limitations, Delivery event is reported alongside read event.
///   </li>
///   <li>
///     Read event is reported when the consumer reads the push notification message (message is shown).
///   </li>
///   <li>
///     Conversation event is reported when the consumer replies to the push notification message(conversation has been created).
///   </li>
/// </ol>
@property (nonatomic) BOOL inAppReportingEnabled;
/// Enable or disable the ability to process Proactive and IVR Deflection messages
/// precondition:
/// HostApp implements <code>LPMessagingSDKNotification(customLocalPushNotificationView notification: LPNotification)</code>
/// requires:
/// Consumer to be registered for Push Notifications
/// since:
/// LPMessagingSDK 6.4.1
/// remark:
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableInAppProcessingForActiveState;
/// Distance between the bottom and top edges of the button to the bottom and top edges of the text.
@property (nonatomic) CGFloat quickReplyButtonVerticalPadding;
/// Distance between the right and left edges of the button to the right and left edges of the text.
@property (nonatomic) CGFloat quickReplyButtonHorizontalPadding;
/// Vertical margin between quick reply buttons.
@property (nonatomic) CGFloat quickReplyVerticalMargin;
/// Horizontal padding between quick reply buttons.
@property (nonatomic) CGFloat quickReplyHorizontalMargin;
/// Border size of Quick Reply buttons.
@property (nonatomic) CGFloat quickReplyButtonBorderWidth;
/// Conversation Scroll configurations for scenarios:
/// <ul>
///   <li>
///     app navigation
///   </li>
///   <li>
///     background to foreground
///   </li>
///   <li>
///     scroll to bottom button pressed
///   </li>
///   <li>
///     push notification tapped
///   </li>
/// </ul>
@property (nonatomic, strong) LPConversationScrollConfiguration * _Nonnull conversationScrollConfiguration;
/// Back button color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBackButtonColor;
/// The style (UIStatusBarStyle) for the secure form screen.
@property (nonatomic) UIStatusBarStyle secureFormUIStatusBarStyle;
/// Background color of navigation bar in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationBackgroundColor;
/// Navigation title color in secure form screen.
@property (nonatomic, strong) UIColor * _Nonnull secureFormNavigationTitleColor;
/// Secure form bubble background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBackgroundColor;
/// Secure form bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleBorderColor;
/// Secure form bubble border width in pixels.
@property (nonatomic) double secureFormBubbleBorderWidth;
/// Secure form bubble form title color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleTitleColor;
/// Secure form bubble form description color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleDescriptionColor;
/// Secure form bubble fill form button text color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonTextColor;
/// Secure form bubble fill form button background color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFillFormButtonBackgroundColor;
/// Secure form bubble form image tint color.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleFormImageTintColor;
/// Secure form custom font name to be used while user filling the secure form. If not set, the default font will be used.
@property (nonatomic, copy) NSString * _Nonnull secureFormCustomFontName;
/// Secure form flag to hiding the secure form logo in the top of the form.
@property (nonatomic) BOOL secureFormHideLogo;
/// Secure form loading indicator color while loading form before opening.
@property (nonatomic, strong) UIColor * _Nonnull secureFormBubbleLoadingIndicatorColor;
/// Send button color in disabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonDisabledColor;
/// Send button color in enabled mode in the conversation screen.
@property (nonatomic, strong) UIColor * _Nonnull sendButtonEnabledColor;
/// Send button Image in the conversation screen. The custom image changes only if <code>isSendMessageButtonInTextMode</code> = <em>false</em>.
/// The image must conforms Apple’s <a href="https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/custom-icons/">Custom Icon guidelines</a>.
/// NOTE: this property gets its tintColor from <code>sendButtonDisabledColor</code> or <code>sendButtonEnabledColor</code> - depending on state
@property (nonatomic, strong) UIImage * _Nullable sendButtonImage;
/// Two options for the send message button mode:
/// <ol>
///   <li>
///     <em>text mode</em> (taken from localized resources)
///   </li>
///   <li>
///     <em>icon mode</em>.
///   </li>
/// </ol>
@property (nonatomic) BOOL isSendMessageButtonInTextMode;
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStructuredContent;
/// Structured Content bubble border width in pixels.
@property (nonatomic) double structuredContentBubbleBorderWidth;
/// Structured Content bubble border color.
@property (nonatomic, strong) UIColor * _Nonnull structuredContentBubbleBorderColor;
/// Structured Content bubble top left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopLeftCornerRadius;
/// Structured Content bubble top right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleTopRightCornerRadius;
/// Structured Content bubble bottom left corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomLeftCornerRadius;
/// Structured Content bubble bottom right corner radius in pixels.
@property (nonatomic) float structuredContentBubbleBottomRightCornerRadius;
/// Structured Content Latitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLongitudeDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLatitudeDeltaDeltaSpan;
/// Structured Content Longitude Delta Span. Used to determine which area of the map to focus. If you set this attribute, you must set <code>structuredContentMapLatitudeDeltaDeltaSpan</code> as well. This parameter is used to create an <a href="https://developer.apple.com/documentation/mapkit/mkcoordinatespan">MKCoordinateSpan</a>.
@property (nonatomic) double structuredContentMapLongitudeDeltaSpan;
/// Used to set the border color for Structure Content elements of button type
/// attention:
/// Accessibility compliance highlights the need for links and buttons to have a distinctive UI characteristic. Changing this value will break accessibility compliance.
@property (nonatomic, strong) UIColor * _Nonnull structuredContentButtonBorderColor;
/// Used to set the text color for Structure Content elements of button type
@property (nonatomic, strong) UIColor * _Nonnull structuredContentButtonTextColor;
/// Used to set the text color for Structure Content elements of text type
@property (nonatomic, strong) UIColor * _Nonnull structuredContentTextColor;
/// Used to set the width constraint for Structured Constant elements of button type
@property (nonatomic) CGFloat structuredButtonWidthConstant;
/// Structured content loading image when images are being fetched/loaded
@property (nonatomic, strong) UIImage * _Nullable structuredContentLoadingImage;
/// Structured content loading image when images failed to fetched/loaded
@property (nonatomic, strong) UIImage * _Nullable structuredContentBrokenImage;
/// Corner radius for submit button.
@property (nonatomic) double csatSubmitButtonCornerRadius;
/// Corner radius for (Yes/No) buttons.
@property (nonatomic) double csatYesNoButtonsCornerRadius;
/// Background color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonBackgroundColor;
/// Text color of the Submit button.
@property (nonatomic, strong) UIColor * _Nonnull csatSubmitButtonTextColor;
/// Background Color of the rating buttons.
@property (nonatomic, strong) UIColor * _Nonnull csatRatingButtonSelectedColor;
/// Color for the resolution confirmation buttons (Yes/No) when selected
@property (nonatomic, strong) UIColor * _Nonnull csatResolutionButtonSelectedColor;
/// Titles text colors for all labels.
@property (nonatomic, strong) UIColor * _Nonnull csatAllTitlesTextColor;
/// Hides the survey (Yes/No) question.
/// To show CSAT resolution, ‘csatAgentViewHidden’ must be set to True
@property (nonatomic) BOOL csatResolutionHidden;
/// Hides the view of agent avatar and name.
@property (nonatomic) BOOL csatAgentViewHidden;
/// Hides the Thanks You screen after tapping ‘Submit’ button.
/// <ol>
///   <li>
///     If true, CSAT view will disappear immediately after tapping ‘Submit’.
///   </li>
///   <li>
///     If false, Thank You screen will appear for 2 seconds after tapping ‘Submit’ and then all the CSAT view will disappear.
///   </li>
/// </ol>
@property (nonatomic) BOOL csatThankYouScreenHidden;
/// Background color of navigation bar in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationBackgroundColor;
/// Text color of the title in the survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatNavigationTitleColor;
/// Skip button color in survey screen.
@property (nonatomic, strong) UIColor * _Nonnull csatSkipButtonColor;
/// The style (UIStatusBarStyle) for the survey screen.
@property (nonatomic) UIStatusBarStyle csatUIStatusBarStyle;
/// Hides the whole survey view and disables it.
@property (nonatomic) BOOL csatShowSurveyView;
/// Expiration of CSAT in minutes from the moment the conversation was ended. If Survey exceeded the expiration, it will not be presented to the user.
@property (nonatomic) NSUInteger csatSurveyExpirationInMinutes;
/// Color code for the text of the system messages.
@property (nonatomic, strong) UIColor * _Nonnull systemBubbleTextColor;
/// When set to <em>true</em>, the TTR notifications show with off hours.  When the auto messages feature is enabled, TTR notifications do not display when the auto messages featuer is enabled, regardless of the value set for this attribute.
@property (nonatomic) BOOL ttrShouldShow;
/// Enable or disable shift toaster (’An agent will respond…’).
@property (nonatomic) BOOL ttrShowShiftBanner;
/// Number of seconds before the first Time to Respond (TTR) notification appears.
@property (nonatomic) double ttrFirstTimeDelay;
/// When set to <em>true</em>, the timestamp of the TTR notification displays.
/// Otherwise, the “An agent will respond shortly” message displays.
@property (nonatomic) BOOL ttrShouldShowTimestamp;
/// Controls the TTR frequency, for example, don’t show the TTR more than once in 8 seconds.
@property (nonatomic) NSUInteger ttrShowFrequencyInSeconds;
/// Enable or disable the off-hours toaster.
@property (nonatomic) BOOL showOffHoursBanner;
/// Background color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerBackgroundColor;
/// Text color of TTR notification banner view.
@property (nonatomic, strong) UIColor * _Nonnull ttrBannerTextColor;
/// Off Hours banner timezone based on NSTimeZone names. If sending empty string, the local timezone will be used (Server sends UTC time)
@property (nonatomic, copy) NSString * _Nonnull offHoursTimeZoneName;
/// Enable toast notifications such as offline and TTR notifications.
@property (nonatomic) BOOL toastNotificationsEnabled;
/// Scroll to bottom button background color of the whole button.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBackgroundColor;
/// Scroll to bottom button text color of the last unread message preview.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonMessagePreviewTextColor;
/// Scroll to bottom button unread message badge background color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeBackgroundColor;
/// Scroll to bottom button unread message badge text color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonBadgeTextColor;
/// Scroll to bottom button arrow tint color.
@property (nonatomic, strong) UIColor * _Nonnull scrollToBottomButtonArrowColor;
/// Unread Messages divider background color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerBackgroundColor;
/// Unread Messages divider text color.
@property (nonatomic, strong) UIColor * _Nonnull unreadMessagesDividerTextColor;
/// Toggle the mode of the scroll to bottom button.
@property (nonatomic) BOOL scrollToBottomButtonEnabled;
/// Toggle the mode of the scroll to bottom unread message text preview.
@property (nonatomic) BOOL scrollToBottomButtonMessagePreviewEnabled;
/// Toggle the mode of the Unread Messages divider.
/// important:
/// As of SDK 5.1 & above, This configuration no longer impacts the scroll of the conversation or the scroll to bottom button (message preview or count indicator)
/// note:
/// Behavior for SDK version 5.0:
/// If disabled, the <code>scroll to bottom</code> button will scroll to bottom of the conversation but the count indicator and message preview  will not be displayed. Regardless of <em>unreadMessagesDividerEnabled</em> value, the conversation screen will always scrolls to the last position where the user left off.
@property (nonatomic) BOOL unreadMessagesDividerEnabled;
/// Define the corners radius of the unread messages.
@property (nonatomic) float unreadMessagesCornersRadius;
/// Define the top left and bottom left corners radius.
@property (nonatomic) float scrollToBottomButtonCornerRadius;
/// Define the scroll to bottom badge corners radius.
@property (nonatomic) float scrollToBottomButtonBadgeCornerRadius;
/// Background color of the remote user’s avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarBackgroundColor;
/// Define the remote avatar Leading padding  (left edge to avatar).
@property (nonatomic) float remoteUserAvatarLeadingPadding;
/// Define the remote avatar Trailing padding (Avatar to bubble).
@property (nonatomic) float remoteUserAvatarTrailingPadding;
/// Icon color of default remoteUser avatar.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconColor;
/// Default Avatar image of the remote user.
/// When assigned, this image will disable <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code> configurations.
/// If remote user has an avatar image in his profile, this attribute will be ignored.
@property (nonatomic, strong) UIImage * _Nullable remoteUserDefaultAvatarImage;
/// Define the remote avatar icon border width.
@property (nonatomic) CGFloat remoteUserAvatarIconBorderWidth;
/// Define the remote avatar icon border color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserAvatarIconBorderColor;
/// Default avatar image for Brand.
/// If setting nil - default avatar image will be used with <code>remoteUserAvatarBackgroundColor</code> and <code>remoteUserAvatarIconColor</code>
@property (nonatomic, strong) UIImage * _Nullable brandAvatarImage;
/// the uiimageview content mode for the brand avatar image.
/// note:
/// this will be applied if a brandAvatarImage is set
@property (nonatomic) UIViewContentMode brandAvatarImageContentMode;
/// Background color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarBackgroundColor;
/// Icon color of Agent’s default avatar in CSAT.
@property (nonatomic, strong) UIColor * _Nonnull csatAgentAvatarIconColor;
/// User Input TextView container background color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewContainerBackgroundColor;
/// User Input TextView corner radius.
@property (nonatomic) double inputTextViewCornerRadius;
/// Input TextView top border color default clear color.
@property (nonatomic, strong) UIColor * _Nonnull inputTextViewTopBorderColor;
/// Color code for the background of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBackgroundColor;
/// Color code for the outline color.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleBorderColor;
/// Color code for links in the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLinkColor;
/// Color code for the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double remoteUserBubbleBorderWidth;
/// Color code for the timestamp of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleTimestampColor;
/// Color of the typing indicator for when the remote user is typing.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserTypingTintColor;
/// Color of the remote user’s bubble overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleLongPressOverlayColor;
/// Alpha of the remote user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true. Default value is LPColor.lpLabel.
@property (nonatomic) float remoteUserBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually. Default value is 0.3.
@property (nonatomic) float remoteUserBubbleTopLeftCornerRadius;
/// Top right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the Remote bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float remoteUserBubbleBottomRightCornerRadius;
/// Color code for the background of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBackgroundColor;
/// Color code for the outline of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleBorderColor;
/// Color code for links in the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLinkColor;
/// Color code for the text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTextColor;
/// Double number for the outline width.
@property (nonatomic) double userBubbleBorderWidth;
/// Color code for the timestamp of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleTimestampColor;
/// Color code for the send status text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleSendStatusTextColor;
/// Color code for the error view text of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorTextColor;
/// Color code for the error view border of the visitor bubble.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleErrorBorderColor;
/// Enable bubbles overlay when user performing a long press gesture on messaging bubbles.
@property (nonatomic) BOOL enableBubblesOverlayOnLongPress;
/// Color of the user bubble’s overlay when user use long press gesture on the bubble. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.
@property (nonatomic, strong) UIColor * _Nonnull userBubbleLongPressOverlayColor;
/// Alpha of the user’s bubble overlay when user use long press gesture on the bubble. Value can be 0.0 - 1.0. Overlay will appear as long as the menu controller appears on the bubble, when the menu dismissed, overlay will disappear too. In order to show overlay enableBubblesOverlayOnLongPress should be true.  Default value is Default value is 0.3.
@property (nonatomic) float userBubbleLongPressOverlayAlpha;
/// Top left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopLeftCornerRadius;
/// Top right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleTopRightCornerRadius;
/// Bottom left Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomLeftCornerRadius;
/// Bottom right Radius corner on the User bubble.
/// Setting the radius to a value greater than 0.0 causes the bubble’s layer to begin drawing rounded corners on its background. This attribute affects the bubble’s masking and it’s recommended to use a corner radius which is at max equals to half of the bubble’s height. Setting a corner radius larger than half of the bubble’s height will cause text to cut visually.
@property (nonatomic) float userBubbleBottomRightCornerRadius;
/// Regular expression for email hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nonnull bubbleEmailLinksRegex;
/// Regular expression for url hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubbleUrlLinksRegex;
/// Regular expression for phone hyperlinks in users messages (consumer and agent). This attribute is optional - If not assigned, the default link detection will be enabled.
@property (nonatomic, copy) NSString * _Nullable bubblePhoneLinksRegex;
/// Define the bubble Top Padding.
@property (nonatomic) float bubbleTopPadding;
/// Define the bubble Bottom Padding.
@property (nonatomic) float bubbleBottomPadding;
/// Define the bubble Leading Padding.
@property (nonatomic) float bubbleLeadingPadding;
/// Define the bubble Trailing Padding.
@property (nonatomic) float bubbleTrailingPadding;
/// Define the bubble Timestamp Bottom Padding.
@property (nonatomic) float bubbleTimestampBottomPadding;
/// Define the bubble Timestamp Top Padding.
@property (nonatomic) float bubbleTimestampTopPadding;
/// When true, user and remote user messages containing one or two emojies will be enlarged in chat. Messages with one emoji will be the largest, two emojis will be large, and 3 or more will be displayed as normal text.
@property (nonatomic) BOOL enableEnlargeEmojies;
/// When true, this will enable the agent to start a voice or video call
/// remark:
/// Default value is <code>false</code>
@property (nonatomic) BOOL enableVoiceVideoCall;
/// Defines Image icon for Voice Invite
@property (nonatomic, strong) UIImage * _Nullable voiceCallImageIcon;
/// Defines Image icon for Video Invite
@property (nonatomic, strong) UIImage * _Nullable videoCallImageIcon;
/// Defines background image for Accept button on Voice & Video Invite
@property (nonatomic, strong) UIImage * _Nullable voiceVideoAcceptCallButtonImage;
/// Defines background image for Decline button on Voice & Video Invite
@property (nonatomic, strong) UIImage * _Nullable voiceVideoDeclineCallButtonImage;
/// Defines background image for End button on Voice & Video Invite
/// precondition:
/// This image is only shown on the Voice & Video Invite when Consumer has an active Call
/// requires:
/// To enable this image <code>voiceVideoEndCallButtonType</code> should be set to <code>hangup</code>
@property (nonatomic, strong) UIImage * _Nullable voiceVideoEndCallButtonImage;
/// Defines background image for Join button on Voice & Video Invite
@property (nonatomic, strong) UIImage * _Nullable voiceVideoJoinCallButtonImage;
/// Defines tint <em>(Color)</em> for Icon on Voice & Video Invite
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoInviteIconTint;
/// Defines tint <em>(Color)</em> for Accept/Join Button on  Voice & Video Invite
/// note:
/// This property controls both the Accept and Join call Button
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoAcceptButtonTint;
/// Defines tint <em>(Color)</em> for Decline/End Button on Voice & Video Invite
/// note:
/// This property controls both the Decline and End call Button
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoDeclineButtonTint;
/// Defines background color for Accept/Join Button on Voice & Video Invite
/// note:
/// This property controls both the Accept and Join call Button
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoAcceptButtonBackgroundColor;
/// Defines background color for Decline/End Button on Voice & Video Invite
/// note:
/// This property controls both the Decline and End call Button
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoDeclineButtonBackgroundColor;
/// Controls rendering mode for Voice or Video Invitation Icon
/// remark:
/// Default value is <code>.alwaysTemplate</code>
@property (nonatomic) UIImageRenderingMode voiceVideoInvitationIconRenderingMode;
/// Controls rendering mode for Accept Button on Voice & Video Invitation
/// remark:
/// Default value is <code>.alwaysTemplate</code>
@property (nonatomic) UIImageRenderingMode voiceVideoAcceptButtonRenderingMode;
/// Controls rending mode for Decline Button on Voice & Video Invitation
/// remark:
/// Default value is <code>.alwaysTemplate</code>
@property (nonatomic) UIImageRenderingMode voiceVideoDeclineButtonRenderingMode;
/// Controls which icon to display on Join Button for Voice & Video Invitation
/// remark:
/// Default value is <code>.close</code>
/// precondition:
/// This type is only shown on the Voice & Video Invite when Consumer has an active Call
@property (nonatomic) enum VoiceVideoEndCallButtonType voiceVideoEndCallButtonType;
/// Defines inner padding between Accept & Decline Buttons on Voice & Video Invitation
@property (nonatomic) double voiceVideoButtonsInnerPadding;
/// Defines outer padding between Accept & Decline Buttons on Voice & Video Invitation
@property (nonatomic) double voiceVideoButtonsOuterPadding;
/// Defines background color for Voice & Video Bubble
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoInvitationBubbleBackgroundColor;
/// Defines border color for Voice & Video Invitation Bubble
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoInvitationBubbleBorderColor;
/// Defines border width for Voice & Video Invitation Bubble
@property (nonatomic) double voiceVideoInvitationBubbleBorderWidth;
/// Defines background color of Navigation & Tab Bar for Voice & Video SFSafariViewController
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoNavigationBackgroundColor;
/// Defines tint <em>(color)</em> of Navigation & Tab Bar Icons for Voice & Video SFSafariViewController
@property (nonatomic, strong) UIColor * _Nonnull voiceVideoNavigationTintColor;
/// Custom button icon image that displays on the navigation bar.
/// NOTE: this property gets its tintColor from <code>conversationNavigationTitleColor</code>
/// When pressed, the <a href="mobile-app-messaging-sdk-for-ios-sdk-apis-callbacks-index.html#lpmessagingsdkcustombuttontapped">LPMessagingSDKCustomButtonTapped</a> callback gets invoked.
@property (nonatomic, strong) UIImage * _Nullable customButtonImage;
/// Enable or disable hyperlink support feature from agents.
@property (nonatomic) BOOL markdownHyperlinkFromAgent;
/// Color code for hyperlink in the text of the remote user bubble.
@property (nonatomic, strong) UIColor * _Nonnull remoteUserBubbleHyperlinkColor;
/// Controls text color for hyperlink item on the System Messages Bubble
@property (nonatomic, strong) UIColor * _Nonnull controllerBubbleHyperlinkColor;
@property (nonatomic, copy) NSString * _Nullable country SWIFT_AVAILABILITY(ios,deprecated=13.0.0,obsoleted=14.0.0,message="use region instead");
/// Enable or disable file/photo sharing feature from agents.
@property (nonatomic) BOOL enableFileSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromAgent");
/// Enable or disable file/photo sharing feature from consumer.
@property (nonatomic) BOOL enablePhotoSharing SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="fileSharingFromConsumer");
/// Should display status bar of the secure form screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL secureFormUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use secureFormUIStatusBarStyle");
/// Enable or Disable toggle for Structured Content feature in conversations.
@property (nonatomic) BOOL enableStrucutredContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use enableStructuredContent instead");
/// Should display status bar of the survey screen in Light Content Mode (UIStatusBarStyle).
@property (nonatomic) BOOL csatUIStatusBarStyleLightContent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use csatUIStatusBarStyle instead");
/// TTR - Time To Respond. Enable presentation of ‘Urgent’ button in the TTR notification
/// DEPRECATED - Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu.
@property (nonatomic) BOOL showUrgentButtonInTTRNotification SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu");
/// Opacity level of TTR  banner background (values: 0.0 - 1.0).
@property (nonatomic) double ttrBannerOpacityAlpha SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="instead of using opacity alpha, use supported light/dark colors on 'ttrBannerBackgroundColor' and 'ttrBannerTextColor'");
/// Custom button image. This will be displayed on the navigation bar.
@property (nonatomic, copy) NSString * _Nonnull customButtonIconName SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonImage instead");
/// DEPRECATED - use customButtonAccessibilityDescription key in Localization languages files instead
/// Accessibility voiceover string for the custom button.
@property (nonatomic, copy) NSString * _Nonnull customButtonDescription SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use customButtonAccessibilityDescription key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextDistributed SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextDistributed key in Localization languages files instead");
/// DEPRECATED - use readReceiptTextSent key in Localization languages files instead
/// Text for sent indication.
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextSent SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextSent key in Localization languages files instead");
@property (nonatomic, copy) NSString * _Nonnull readReceiptTextRead SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use readReceiptTextRead key in Localization languages files instead");
/// User text underline color.
@property (nonatomic, strong) UIColor * _Nonnull editTextUnderlineColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="underline is not used any more. To change background color of TextView container use inputTextViewContainerBackgroundColor");
/// DEPRECATED - Color of checkmark indication signs of Read messages
/// Use checkmarkReadColor instead.
@property (nonatomic, strong) UIColor * _Nonnull checkmarkColor SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="use checkmarkReadColor instead");
/// Allow URL Protocol sniffing via the use of HTTP request with URLSession shared instance. NOTE: When setting this configuration TRUE - Cert Pinning option will be disabled!
@property (nonatomic) BOOL allowURLProtocolSniffing;
/// LivePerson enviornment account is set to .production, .alpha, or .qa
@property (nonatomic) enum LPAccountEnviroment accountEnvironment;
/// CSDS Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull csdsDomain;
/// lpTag Domain URL.  For brands that need to control the URL that is the gateway for LivePerson services, use this key to set a URL of your choice.
@property (nonatomic, copy) NSString * _Nonnull lpTagDomain;
/// The maximum height of the input text field in pixels. Default is 100 pixels.
/// Cannot be smaller than 50 pixels.
@property (nonatomic) CGFloat inputTextViewMaxHeight;
/// LPConfig is a singletone class,
/// When defaultConfiguration is called it initializes the LPConfig
/// and returns its object with default values.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LPConfig * _Nonnull defaultConfiguration;)
+ (LPConfig * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultConfiguration:(LPConfig * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Calling this will reset the configurations to default values… not all values will be updated based on how the respective managers are instantiated.
- (void)resetToDefaultConfiguration;
/// Fallback in case setValueForKey failed. This method is necessary as the host app might call a deprecated value which will cause an NSUnknownKeyException if this method is not implemented.
/// \param value The value of the unknown key
///
/// \param key The key which wasn’t found in LPConfig
///
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
/// Prints all the configurations keys of the SDK.
+ (void)printAllConfigurations;
@end

typedef SWIFT_ENUM(NSInteger, LPConversationCloseReason, open) {
  LPConversationCloseReasonAgent = 0,
  LPConversationCloseReasonConsumer = 1,
  LPConversationCloseReasonSystem = 2,
};

enum LPConversationsHistoryStateToDisplay : NSInteger;
enum LPConversationHistoryMaxDaysDateType : NSInteger;

SWIFT_CLASS("_TtC14LPMessagingSDK33LPConversationHistoryControlParam")
@interface LPConversationHistoryControlParam : NSObject
@property (nonatomic) NSInteger historyConversationsMaxDays;
@property (nonatomic) enum LPConversationsHistoryStateToDisplay historyConversationsStateToDisplay;
@property (nonatomic) enum LPConversationHistoryMaxDaysDateType historyConversationMaxDaysType;
@property (nonatomic, readonly) BOOL isEnable;
- (nonnull instancetype)initWithHistoryConversationsStateToDisplay:(enum LPConversationsHistoryStateToDisplay)historyConversationsStateToDisplay historyConversationsMaxDays:(NSInteger)historyConversationsMaxDays historyMaxDaysType:(enum LPConversationHistoryMaxDaysDateType)historyMaxDaysType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqualsTo:(LPConversationHistoryControlParam * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control if filter the max dayes by conversation start date or by conversation close date
typedef SWIFT_ENUM(NSInteger, LPConversationHistoryMaxDaysDateType, open) {
  LPConversationHistoryMaxDaysDateTypeStartConversationDate = 0,
  LPConversationHistoryMaxDaysDateTypeEndConversationDate = 1,
};

enum ScrollPosition : NSInteger;

SWIFT_CLASS("_TtC14LPMessagingSDK33LPConversationScrollConfiguration")
@interface LPConversationScrollConfiguration : NSObject
/// scenario when the SDK conversation is shown
@property (nonatomic) enum ScrollPosition showConversation;
/// scenario when the application goes from background to foreground state
@property (nonatomic) enum ScrollPosition backgroundToForeground;
/// scenario when the SDK scroll to bottom button is pressed
@property (nonatomic) enum ScrollPosition scrollToBottomButtonPressed;
/// scenario when a push notification is tapped.
/// note:
/// This requires the call <code>LPMessagingSDK.instance.setPushNotificationTapped()</code> immediately after it is determine that a push notification was tapped.
@property (nonatomic) enum ScrollPosition pushNotificationTapped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ScrollPosition, open) {
/// scroll to the bottom of the conversation
  ScrollPositionBottom = 0,
/// scroll to the last known position. If none found, scrolls to bottom of conversation.
  ScrollPositionLastPosition = 1,
/// scroll to the first unread message. If none found, scrolls to bottom of conversation.
  ScrollPositionFirstUnreadMessage = 2,
};

@class UIViewController;
@class LPWelcomeMessage;

/// <h1>LPConversationViewParams</h1>
/// Represents an object to determine on conversation mode, filter and container. Such as Container or Window or if ViewOnly.
SWIFT_CLASS("_TtC14LPMessagingSDK24LPConversationViewParams")
@interface LPConversationViewParams : NSObject
@property (nonatomic, strong) id <ConversationParamProtocol> _Nonnull conversationQuery;
@property (nonatomic, strong) UIViewController * _Nullable containerViewController;
@property (nonatomic, readonly) BOOL isViewOnly;
@property (nonatomic, readonly, strong) LPConversationHistoryControlParam * _Nonnull conversationHistoryControlParam;
@property (nonatomic, strong) LPWelcomeMessage * _Nonnull welcomeMessage;
/// <h1>LPConversationViewParams</h1>
/// \param conversationQuery Type ConversationParamProtocol which ties this object to the brand.
///
/// \param containerViewController Type UIViewController used as a reference if embedding the view.
///
/// \param isViewOnly Bool is the request pertaining to obtaining a single view (true) to embed or a whole view stack (false).
///
/// \param conversationHistoryControlParam LPConversationHistoryControlParam object related to displaying history within a conversation.
///
/// \param welcomeMessage LPWelcome object related to welcome message at the start of the conversation.
///
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam welcomeMessage:(LPWelcomeMessage * _Nonnull)welcomeMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery containerViewController:(UIViewController * _Nullable)containerViewController isViewOnly:(BOOL)isViewOnly conversationHistoryControlParam:(LPConversationHistoryControlParam * _Nonnull)conversationHistoryControlParam OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,deprecated=12.0.0,obsoleted=14.0.0,message="Use public init(conversationQuery: ConversationParamProtocol, containerViewController: UIViewController? = nil, isViewOnly: Bool = false, conversationHistoryControlParam: LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .none), welcomeMessage: LPWelcomeMessage = LPWelcomeMessage(message: nil)) instead");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// control what kind of conversation to show
typedef SWIFT_ENUM(NSInteger, LPConversationsHistoryStateToDisplay, open) {
  LPConversationsHistoryStateToDisplayOpen = 0,
  LPConversationsHistoryStateToDisplayClose = 1,
  LPConversationsHistoryStateToDisplayAll = 2,
};


SWIFT_CLASS("_TtC14LPMessagingSDK12LPDatePicker")
@interface LPDatePicker : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriding Super to help layout components
- (void)setNeedsLayout;
@end










SWIFT_CLASS("_TtC14LPMessagingSDK19LPEngagementDetails")
@interface LPEngagementDetails : NSObject
@property (nonatomic, readonly) NSInteger campaignId;
@property (nonatomic, readonly) NSInteger engagementId;
@property (nonatomic, readonly) NSInteger connectorId;
@property (nonatomic, readonly) NSInteger engagementRevision;
@property (nonatomic, copy) NSString * _Nullable conversationId;
@property (nonatomic, copy) NSString * _Nullable status;
@property (nonatomic, copy) NSString * _Nullable contextId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Base class for file metadata container attribute
SWIFT_CLASS("_TtC14LPMessagingSDK23LPFileMetaDataContainer")
@interface LPFileMetaDataContainer : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK23LPGetEngagementResponse")
@interface LPGetEngagementResponse : NSObject
@property (nonatomic, copy) NSArray<LPEngagementDetails *> * _Nullable engagementDetails;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable visitorId;
@property (nonatomic, copy) NSString * _Nullable pageId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// All SDK supported languages
/// The enum contains general languages and specific if exists.
/// For example: Portuguese from ‘pt’ folder will be used for all regions when the language is Portuguese. Portuguese from ‘pt-PT’ folder will be used for Portugal region only when the language is Portuguese (Portugal)
typedef SWIFT_ENUM(NSInteger, LPLanguage, open) {
  LPLanguageDevice = 0,
  LPLanguageEn = 1,
  LPLanguageEn_GB = 2,
  LPLanguagePt = 3,
  LPLanguagePt_PT = 4,
  LPLanguageFr = 5,
  LPLanguageAr = 6,
  LPLanguageBg = 7,
  LPLanguageCs = 8,
  LPLanguageDa = 9,
  LPLanguageSr = 10,
  LPLanguageDe = 11,
  LPLanguageEl = 12,
  LPLanguageHe = 13,
  LPLanguageHe_IL = 14,
  LPLanguageEs = 15,
  LPLanguageEs_419 = 16,
  LPLanguageEt = 17,
  LPLanguageFi = 18,
  LPLanguageFr_CA = 19,
  LPLanguageHi = 20,
  LPLanguageHr = 21,
  LPLanguageHu = 22,
  LPLanguageId = 23,
  LPLanguageIt = 24,
  LPLanguageJa = 25,
  LPLanguageKo = 26,
  LPLanguageLt = 27,
  LPLanguageLv = 28,
  LPLanguageMk = 29,
  LPLanguageMs_MY = 30,
  LPLanguageNb = 31,
  LPLanguageNl = 32,
  LPLanguagePl = 33,
  LPLanguageRo = 34,
  LPLanguageRu = 35,
  LPLanguageSl = 36,
  LPLanguageSk = 37,
  LPLanguageSv = 38,
  LPLanguageTh = 39,
  LPLanguageTr = 40,
  LPLanguageUk = 41,
  LPLanguageVi = 42,
  LPLanguageZh = 43,
  LPLanguageZh_Hans = 44,
  LPLanguageZh_Hant_hk = 45,
};

/// The various levels of logging.  Each case encapsulates the logging above.
typedef SWIFT_ENUM(NSInteger, LPLoggingLevel, open) {
  LPLoggingLevelOFF = 0,
  LPLoggingLevelERROR = 1,
  LPLoggingLevelWARNING = 2,
  LPLoggingLevelINFO = 3,
  LPLoggingLevelDEBUG = 4,
  LPLoggingLevelTRACE = 5,
};

@protocol LPMessagingSDKdelegate;
@protocol LPMessagingSDKNotificationDelegate;
@class LPMonitoringInitParams;
@class UIBarButtonItem;
@class LPUser;
@class LPMonitoringIdentity;
@class LPMonitoringParams;
@class LPSendSDEResponse;
@class LPNotification;

SWIFT_CLASS("_TtC14LPMessagingSDK11LPMessaging")
@interface LPMessaging : NSObject
@property (nonatomic, weak) id <LPMessagingSDKdelegate> _Nullable delegate;
@property (nonatomic, weak) id <LPMessagingSDKNotificationDelegate> _Nullable notificationDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LPMessaging * _Nonnull instance;)
+ (LPMessaging * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK and all of its components.
/// Optional parameters:
/// <brandID> of the host app.
/// This method throws an error/return false with with an error, in case the initialization failed.
- (BOOL)initialize:(NSString * _Nullable)brandID monitoringInitParams:(LPMonitoringInitParams * _Nullable)monitoringInitParams error:(NSError * _Nullable * _Nullable)error;
/// Show conversation view for conversation query.
/// This method starts the conversation and show all the existing messages it exist.
/// Optional parameters:
/// <authenticationCode> to use an an authenticated users.
/// <containerViewController> the containter which presents the conversation view as a child View Controller.
/// DEPRECATED - Use showConversation(_ conversationViewParams: LPConversationViewParams) instead
- (void)showConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationCode:(NSString * _Nullable)authenticationCode containerViewController:(UIViewController * _Nullable)containerViewController SWIFT_AVAILABILITY(ios,deprecated=9.3.5,obsoleted=14.0.0,message="Use showConversation(_ conversationViewParams: LPConversationViewParams) instead");
/// Show Conversation view and starts the conversation and show all the existing messages it exist.
/// \param conversationViewParams an LPConversationViewParams object to determine the properties of the views. Such as Container or Window or if ViewOnly.
///
/// \param authenticationParams an optional LPAuthenticationParams object to determine the properties of an authenticated connection. If using authenticate connection, this paramater must
/// be passed. LPAuthenticationParams supports Code Flow login or Implicit Flow login.
///
- (void)showConversation:(LPConversationViewParams * _Nonnull)conversationViewParams authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams;
/// Remove conversation view for conversation query from its container or window view.
/// This method ends the conversation’s connection.
- (void)removeConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// This method reconnects the conversation’s connection for conversation query.
/// Reconnect open related webSockets and sync the converstion with its latest updates.
/// Additional parameters:
/// <authenticationCode> to use an an authenticated users.
- (void)reconnect:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationCode:(NSString * _Nonnull)authenticationCode SWIFT_AVAILABILITY(ios,deprecated=9.3.5,obsoleted=14.0.0,message="Use reconnect(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams) instead");
/// This method reconnects the conversation’s connection for conversation query.
/// Reconnect open related webSockets and sync the converstion with its latest updates.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     conversationQuery: conversationQuery of ConversationParamProtocol
///   </li>
///   <li>
///     authenticationParams: an LPAuthenticationParams object to determine the properties of an authenticated connection. LPAuthenticationParams supports Code Flow login or Implicit Flow login.
///   </li>
/// </ul>
- (void)reconnect:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationParams:(LPAuthenticationParams * _Nonnull)authenticationParams;
/// This method changes the state of the action menu of the conversation for brandID.
- (void)toggleChatActions:(NSString * _Nonnull)accountID sender:(UIBarButtonItem * _Nullable)sender;
/// This method sets user details for the consumer of a brand.
/// The user object is in Type of LPUser which includes all the user details.
/// Additional parameters:
/// <brandID> is the brand of the related user.
/// If the SDK is not connected, it’ll save the last user for each brand, until connected.
- (void)setUserProfile:(LPUser * _Nonnull)lpuser brandID:(NSString * _Nonnull)brandID;
/// This method created ConversationParamProtocol of Brand query type.
/// ConversationParamProtocol represents a ’filter’ for the conversation screen, determining which of the conversations will be displayed in the following screens.
/// \param brandID brandID to request the conversation query for
///
/// \param campaignInfo an optional campaign info (LPCampaignInfo) to use advanced routing for the consumer. This object based on campaignID and engagementID
///
///
/// returns:
/// a new ConversationParamProtocol by type of BrandQuery
- (id <ConversationParamProtocol> _Nonnull)getConversationBrandQuery:(NSString * _Nonnull)brandID campaignInfo:(LPCampaignInfo * _Nullable)campaignInfo SWIFT_WARN_UNUSED_RESULT;
/// This method created ConversationParamProtocol of Consumer and Skill query type.
/// ConversationParamProtocol represents a ’filter’ for the conversation screen, determining which of the conversations will be displayed in the following screens.
/// \param consumerID consumerID to request the conversation query for
///
/// \param brandID brandID to request the conversation query for
///
/// \param agentToken a unique token for agent aka Agent Bearer
///
///
/// returns:
/// a new ConversationParamProtocol by type of ConsumerQuery
- (id <ConversationParamProtocol> _Nonnull)getConversationConsumerQuery:(NSString * _Nullable)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken SWIFT_WARN_UNUSED_RESULT;
/// This method checks for an active(Open/Created) conversation according to conversation query.
/// Return value:
/// True - there is an active conversation.
/// False - there is no active conversation.
- (BOOL)checkActiveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// DEPRECATED - This method sets a custom image for the custom button in the conversation navigationBar.
/// Use customButtonImage instead
- (void)setCustomButton:(UIImage * _Nullable)image SWIFT_AVAILABILITY(ios,deprecated=9.3.5,obsoleted=14.0.0,message="configure the image using customButtonImage in LPConfig instead");
/// This method checks if the active conversation of a conversation query marked as Urgent.
/// Return value:
/// True - conversation is marked as Urgent.
/// False - conversation is not marked as Urgent.
- (BOOL)isUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// This method marks the active conversation of a conversation query as Urgent.
- (void)markAsUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// This method dismisses the active conversation from Urgent to Normal.
- (void)dismissUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// This method ends the active conversation if exists.
- (void)resolveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
/// This methods returns the assigned agent of the active or the latest closed conversation, if exists.
- (LPUser * _Nullable)getAssignedAgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// This method determines wether a brandID is Ready.
/// Ready means that the brand is connected and conversation can be proccessed.
- (BOOL)isBrandReady:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
/// This method returns the SDK version.
- (NSString * _Nullable)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Appends content to the message text field
/// \param text Text to append
///
- (void)addContentToMessageWithText:(NSString * _Nonnull)text;
/// Get Inactive time interval in seconds of the user last touch on screen. This interval applies to scroll/messaging/action menus and any other general action on the conversation screen.
/// If the screen is not active or the application is in background this api will return -1.
///
/// returns:
/// Inactive TimeInterval (Double)
- (NSTimeInterval)getInactiveUserInteractionTimeInterval:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_WARN_UNUSED_RESULT;
/// Use this API to get an engagement for a consumer in an appInstallationId context. When calculating eligibility the decision is based on the SDEs and other parameters. Based on messaging campaign concept.
/// As an optional parameter, you can pass SDE Data which includes Entry Points and Engagement Attributes for routing the conversation.
/// \param identities Mandatory array of identity objects of type LPMonitoringIdentity which includes the details on the consumer and issuer
///
/// \param monitoringParams an instance of includes optional Array of Entry Points and an optional dictionary of Engagement Attributes
///
/// \param completion completion block with response of type LPGetEngagementResponse. This response includes sessionID and visitorID along with LPEngagementDetails object.
///
/// \param failure failure block with an error in case the request fails
///
- (void)getEngagementWithIdentities:(NSArray<LPMonitoringIdentity *> * _Nonnull)identities monitoringParams:(LPMonitoringParams * _Nullable)monitoringParams completion:(void (^ _Nonnull)(LPGetEngagementResponse * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Allows for manually setting the AuthenticationParams for a consumer seperate from any individual SDK API.
/// <ul>
///   <li>
///     Discussion: This is useful when we need to establish consumer related information early in a particular user flow.. for example setting up certificate pins before calling getEngagement.
///   </li>
/// </ul>
/// \param authenticationParams The LPAuthentication Parmas for the Consumer.
///
/// \param brandId The brands account number
///
- (void)setAuthenticationParamsWithAuthenticationParams:(LPAuthenticationParams * _Nonnull)authenticationParams brandID:(NSString * _Nonnull)brandID;
/// Use this API to report an engagement attributes (SDEs) for a consumer in an appInstallationId context including show and accept impression.
/// \param identities Mandatory array of identity objects of type LPMonitoringIdentity which includes the details on the consumer and issuer
///
/// \param monitoringParams an instance of LPMonitoringParams includes optional Array of Entry Points and an optional dictionary of Engagement Attributes. Additional optional parameter is PageID which is used for Page identification for sending events on the current engagement. PageID will be received in LPSendSDEResponse and in LPGetEngagementResponse
///
/// \param completion completion block with response of type LPSendSDEResponse. This response includes sessionID and visitorID and pageID for future use.
///
/// \param failure failure block with an error in case the request fails
///
- (void)sendSDEWithIdentities:(NSArray<LPMonitoringIdentity *> * _Nonnull)identities monitoringParams:(LPMonitoringParams * _Nonnull)monitoringParams completion:(void (^ _Nonnull)(LPSendSDEResponse * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Will handle the case when Consumer taps an In App Notification that contains a Proactive Engagement
/// \param notification LPNotification
///
- (void)handleTapForInAppNotificationWithNotification:(LPNotification * _Nonnull)notification;
/// This method deletes all the messages and closed conversation of the related conversation query.
/// This method throws an error if the conversations history failed to cleared.
/// Note: clear history is allowed only if there is no open/active conversation related to the passed conversation query.
- (BOOL)clearHistory:(id <ConversationParamProtocol> _Nonnull)conversationQuery error:(NSError * _Nullable * _Nullable)error;
/// Prints all localized string’s keys
- (void)printAllLocalizedKeys;
/// Prints the SDK supported languages
- (void)printSupportedLanguages;
/// Prints the SDK supported regions
- (void)printSupportedRegions;
/// Get all supported languages as Strings dictionary where:
///
/// returns:
/// [lang : langName]
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Get all supported regions as Strings dictionary where:
///
/// returns:
/// [region : regionName]
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllSupportedRegions SWIFT_WARN_UNUSED_RESULT;
/// Notifies the SDK that a push notification was tapped.
/// This method should be called immediately after the host app has determined that a notification was tapped.
/// For scroll behavior on push notification tapped, see LPConfig.conversationScrollConfiguration
- (void)setPushNotificationTapped;
/// Setter for the logging level of console logs produced by LPMessaging iOS SDK.
/// <ul>
///   <li>
///     Info: The default value for release mode is .INFO and for debug is .TRACE.  Apps should not log lower than .INFO in release configurations.
///   </li>
///   <li>
///     Discussion: This will be replacing the previous functionality via LogsManager.
///   </li>
/// </ul>
/// \param level The level of logging options in order: (.TRACE, .DEBUG, .INFO, .WARNING, .ERROR, .OFF)
///
- (void)setLoggingLevelWithLevel:(enum LPLoggingLevel)level;
/// The mechanism to retrieve LPMessagingIOS SDK logs in an array of Strings
/// <ul>
///   <li>
///     Info: The logger only records the last 100 logs total, filtering by log level may reduce the number of logs returned.
///   </li>
///   <li>
///     Discussion: This will be replacing the previous functionality via LogsManager.  The log history does not adhere to the logging level filter.  The log history records all log levels.  You can filter the logs returned by using the ‘level’ parameter in the same way you can filter the logging level. However be aware log snapshot and logging level work independently.
///   </li>
/// </ul>
/// \param level The filtering level of logging options in the following order: (.TRACE, .DEBUG, .INFO, .WARNING, .ERROR, .OFF)
///
///
/// returns:
/// An array of strings consisting of up to the last 100 logs based on the log level.
- (NSArray<NSString *> * _Nonnull)getLogSnapshotWithLevel:(enum LPLoggingLevel)level SWIFT_WARN_UNUSED_RESULT;
/// The mechanism to retrieve LPMessagingIOS SDK logs in a single String block.
/// <ul>
///   <li>
///     Info: The logger only records the last 100 logs total, filtering by log level may reduce the number of logs returned.
///   </li>
///   <li>
///     Discussion: This will be replacing the previous functionality via LogsManager.  The log history does not adhere to the logging level filter.  The log history records all log levels.  You can filter the logs returned by using the ‘level’ parameter in the same way you can filter the logging level. However be aware log snapshot and logging level work independently.
///   </li>
/// </ul>
/// \param level The level of logging options in order: (.TRACE, .DEBUG, .INFO, .WARNING, .ERROR, .OFF)
///
///
/// returns:
/// An array of strings consisting of up to the last 100 logs based on the log level.
- (NSString * _Nonnull)getLogStringBlockWithLevel:(enum LPLoggingLevel)level SWIFT_WARN_UNUSED_RESULT;
/// Should masking PII be enabled for the logging
/// <ul>
///   <li>
///     Info: This is enabled by default for Release builds.
///   </li>
/// </ul>
/// \param enabled Is masking PII enabled for the logs.
///
- (void)setDataMaskingEnabledWithEnabled:(BOOL)enabled;
+ (void)resolveConversation:(id <Conversation> _Nonnull)conversation SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversation(_ conversation: Conversation, completion: (() -> Void)? = {()}) instead");
+ (void)resolveConversationForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery SWIFT_AVAILABILITY(ios,deprecated=12.1.4,obsoleted=14.0.0,message="Use resolveConversationForConversationQuery(_ conversationQuery: ConversationParamProtocol, completion: (() -> Void)? = {()}) instead");
/// Creates welcome local system message for dialog
+ (id <Message> _Nullable)createWelcomeLocalMessage:(id <Dialog> _Nonnull)dialog overrideTime:(NSDate * _Nonnull)overrideTime SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=12.2.0,obsoleted=14.0.0,message="Use createWelcomeLocalMessage(_ dialog: Dialog, welcomeMessage: LPWelcomeMessage, overrideTime: Date = Date()) -> Message? instead");
/// Unregister pusher.
/// Before unregistering the Pusher, we make sure we have the following params:
/// param: Consumer UserID
/// param: CSDS Domain for Pusher
/// param: Account (brand account)
/// When all params available - perform unregister
+ (void)unregisterPusher:(id <Brand> _Nonnull)brand completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=12.1.0,obsoleted=14.0.0,message="Use unregisterPusherFor(_ brandId: String) instead");
- (void)getEngagementWithConsumerID:(NSString * _Nullable)consumerID monitoringParams:(LPMonitoringParams * _Nullable)monitoringParams completion:(void (^ _Nonnull)(LPGetEngagementResponse * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=11.4.0,obsoleted=14.0.0,message="Use getEngagement(identity: LPMonitoringIdentity, monitoringParams: LPMonitoringParams?, completion: @escaping (_ response: LPGetEngagementResponse)->(), failure: @escaping (_ error: NSError)->()) instead");
- (void)sendSDEWithConsumerID:(NSString * _Nonnull)consumerID monitoringParams:(LPMonitoringParams * _Nonnull)monitoringParams completion:(void (^ _Nonnull)(LPSendSDEResponse * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=11.4.0,obsoleted=14.0.0,message="Use sendSDE(identity: LPMonitoringIdentity, monitoringParams: LPMonitoringParams, completion: @escaping (_ response: LPSendSDEResponse)->(), failure: @escaping (_ error: NSError)->()) instead");
@end



enum LPPusherUnregisterType : NSInteger;

@interface LPMessaging (SWIFT_EXTENSION(LPMessagingSDK))
/// This method is a destructive method that is typically used stop and clear all the metadata of the SDK.
/// This method conducts the following:
/// Clears all SDK non-persistent data.
/// Stops all connections.
/// Remove Conversation View Controller
- (void)destruct;
/// This method is a destructive method that is typically used to clean a user’s data before a second user logs into the same device or just to logs the current user out.
/// This method conducts the following:
/// Unregisters from the push notification service.
/// Clears all SDK persistent data.
/// Cleans running operations (see <a href="consumer-experience-ios-sdk-destruct.html">destruct</a>{:target=”<em>blank”}).
/// Invocation of destruct() method
/// DEPRECATED - Use logout(completion: @escaping ()->(), failure: @escaping (</em> error: Error)->()) instead
- (void)logout SWIFT_AVAILABILITY(ios,deprecated=9.3.5,obsoleted=14.0.0,message="Use logout(completion: @escaping ()->(), failure: @escaping (_ error: Error)->()) instead");
/// This method is a destructive method that is typically used to clean a user’s data before a second user logs into the same device or just to logs the current user out.
/// This method conducts the following:
/// Unregisters from the push notification service.
/// Clears all SDK persistent data.
/// Cleans running operations (see <a href="consumer-experience-ios-sdk-destruct.html">destruct</a>{:target=”_blank”}).
/// Invocation of destruct() method
/// note:
/// this method should be called before any persistent clean up tasks are performed on host app
/// \param completion A completion block for successfully logout. Completion block will be invoked only if all logout steps succeeded.
///
/// \param failure A failure block with a list of errors that were encountered during logout process.
///
- (void)logoutWithCompletion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSArray<NSError *> * _Nonnull))failure SWIFT_AVAILABILITY(ios,deprecated=14.0,obsoleted=15.0.0,message="Use logout(unregisterType: LPPusherUnregisterType, completion: @escaping ()->(), failure: @escaping (_ error: Error)->()) instead");
/// This method is a destructive method that is typically used to clean a user’s data before a second user logs into the same device or just to logs the current user out.
/// This method conducts the following:
/// Unregisters from the push notification service depending on the option provided.
/// Clears all SDK persistent data.
/// Cleans running operations (see <a href="consumer-experience-ios-sdk-destruct.html">destruct</a>{:target=”_blank”}).
/// Invocation of destruct() method
/// note:
/// this method should be called before any persistent clean up tasks are performed on host app
/// \param unregisterType LPPusherUnregisterType
///
/// \param completion A completion block for successfully logout. Completion block will be invoked only if all logout steps succeeded.
///
/// \param failure A failure block with a list of errors that were encountered during logout process.
///
- (void)logoutWithUnregisterType:(enum LPPusherUnregisterType)unregisterType completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSArray<NSError *> * _Nonnull))failure;
@end


@interface LPMessaging (SWIFT_EXTENSION(LPMessagingSDK))
/// This method registers the host app in the SDK Pusher service in order to be able to receive push notification in messaging.
/// note:
/// If passing authentication params, this method will register immediately to Pusher, the registration will be performed when calling showConversation
/// \param token push device token data
///
/// \param notificationDelegate implementer of LPMessagingSDKNotificationDelegate.
///
/// \param alternateBundleID a value for using in order to let the Pusher service to identify the host app with this bundle identifier
///
/// \param authenticationParams an optional authentication param (LPAuthenticationParams) to be used for immediate Pusher registration
///
- (void)registerPushNotificationsWithToken:(NSData * _Nonnull)token notificationDelegate:(id <LPMessagingSDKNotificationDelegate> _Nullable)notificationDelegate alternateBundleID:(NSString * _Nullable)alternateBundleID authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams;
/// This method registers Voip the host app to SDK Pusher service
/// \param token push device token data
///
/// \param alternateBundleID a value for using in order to let the Pusher service to identify the host app with this bundle identifier
///
- (void)registerVoipPushNotificationsWithToken:(NSData * _Nonnull)token alternateBundleID:(NSString * _Nullable)alternateBundleID;
/// This method unregisters the host app from SDK Pusher service
/// \param brandId brand/account Identifier
///
/// \param unregisterType Unregister Type
///
- (void)unregisterPusherWithBrandId:(NSString * _Nonnull)brandId unregisterType:(enum LPPusherUnregisterType)unregisterType completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Set token for Pusher service in order to be able to receive remote push notifications
/// \param token Data
///
/// \param alternateBundleID String? a custom bundle ID for Pusher with for the token
///
+ (void)setPusherTokenWithToken:(NSData * _Nonnull)token alternateBundleID:(NSString * _Nullable)alternateBundleID;
/// Set token for VoIP Pusher service in order to be able to receive remote calls
/// \param token Data
///
/// \param alternateBundleID String? a custom bundle ID for Pusher with for the token
///
+ (void)setPusherVoipTokenWithToken:(NSData * _Nonnull)token alternateBundleID:(NSString * _Nullable)alternateBundleID;
/// Get unread message badge counter
/// There are two options to get this counter:
/// <ol>
///   <li>
///     If the time condition is met we are prefoming a REST request to get it from pusher
///   </li>
///   <li>
///     otherwise, return the cached number we have
///   </li>
/// </ol>
/// note:
/// this method requires the user to accept/allow push notifications (dependancy of pusher)
/// \param conversationQuery conversationQuery: used to identify the related brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessagesCount:(id <ConversationParamProtocol> _Nonnull)conversationQuery completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_MSG("Use public func getUnreadMessagesCount(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams? = nil, completion: @escaping (_ badgeCounter: Int) -> (), failure: @escaping (_ error: Error) -> ())");
/// Get unread message badge counter
/// \param brandID the account number for the brand
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
+ (void)getUnreadMessagesCountWithBrandID:(NSString * _Nonnull)brandID completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure SWIFT_DEPRECATED_MSG("Use public func getUnreadMessagesCount(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams? = nil, completion: @escaping (_ badgeCounter: Int) -> (), failure: @escaping (_ error: Error) -> ())");
/// Get unread message badge counter from Pusher
/// note:
/// If passing authentication params, this method will use this authentication go get UnreadCount else will try to use cached one if any is found
/// \param conversationQuery conversationQuery: used to identify the related brand
///
/// \param authenticationParams an optional authentication param (LPAuthenticationParams) to be used as authentication
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation failed
///
- (void)getUnreadMessagesCount:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams completion:(void (^ _Nonnull)(NSInteger))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// Gets users registration status on the Pusher Server
/// \param conversationQuery used to identify the related brand
///
/// \param authenticationParams an optional authentication param (LPAuthenticationParams) to be used as authentication
///
/// \param token device push notification token
///
/// \param alternateBundleID custom bundle ID for Pusher
///
/// \param completion called once the operation ends sucessfully
///
/// \param failure called once the operation fails
///
/// \param isRegistered Boolean contaning flag if user is registered on Pusher
///
/// \param error corresponding error
///
- (void)isRegisteredForPushNotifications:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationParams:(LPAuthenticationParams * _Nullable)authenticationParams token:(NSData * _Nonnull)token alternateBundleID:(NSString * _Nullable)alternateBundleID completion:(void (^ _Nonnull)(BOOL))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
/// This method passes a user info of a remote push notification to be handled by the SDK.
/// \param userInfo Dictionary
///
- (void)handlePush:(NSDictionary * _Nonnull)userInfo;
@end

/// ENUM to list major features to control from config.
/// <ul>
///   <li>
///     userFileSharing: Enable sharing files from consumer to agent. (photo and files)
///   </li>
///   <li>
///     audioSharing: Enable sharing audio from consumer to agent.
///   </li>
///   <li>
///     agentFileSharing: Allow sending files from agent to consumer. (photo and files)
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, LPMessagingSDKFeature, open) {
  LPMessagingSDKFeatureUserFileSharing = 0,
  LPMessagingSDKFeatureAudioSharing = 1,
  LPMessagingSDKFeatureAgentFileSharing = 2,
};


SWIFT_PROTOCOL("_TtP14LPMessagingSDK34LPMessagingSDKNotificationDelegate_")
@protocol LPMessagingSDKNotificationDelegate
@optional
- (void)LPMessagingSDKNotificationWithDidReceivePushNotification:(LPNotification * _Nonnull)notification;
- (BOOL)LPMessagingSDKNotificationWithShouldShowPushNotification:(LPNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)LPMessagingSDKNotificationWithCustomLocalPushNotificationView:(LPNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
- (void)LPMessagingSDKNotificationWithNotificationTapped:(LPNotification * _Nonnull)notification;
@end

enum LPPermissionTypes : NSInteger;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK22LPMessagingSDKdelegate_")
@protocol LPMessagingSDKdelegate
@optional
- (void)LPMessagingSDKCustomButtonTapped;
- (void)LPMessagingSDKAgentDetails:(LPUser * _Nullable)agent;
- (void)LPMessagingSDKAgentAvatarTapped:(LPUser * _Nullable)agent;
- (void)LPMessagingSDKActionsMenuToggled:(BOOL)toggled;
- (void)LPMessagingSDKHasConnectionError:(NSString * _Nullable)error;
- (void)LPMessagingSDKCSATScoreSubmissionDidFinish:(NSString * _Nonnull)brandID rating:(NSInteger)rating;
- (UIView * _Nonnull)LPMessagingSDKCSATCustomTitleView:(NSString * _Nonnull)brandID SWIFT_WARN_UNUSED_RESULT;
- (void)LPMessagingSDKConversationCSATSkipped:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKUserDeniedPermission:(enum LPPermissionTypes)permissionType;
@required
- (void)LPMessagingSDKObseleteVersion:(NSError * _Nonnull)error;
- (void)LPMessagingSDKAuthenticationFailed:(NSError * _Nonnull)error;
- (void)LPMessagingSDKTokenExpired:(NSString * _Nonnull)brandID;
- (void)LPMessagingSDKError:(NSError * _Nonnull)error;
@optional
- (void)LPMessagingSDKConnectionRetriesFailed:(NSError * _Nonnull)error;
- (void)LPMessagingSDKAgentIsTypingStateChanged:(BOOL)isTyping;
- (void)LPMessagingSDKConversationStarted:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKConversationEnded:(NSString * _Nullable)conversationID SWIFT_AVAILABILITY(ios,deprecated=9.3.5,obsoleted=14.0.0,message="use LPMessagingSDKConversationEnded(_:closeReason) instead");
- (void)LPMessagingSDKConversationEnded:(NSString * _Nullable)conversationID closeReason:(enum LPConversationCloseReason)closeReason;
- (void)LPMessagingSDKConversationCSATDismissedOnSubmittion:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKConversationCSATDidLoad:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKConnectionStateChanged:(BOOL)isReady brandID:(NSString * _Nonnull)brandID;
- (void)LPMessagingSDKOffHoursStateChanged:(BOOL)isOffHours brandID:(NSString * _Nonnull)brandID;
- (void)LPMessagingSDKConversationViewControllerDidDismiss;
/// Called when the Cert pinning mechanism failed. The server trust was successfully evaluated but did not contain any of the configured public keys pins. or The server trust’s evaluation failed: the server’s certificate chain is not trusted.
/// \param error failure error reason
///
- (void)LPMessagingSDKCertPinningFailed:(NSError * _Nonnull)error;
/// Called the SDK registration for  LP Pusher service has been succeeded.
/// Pusher is the service that responsible for Remote Push Notifications routing and delivering from and to APNS.
- (void)LPMessagingSDKPushRegistrationDidFinish;
/// Called when the SDK registration for LP Pusher service has been failed with error.
/// Pusher is the service that responsible for Remote Push Notifications routing and delivering from and to APNS.
/// \param error failure error reason
///
- (void)LPMessagingSDKPushRegistrationDidFail:(NSError * _Nonnull)error;
/// Called when an Unauthenticated user expired and can no longer be in used.
/// When this callback is invoked, the previous open conversation will be closed locally.
- (void)LPMessagingSDKUnauthenticatedUserExpired;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK23LPMonitoringDataManager")
@interface LPMonitoringDataManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This object contains details about the consumer to LiveEngage.   LPMonitoringIdentity is used to get an Engagement or an SDE to LiveEngage.
/// -Version 3.2.0
SWIFT_CLASS("_TtC14LPMessagingSDK20LPMonitoringIdentity")
@interface LPMonitoringIdentity : NSObject
/// Init LPMonitoringInitParams with mandatory params
/// \param appInstallID App Install ID of the Mobile Campaign of the Brand
///
- (nonnull instancetype)initWithConsumerID:(NSString * _Nullable)consumerID issuer:(NSString * _Nullable)issuer OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <h1>LPMonitoringInitParams</h1>
/// An initialization parameter of type LPMonitoringInitParams. This object contains all relevant parameters for initialization of the SDK for an account, including app install id.
/// note:
/// App install ID or ‘appInstallId’ is generated when setting up LiveEngage Site for Unauthenticated messaging. Please see Support for more details.
SWIFT_CLASS("_TtC14LPMessagingSDK22LPMonitoringInitParams")
@interface LPMonitoringInitParams : NSObject
/// Init LPMonitoringInitParams with mandatory params
/// \param appInstallID App Install ID of the Mobile Campaign of the Brand
///
- (nonnull instancetype)initWithAppInstallID:(NSString * _Nonnull)appInstallID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <h1>LPMonitoringParams</h1>
/// An array of information passed from the SDK to LiveEngage used to obtain an Engagement or to send an SDE.
/// <ul>
///   <li>
///     Version 3.2.0
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14LPMessagingSDK18LPMonitoringParams")
@interface LPMonitoringParams : NSObject
/// <h2>entryPoints</h2>
/// An array of Strings used to target a particular Engagement in LiveEngage.
/// The following strings must be attached to an Engagement or SDE in LiveEngage site for the entry points to link to the engagement.
/// example1
/// example2
/// test
/// \code
/// entrypoints = ["example1","example2","example2"]
///
///
/// \endcode
@property (nonatomic, copy) NSArray<NSString *> * _Nullable entryPoints;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable engagementAttributes;
@property (nonatomic, copy) NSString * _Nullable pageId;
- (nonnull instancetype)initWithEntryPoints:(NSArray<NSString *> * _Nullable)entryPoints engagementAttributes:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)engagementAttributes pageId:(NSString * _Nullable)pageId OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ProactiveNotificationData;

SWIFT_CLASS("_TtC14LPMessagingSDK14LPNotification")
@interface LPNotification : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, copy) NSString * _Nullable body;
@property (nonatomic, strong) LPUser * _Nonnull user;
@property (nonatomic, copy) NSString * _Nonnull accountID;
@property (nonatomic) BOOL isRemote;
@property (nonatomic, strong) ProactiveNotificationData * _Nullable proActiveData;
@property (nonatomic, readonly, copy) NSString * _Nonnull toString;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text body:(NSString * _Nullable)body firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName uid:(NSString * _Nullable)uid accountID:(NSString * _Nonnull)accountID isRemote:(BOOL)isRemote proActiveData:(ProactiveNotificationData * _Nullable)proActiveData;
- (nonnull instancetype)initWithMessage:(id <Message> _Nonnull)message isRemote:(BOOL)isRemote proActiveData:(ProactiveNotificationData * _Nullable)proActiveData;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text body:(NSString * _Nullable)body user:(LPUser * _Nonnull)user accountID:(NSString * _Nonnull)accountID isRemote:(BOOL)isRemote proActiveData:(ProactiveNotificationData * _Nullable)proActiveData OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK11LPOperation")
@interface LPOperation : NSOperation
@property (nonatomic, getter=isExecuting) BOOL executing;
@property (nonatomic, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (void)start;
- (void)cancel;
@property (nonatomic, readonly, getter=isReady) BOOL ready;
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LPPermissionTypes, open) {
  LPPermissionTypesLocation = 0,
  LPPermissionTypesContacts = 1,
  LPPermissionTypesCalendars = 2,
  LPPermissionTypesReminders = 3,
  LPPermissionTypesPhotos = 4,
  LPPermissionTypesBluetooth = 5,
  LPPermissionTypesMicrophone = 6,
  LPPermissionTypesSpeechRecognition = 7,
  LPPermissionTypesCamera = 8,
  LPPermissionTypesHealth = 9,
  LPPermissionTypesHomekit = 10,
  LPPermissionTypesMediaLibrary = 11,
  LPPermissionTypesMotionAndFitness = 12,
};


SWIFT_CLASS("_TtC14LPMessagingSDK12LPPickerView")
@interface LPPickerView : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPickerView;

@interface LPPickerView (SWIFT_EXTENSION(LPMessagingSDK)) <UIPickerViewDelegate>
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


@interface LPPickerView (SWIFT_EXTENSION(LPMessagingSDK)) <UIPickerViewDataSource>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM(NSInteger, LPPusherUnregisterType, open) {
  LPPusherUnregisterTypeAll = 0,
  LPPusherUnregisterTypeNone = 1,
  LPPusherUnregisterTypeAgent = 2,
};

/// All SDK supported regions
/// The enum contains general regions and specific if exists.
/// For example: Portugal from ‘PT’ folder will be used for all languages when the region  is Portugal. Portuguese from ‘pt-PT’ folder will be used for Portuguese (Portugal) language only when the region in portugal
typedef SWIFT_ENUM(NSInteger, LPRegionCode, open) {
  LPRegionCodeDevice = 0,
  LPRegionCodeUS = 1,
  LPRegionCodeUK = 2,
  LPRegionCodeBR = 3,
  LPRegionCodePT = 4,
  LPRegionCodeFR = 5,
  LPRegionCodeBG = 6,
  LPRegionCodeCZ = 7,
  LPRegionCodeDK = 8,
  LPRegionCodeSP = 9,
  LPRegionCodeDE = 10,
  LPRegionCodeGR = 11,
  LPRegionCodeIL = 12,
  LPRegionCodeES419 = 13,
  LPRegionCodeEE = 14,
  LPRegionCodeFI = 15,
  LPRegionCodeIN = 16,
  LPRegionCodeHR = 17,
  LPRegionCodeHU = 18,
  LPRegionCodeIT = 19,
  LPRegionCodeJP = 20,
  LPRegionCodeKR = 21,
  LPRegionCodeLT = 22,
  LPRegionCodeLV = 23,
  LPRegionCodeMK = 24,
  LPRegionCodeNO = 25,
  LPRegionCodeNL = 26,
  LPRegionCodePL = 27,
  LPRegionCodeRO = 28,
  LPRegionCodeRU = 29,
  LPRegionCodeSI = 30,
  LPRegionCodeSK = 31,
  LPRegionCodeSE = 32,
  LPRegionCodeTH = 33,
  LPRegionCodeTR = 34,
  LPRegionCodeUA = 35,
  LPRegionCodeVN = 36,
  LPRegionCodeTW = 37,
  LPRegionCodeCN = 38,
  LPRegionCodeHK = 39,
};


SWIFT_CLASS("_TtC14LPMessagingSDK17LPSendSDEResponse")
@interface LPSendSDEResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable visitorId;
@property (nonatomic, copy) NSString * _Nullable pageId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK19LPStructuredContent")
@interface LPStructuredContent : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end







@class UIGestureRecognizer;

@interface LPStructuredContent (SWIFT_EXTENSION(LPMessagingSDK))
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end






@interface LPStructuredContent (SWIFT_EXTENSION(LPMessagingSDK)) <UIGestureRecognizerDelegate>
@end




@interface LPStructuredContent (SWIFT_EXTENSION(LPMessagingSDK)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK25LPStructuredContentAction")
@interface LPStructuredContentAction : NSObject <NSCoding>
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK40LPStructuredContentAppointmentListAction")
@interface LPStructuredContentAppointmentListAction : LPStructuredContentAction
/// Decodes the Link action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK24LPStructuredContentClick")
@interface LPStructuredContentClick : NSObject <NSCoding>
/// Decodes the base Action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Click, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK35LPStructuredContentDatePickerAction")
@interface LPStructuredContentDatePickerAction : LPStructuredContentAction
/// Decodes the datePicker action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK23LPStructuredContentItem")
@interface LPStructuredContentItem : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC14LPMessagingSDK32LPStructuredContentItemContainer")
@interface LPStructuredContentItemContainer : NSObject <NSCoding>
/// Decodes the StructuredContentItamsContainer, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the StructuredContentItamsContainer, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK29LPStructuredContentLinkAction")
@interface LPStructuredContentLinkAction : LPStructuredContentAction
/// Decodes the Link action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK33LPStructuredContentNavigateAction")
@interface LPStructuredContentNavigateAction : LPStructuredContentAction
/// Decodes the Navigate action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Encodes the Navigate action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK36LPStructuredContentPublishTextAction")
@interface LPStructuredContentPublishTextAction : LPStructuredContentAction
/// Decodes the publishText action, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Encodes the Link action, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK24LPStructuredContentStyle")
@interface LPStructuredContentStyle : NSObject <NSCoding>
/// Decodes the base Style, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base Style, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK14LPUIPickerView")
@interface LPUIPickerView : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface LPUIPickerView (SWIFT_EXTENSION(LPMessagingSDK)) <UIPickerViewDelegate>
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


@interface LPUIPickerView (SWIFT_EXTENSION(LPMessagingSDK)) <UIPickerViewDataSource>
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)pickerView:(UIPickerView * _Nonnull)pickerView viewForRow:(NSInteger)row forComponent:(NSInteger)component reusingView:(UIView * _Nullable)view SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM(NSInteger, LPUrlPreviewStyle, open) {
  LPUrlPreviewStyleSlim = 0,
  LPUrlPreviewStyleLarge = 1,
};

@protocol User;

SWIFT_CLASS("_TtC14LPMessagingSDK6LPUser")
@interface LPUser : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(id <User> _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LPSRSecurityPolicy;

SWIFT_CLASS("_TtC14LPMessagingSDK11LPWebSocket")
@interface LPWebSocket : LPSRWebSocket
- (void)open;
- (void)close;
- (nonnull instancetype)initWithURLRequest:(NSURLRequest * _Nonnull)request protocols:(NSArray<NSString *> * _Nullable)protocols securityPolicy:(LPSRSecurityPolicy * _Nonnull)securityPolicy SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK20LPWeeklyCalendarView")
@interface LPWeeklyCalendarView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end





@class UICollectionViewLayout;

@interface LPWeeklyCalendarView (SWIFT_EXTENSION(LPMessagingSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



enum MessageFrequency : NSInteger;
@class LPWelcomeMessageOption;
@class QuickReplyItem;

SWIFT_CLASS("_TtC14LPMessagingSDK16LPWelcomeMessage")
@interface LPWelcomeMessage : NSObject
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic) enum MessageFrequency frequency;
@property (nonatomic, readonly, copy) NSArray<LPWelcomeMessageOption *> * _Nonnull options;
@property (nonatomic, readonly) NSInteger numberOfOptionsPerRow;
@property (nonatomic, readonly, strong) QuickReplyItem * _Nullable quickReply;
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)message frequency:(enum MessageFrequency)frequency OBJC_DESIGNATED_INITIALIZER;
- (BOOL)shouldDisplayDefaultMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setWithOptions:(NSArray<LPWelcomeMessageOption *> * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
- (void)clearOptions;
- (void)setWithNumberOfOptionsPerRow:(NSInteger)NumberOfOptionsPerRow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MessageFrequency, open) {
  MessageFrequencyFirstTimeConversation = 0,
  MessageFrequencyEveryConversation = 1,
};

typedef SWIFT_ENUM(NSInteger, LPWelcomeMessageError, open) {
  LPWelcomeMessageErrorMaximumOptions = 0,
  LPWelcomeMessageErrorMaximumOptionTitleCharacters = 1,
  LPWelcomeMessageErrorMinimumOptionTitleCharacters = 2,
};
static NSString * _Nonnull const LPWelcomeMessageErrorDomain = @"LPMessagingSDK.LPWelcomeMessage.LPWelcomeMessageError";


SWIFT_CLASS("_TtC14LPMessagingSDK22LPWelcomeMessageOption")
@interface LPWelcomeMessageOption : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK11LinkPreview_")
@protocol LinkPreview <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable captionTitle;
@property (nonatomic, copy) NSString * _Nullable captionDescription;
@property (nonatomic, copy) NSString * _Nullable captionSiteName;
@property (nonatomic, copy) NSString * _Nullable relativeImagePath;
@property (nonatomic, copy) NSString * _Nullable imageURL;
@property (nonatomic, copy) NSString * _Nullable imageState;
@property (nonatomic, strong) id <CustomBoard> _Nonnull ownerCustomBoard;
@property (nonatomic, copy) void (^ _Nullable imageDownloadCompleted)(UIImage * _Nullable);
@property (nonatomic, copy) void (^ _Nullable imageDownloadFailed)(NSError * _Nonnull);
@property (nonatomic, strong) UIImage * _Nullable _image;
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK7Message_")
@protocol Message <EntityInterface>
@property (nonatomic, copy) NSDate * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nonnull content;
@property (nonatomic, copy) NSString * _Nullable uid;
@property (nonatomic, copy) NSString * _Nonnull statusRaw;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull messageType;
@property (nonatomic, strong) id <Dialog> _Nonnull ownerDialog;
@property (nonatomic, strong) id <User> _Nullable ownerUser;
@property (nonatomic, strong) id <File> _Nullable file;
@property (nonatomic, strong) id <Form> _Nullable form;
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, strong) NSOrderedSet * _Nullable customBoards;
@property (nonatomic, copy) NSString * _Nullable linkPreviewState;
@property (nonatomic, strong) LPStructuredContentItemContainer * _Nullable structuredContentItemContainer;
@property (nonatomic) BOOL presented;
/// Timestamp when started sending message by user. By default it is the message creation timestamp, when the user tapped ‘Send’. If the message was resent by user, this value will be updated, but not stored in DB.
@property (nonatomic, copy) NSDate * _Nullable _lastSendingTimestamp;
@property (nonatomic, copy) NSString * _Nullable distributionTypeRaw;
@property (nonatomic) NSInteger carouselCurrentPage;
@property (nonatomic, copy) void (^ _Nullable boardsBuildCompleted)(NSArray<id <CustomBoard>> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable boardsBuildFailed)(NSError * _Nonnull);
@property (nonatomic, copy) NSString * _Nullable timestampRepresentation;
@property (nonatomic, copy) NSDate * _Nullable requestedToShowSendingState;
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, id> *> * _Nullable messageMetadata;
@property (nonatomic, copy) NSString * _Nullable maskedContent;
@property (nonatomic) BOOL isFirstUnreadMessage;
@property (nonatomic, copy) NSString * _Nullable unreadMessageDividerString;
@property (nonatomic, readonly, copy) NSString * _Nullable sectionIdentifier;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK21MessagingServiceEvent")
@interface MessagingServiceEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable eventId;
@property (nonatomic, readonly, strong) id <Dialog> _Null_unspecified dialog;
@property (nonatomic, readonly, strong) id <User> _Nullable sender;
@property (nonatomic, copy) void (^ _Nullable fileMessageCompletion)(id <Message> _Nonnull);
@property (nonatomic, copy) void (^ _Nullable fileMessageFailure)(NSError * _Nonnull);
- (nullable instancetype)initWithFailure OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC14LPMessagingSDK12NSBouncyView")
@interface NSBouncyView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end












SWIFT_CLASS("_TtC14LPMessagingSDK25ProactiveNotificationData")
@interface ProactiveNotificationData : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK16QuickReplyAction")
@interface QuickReplyAction : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK16QuickReplyButton")
@interface QuickReplyButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
@end


@interface QuickReplyButton (SWIFT_EXTENSION(LPMessagingSDK))
- (void)accessibilityElementDidBecomeFocused;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK23QuickReplyButtonDetails")
@interface QuickReplyButtonDetails : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK15QuickReplyClick")
@interface QuickReplyClick : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK14QuickReplyItem")
@interface QuickReplyItem : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK20QuickReplyLinkAction")
@interface QuickReplyLinkAction : QuickReplyAction
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK24QuickReplyNavigateAction")
@interface QuickReplyNavigateAction : QuickReplyAction
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK27QuickReplyPublishTextAction")
@interface QuickReplyPublishTextAction : QuickReplyAction
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK15QuickReplyStyle")
@interface QuickReplyStyle : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LPMessagingSDK4Slot")
@interface Slot : NSObject <NSCoding>
/// Decodes the base content item, stored in core data
/// \param aCoder aCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the base content item, will be used for storing in core data
/// \param aCoder aCoder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Used to set the socket type as consumer and/or brand. The URI for opening the socket is different between the two.
/// <ul>
///   <li>
///     Consumer: End user is a consumer.
///   </li>
///   <li>
///     Agent: End user is LiveEngage agent.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SocketType, open) {
  SocketTypeConsumer = 0,
  SocketTypeAgent = 1,
};


SWIFT_CLASS("_TtC14LPMessagingSDK8TTRModel")
@interface TTRModel : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






















































SWIFT_PROTOCOL("_TtP14LPMessagingSDK4User_")
@protocol User <EntityInterface>
@property (nonatomic, copy) NSString * _Nonnull uid;
@property (nonatomic, copy) NSString * _Nonnull firstName;
@property (nonatomic, copy) NSString * _Nonnull lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable coverImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nonnull typeRaw;
@property (nonatomic, copy) NSString * _Nullable bio;
@property (nonatomic, strong) NSSet * _Nonnull userMessages;
@property (nonatomic) BOOL isSaved;
@property (nonatomic, copy) NSDate * _Nullable lastUpdated;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@end


SWIFT_PROTOCOL("_TtP14LPMessagingSDK11UserProfile_")
@protocol UserProfile <User>
@property (nonatomic, copy) NSString * _Nonnull email;
@property (nonatomic, copy) NSString * _Nullable fbProfile;
@property (nonatomic, copy) NSString * _Nullable token;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK5Utils")
@interface Utils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull backgroundQueue;)
+ (dispatch_queue_t _Nonnull)backgroundQueue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)JSONStringify:(NSDictionary<NSString *, id> * _Nonnull)value prettyPrinted:(BOOL)prettyPrinted SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)JSONDictionaryFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (void)delay:(double)delay closure:(void (^ _Nonnull)(void))closure;
+ (NSInteger)minutesBetweenDates:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
/// Returns resized image size with a condition of a max height and max width
+ (CGSize)getResizedImageSizeWithImage:(UIImage * _Nonnull)image maxHeight:(CGFloat)maxHeight maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Uwrap optional type. For example, when passing object from type String?, it will return String
/// note:
/// http://stackoverflow.com/questions/27989094/how-to-unwrap-an-optional-value-from-any-type/32516815#32516815
/// attention:
/// 🌮 This is not needed any more, REMOVE it later
/// \param any Any
///
///
/// returns:
/// Any
+ (id _Nonnull)unwrapWithAny:(id _Nonnull)any SWIFT_WARN_UNUSED_RESULT;
/// This method returns true if the device is landscape (it ignores states such as flat, face or back)
+ (BOOL)isLandscape SWIFT_WARN_UNUSED_RESULT;
/// This method returns true if the device is portrait (it ignores states such as flat, face or back)
+ (BOOL)isPortrait SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VoiceVideoEndCallButtonType, open) {
  VoiceVideoEndCallButtonTypeClose = 1,
  VoiceVideoEndCallButtonTypeHangup = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
