// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LPMessagingSDK
import AVFoundation
import AudioToolbox
import LPMessagingSDK.CommonCrypto
import CoreData
import CoreGraphics
import Foundation
@_exported import LPMessagingSDK
import MapKit
import MessageUI
import Photos
import QuartzCore
import QuickLook
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os.log
import os
public enum QuickReplyStyleSize : Swift.String {
  case small
  case medium
  case large
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyStyle : ObjectiveC.NSObject, Foundation.NSCoding {
  public var bold: Swift.Bool?
  public var italic: Swift.Bool?
  public var color: UIKit.UIColor?
  public var borderColor: UIKit.UIColor?
  public var borderRadius: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor?
  public var size: Swift.String?
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
public enum FileState : Swift.String {
  case Created
  case PreUpload
  case Uploading
  case Synced
  case NoFile
  case PreDownload
  case Downloading
  case UploadError
  case DownloadError
  case FetchError
  case GenerateError
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol File : LPMessagingSDK.EntityInterface {
  @objc var fileExtension: Swift.String? { get set }
  @objc var uid: Swift.String { get set }
  @objc var state: Swift.String? { get set }
  @objc var fileName: Swift.String? { get set }
  @objc var relativeFilePath: Swift.String? { get set }
  @objc var relativeThumbnailPath: Swift.String? { get set }
  @objc var fileSize: Foundation.NSNumber? { get set }
  @objc var creationDate: Foundation.NSDate? { get set }
  @objc var ownerMessage: LPMessagingSDK.Message? { get set }
  @objc var swiftRelativePath: Swift.String? { get set }
  @objc var metaDataContainer: LPMessagingSDK.LPFileMetaDataContainer? { get set }
  @objc var thumbnailImage: UIKit.UIImage? { get set }
  @objc var completion: (() -> ())? { get set }
  @objc var failure: ((Foundation.NSError) -> ())? { get set }
  @objc var preUpload: (() -> ())? { get set }
  @objc var preDownload: (() -> ())? { get set }
  @objc var uploading: ((Swift.Double) -> ())? { get set }
  @objc var uploadPercentage: CoreGraphics.CGFloat { get set }
  @objc var downloading: ((Swift.Double) -> ())? { get set }
  @objc var downloadPercentage: CoreGraphics.CGFloat { get set }
  @objc var synced: (() -> ())? { get set }
}
extension File {
  public var isTransferring: Swift.Bool {
    get
  }
  public func clearFileBlocks()
}
@_inheritsConvenienceInitializers @objcMembers @objc public class LPConversationScrollConfiguration : ObjectiveC.NSObject {
  @objc public enum ScrollPosition : Swift.Int {
    case Bottom = 0
    case LastPosition
    case FirstUnreadMessage
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var showConversation: LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition
  @objc public var backgroundToForeground: LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition
  @objc public var scrollToBottomButtonPressed: LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition
  @objc public var pushNotificationTapped: LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition
  @objc deinit
  @objc override dynamic public init()
}
@objc @objcMembers public class BrandQuery : ObjectiveC.NSObject, LPMessagingSDK.ConversationParamProtocol {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public init(brandID: Swift.String, campaignInfo: LPMessagingSDK.LPCampaignInfo? = nil)
  @objc public func getConversations() -> [LPMessagingSDK.Conversation]?
  @objc public func getConversations(_ predicate: Foundation.NSPredicate?) -> [LPMessagingSDK.Conversation]?
  @objc public func getActiveConversation() -> LPMessagingSDK.Conversation?
  @objc public func getClosedConversations() -> [LPMessagingSDK.Conversation]?
  @objc public func getOpenConversation() -> LPMessagingSDK.Conversation?
  @objc public func getOpenDialog() -> LPMessagingSDK.Dialog?
  @objc public func getLatestClosedConversations(_ conversationsCount: Swift.Int) -> [LPMessagingSDK.Conversation]?
  @objc public func createNewConversation() -> LPMessagingSDK.Conversation
  @objc public func getQueryType() -> Swift.String
  @objc public func isConversationRelatedToQuery(_ conversation: LPMessagingSDK.Conversation) -> Swift.Bool
  @objc public func getBrandID() -> Swift.String
  @objc public func getQueryUID() -> Swift.String
  @objc public func getCampaignInfo() -> LPMessagingSDK.LPCampaignInfo?
  @objc public func getQueryProperties() -> [Swift.String : Any]
  @objc deinit
  @objc override dynamic public init()
}
public protocol LPStructuredContentDelegate : AnyObject {
  func lpStructuredContentDidPress(withActions actions: [LPMessagingSDK.LPStructuredContentAction], metadata: [[Swift.String : Any]]?)
  func lpStructuredContentNeedsReload(imageFinishedLoading: Swift.Bool?)
  func lpStructuredContentPanGestureStartedWith(offset: CoreGraphics.CGPoint)
  func lpStructuredContentPanGestureFailedWith(page: Swift.Int)
  func lpStructuredContentPanGestureEndedWith(page: Swift.Int)
  func lpStructuredContentScrollBeginDraggingWith(contentOffset: CoreGraphics.CGPoint)
  func lpStructuredContentScrollDidEndDeceleratingWith(contentOffset: CoreGraphics.CGPoint)
  func lpStructuredContentScrollDidEndScrollingAnimationWith(contentOffset: CoreGraphics.CGPoint)
  func lpStructuredContentSave(currentPage: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class LPStructuredContent : UIKit.UIView {
  public var stackViewContainer: UIKit.UIView {
    get
    set
  }
  weak public var delegate: LPMessagingSDK.LPStructuredContentDelegate?
  public var originalContentOffset: CoreGraphics.CGPoint {
    get
  }
  public var item: LPMessagingSDK.LPStructuredContentItem? {
    get
  }
  public var accessibilityStructuredContentElements: [UIKit.UIView] {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension LPStructuredContent {
  public func configureAccessibilityWith(accessibilityLabel: Swift.String? = nil)
}
extension LPStructuredContent : UIKit.UIGestureRecognizerDelegate {
  public func handleOrientation()
  public func removeStructuredContentObjects()
  public func setWith(item: LPMessagingSDK.LPStructuredContentItem, imageDownloader: LPMessagingSDK.LPStructuredContentImageDownloader?, currentPage: Swift.Int = 0)
}
extension LPStructuredContent {
  @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension LPStructuredContent : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
}
public enum QuickReplyJsonKeys : Swift.String {
  case quickReplies
  case itemsPerRow
  case replies
  case title
  case tooltip
  case rtl
  case click
  case metadata
  case actions
  case style
  case type
  case uri
  case url
  case lo
  case la
  case text
  case backgroundColor
  case borderColor
  case color
  case italic
  case bold
  case size
  case borderRadius
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum CustomItemType : Swift.String {
  case button
  case image
  case map
  case linkPreview
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ImageState : Swift.String {
  case downloading
  case downloaded
  case failed
  case noImageURL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol LinkPreview : LPMessagingSDK.EntityInterface {
  @objc var uid: Swift.String { get set }
  @objc var type: Swift.String { get set }
  @objc var url: Swift.String { get set }
  @objc var captionTitle: Swift.String? { get set }
  @objc var captionDescription: Swift.String? { get set }
  @objc var captionSiteName: Swift.String? { get set }
  @objc var relativeImagePath: Swift.String? { get set }
  @objc var imageURL: Swift.String? { get set }
  @objc var imageState: Swift.String? { get set }
  @objc var ownerCustomBoard: LPMessagingSDK.CustomBoard { get set }
  @objc var imageDownloadCompleted: ((UIKit.UIImage?) -> ())? { get set }
  @objc var imageDownloadFailed: ((Foundation.NSError) -> ())? { get set }
  @objc var _image: UIKit.UIImage? { get set }
}
extension LinkPreview {
  public var description: Swift.String {
    get
  }
}
@objcMembers @objc public class LPAuthenticationParams : ObjectiveC.NSObject {
  @objc public var authenticationCode: Swift.String?
  @objc public var jwt: Swift.String?
  @objc public var redirectURI: Swift.String?
  @objc public var certPinningPublicKeys: [Swift.String]?
  @objc public var type: LPMessagingSDK.LPAuthenticationType
  @objc public init(authenticationCode: Swift.String? = nil, jwt: Swift.String? = nil, redirectURI: Swift.String? = nil, certPinningPublicKeys: [Swift.String]? = nil, authenticationType: LPMessagingSDK.LPAuthenticationType = .signup)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc public class LPConversationViewParams : ObjectiveC.NSObject {
  @objc public var conversationQuery: LPMessagingSDK.ConversationParamProtocol
  @objc public var containerViewController: UIKit.UIViewController?
  @objc final public let isViewOnly: Swift.Bool
  @objc final public let conversationHistoryControlParam: LPMessagingSDK.LPConversationHistoryControlParam
  @objc public var welcomeMessage: LPMessagingSDK.LPWelcomeMessage
  @objc public init(conversationQuery: LPMessagingSDK.ConversationParamProtocol, containerViewController: UIKit.UIViewController? = nil, isViewOnly: Swift.Bool = false, conversationHistoryControlParam: LPMessagingSDK.LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .all), welcomeMessage: LPMessagingSDK.LPWelcomeMessage = LPWelcomeMessage(message: nil))
  @objc @available(iOS, deprecated: 12.0.0, obsoleted: 14.0.0, message: "Use public init(conversationQuery: ConversationParamProtocol, containerViewController: UIViewController? = nil, isViewOnly: Bool = false, conversationHistoryControlParam: LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .none), welcomeMessage: LPWelcomeMessage = LPWelcomeMessage(message: nil)) instead")
  public init(conversationQuery: LPMessagingSDK.ConversationParamProtocol, containerViewController: UIKit.UIViewController? = nil, isViewOnly: Swift.Bool = false, conversationHistoryControlParam: LPMessagingSDK.LPConversationHistoryControlParam = LPConversationHistoryControlParam(historyConversationsStateToDisplay: .all))
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class LPHyperlinkUtils {
  @objc deinit
}
@objcMembers @objc public class LPUser : ObjectiveC.NSObject {
  @objc public var firstName: Swift.String?
  @objc public var lastName: Swift.String?
  @objc public var nickName: Swift.String?
  @objc public var profileImageURL: Swift.String?
  @objc public var phoneNumber: Swift.String?
  @objc public var employeeID: Swift.String?
  @objc public var uid: Swift.String?
  @objc convenience public init(user: LPMessagingSDK.User)
  @objc public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, nickName: Swift.String? = nil, uid: Swift.String? = nil, profileImageURL: Swift.String? = nil, phoneNumber: Swift.String? = nil, employeeID: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Utils : ObjectiveC.NSObject {
  @objc public static let backgroundQueue: Dispatch.DispatchQueue
  @objc public class func JSONStringify(_ value: [Swift.String : Any], prettyPrinted: Swift.Bool = false) -> Swift.String?
  @objc public class func JSONDictionaryFromString(_ string: Swift.String) -> Any?
  @objc public class func delay(_ delay: Swift.Double, closure: @escaping () -> ())
  public class func createError<T>(_ cls: T.Type, code: Swift.Int, message: Swift.String? = nil) -> Foundation.NSError where T : ObjectiveC.NSObject
  @objc public class func createErrorWith(domain: Swift.String, code: Swift.Int, message: Swift.String) -> Foundation.NSError
  @objc public class func minutesBetweenDates(_ startDate: Foundation.Date, endDate: Foundation.Date) -> Swift.Int
  @objc public class func getResizedImageSize(image: UIKit.UIImage, maxHeight: CoreGraphics.CGFloat, maxWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
  @objc public class func unwrap(any: Any) -> Any
  @objc public class func isLandscape() -> Swift.Bool
  @objc public class func isPortrait() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TTRModel : ObjectiveC.NSObject, Foundation.NSCoding {
  public var effectiveTTR: Foundation.Date!
  public var manualETTR: Foundation.Date?
  public var ttrValue: Swift.Int
  public var delay: Foundation.Date?
  public init(effectiveTTR: Foundation.Date, manualETTR: Foundation.Date?, ttrValue: Swift.Int, delay: Foundation.Date?)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  public func compare(other: LPMessagingSDK.TTRModel) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
public enum ConversationQueryType : Swift.String {
  case Brand
  case Consumer
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public protocol ConversationParamProtocol {
  @objc func getConversations() -> [LPMessagingSDK.Conversation]?
  @objc func getConversations(_ predicate: Foundation.NSPredicate?) -> [LPMessagingSDK.Conversation]?
  @objc func getClosedConversations() -> [LPMessagingSDK.Conversation]?
  @objc func getActiveConversation() -> LPMessagingSDK.Conversation?
  @objc func getOpenConversation() -> LPMessagingSDK.Conversation?
  @objc func getOpenDialog() -> LPMessagingSDK.Dialog?
  @objc func getLatestClosedConversations(_ conversationsCount: Swift.Int) -> [LPMessagingSDK.Conversation]?
  @objc func createNewConversation() -> LPMessagingSDK.Conversation
  @objc func getQueryType() -> Swift.String
  @objc func isConversationRelatedToQuery(_ conversation: LPMessagingSDK.Conversation) -> Swift.Bool
  @objc func getBrandID() -> Swift.String
  @objc func getQueryUID() -> Swift.String
  @objc func getQueryProperties() -> [Swift.String : Any]
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyClick : ObjectiveC.NSObject, Foundation.NSCoding {
  public var ID: Swift.String
  public var metadata: [[Swift.String : Any]]?
  public var actions: [LPMessagingSDK.QuickReplyAction]?
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
public enum LPLanguagesKeys : Swift.String {
  public static var allRows: [LPMessagingSDK.LPLanguagesKeys] {
    get
  }
  case customButtonAccessibilityDescription
  case readReceiptTextSending
  case readReceiptTextSent
  case readReceiptTextDistributed
  case readReceiptTextRead
  case conversationEndedByAgent
  case conversationEndedByAgentWithoutName
  case conversationEndedByYou
  case cancel
  case retry
  case hiMessage
  case sentMessageErrorTitle
  case sentMailErrorTitle
  case sentMailErrorMessage
  case callTo
  case sendMessage
  case facetimeAudio
  case sendEmailTitle
  case sendEmailMessage
  case notNow
  case yes
  case feedbackYesButtonTitle
  case feedbackNoButtonTitle
  case cantSendMail
  case noEmailOnDeviceError
  case dismissUrgent
  case dismissUrgentConfirmation
  case dismiss
  case markAsUrgent
  case markAsUrgentConfirmation
  case urgent
  case noInternetConnection
  case ok
  case markAsEndedConfirmation
  case ttrResponseMessage
  case rateConnectionWithAgent
  case rateConnectionWithName
  case veryDissatisfied
  case dissatisfied
  case neither
  case satisfied
  case verySatisfied
  case writeMessage
  case olderMessages
  case minutesAgo
  case numberOfDays
  case day
  case numberOfHours
  case oneHour
  case oneMinute
  case numberOfMinutes
  case send
  case submit
  case today
  case noSocketConnectivity
  case conversationAlreadyEnded
  case loadingHistoryMessages
  case and
  case anAgentWillRespondShortly
  case nowTimestamp
  case csatResolutionFeedbackText
  case csatResolutionQuestionText
  case surveySubmittedSuccessfullyThankYou
  case ttrOffHoursResponseMessageToday
  case ttrOffHoursResponseMessageTomorrow
  case ttrOffHoursResponseMessageDate
  case endTheConversation
  case maskedMessageResendError
  case systemMessageRealTimeMasked
  case systemMessageClientOnlyMasked
  case offlineNotification
  case resolve
  case sharePhotoFromPhotoLibrary
  case sharePhotoFromCamera
  case tapToAddACaption
  case errorSendingThePhoto
  case sorryWeveEncounteredAnErrorWhileSendingThePhoto
  case accessibilityAgentDefaultAvatar
  case accessibilityAgentIsTyping
  case accessibilityHintScrollToBottomButton
  case accessibilityAgentWithoutNameIsTyping
  case accessibilityMessageFromAgentWithName
  case accessibilityMessageFromAgentWithoutName
  case accessibilityMessageFromUser
  case accessibilityCameraButton
  case accessibilityCloseScreenButton
  case accessibilityNavigationMenuButton
  case unreadMessages
  case invalidHyperLinkError
  case accessibilityCloseCameraButton
  case accessibilityLinkText
  case accessibilityMessageError
  case accessibilityMessageErrorHint
  case accessibilityFileUploadAnnouncement
  case accessibilityFileDownloadAnnouncement
  case accessibilityPhoto
  case accessibilityPhotoMessageFromUser
  case accessibilityPhotoMessageFromAgentWithName
  case accessibilityFileMessageFromAgentWithoutName
  case accessibilityFileMessageFromAgentWithName
  case accessibilityPhotoMessageFromAgentWithoutName
  case accessibilityFileNoFileState
  case accessibilityFileUploadingState
  case accessibilityFileDownloadingState
  case accessibilityFileSyncedState
  case accessibilityFileDownloadedErrorState
  case accessibilityFileNotAvailableState
  case accessibilityScrollToBottomButton
  case accessibilityRealTimeLinkPreviewView
  case accessibilityRealTimeLinkPreviewClosePreviewButton
  case accessibilityRealTimeLinkPreviewCloseButtonHint
  case accessibilityRealTimeLinkPreviewTitle
  case accessibilityRealTimeLinkPreviewDescription
  case accessibilityRealTimeLinkPreviewImage
  case clearHistoryMenuTitle
  case clearHistoryConfirmation
  case clearHistoryFailureMessage
  case clearHistoryConfirmButton
  case isTyping
  case oneUnreadMessage
  case secureFormToFillInMessage
  case secureFormExpiredMessage
  case secureFormViewedMessage
  case secureFormErrorMessage
  case secureFormFillFormButtonTitle
  case secureFormSubmittedMessage
  case secureFormConsumerSubmissionMessage
  case connectionStatusBarConnecting
  case connectionStatusBarStillConnecting
  case connectionStatusBarFailedToConnect
  case quickReplyContentMessage
  case newRemoteMessage
  case newStructuredContentMessage
  case structuredContentItemError
  case structuredContentAccessibilityMap
  case copyNumber
  case conversationEmptyState
  case quickReplyButton
  case outOf
  case unauthenticatedUserExpiredTitle
  case unauthenticatedUserExpiredMessage
  case toolTipLongTapToRecord
  case toolTipReleaseButtonForRecording
  case toolTipRecordLimitReached
  case toolTipRecordVoiceClip
  case toolTipDeleteVoiceClip
  case toolTipStopRecording
  case toolTipStartRecording
  case toolTipRecordingInProgress
  case toolTipReplayVoice
  case toolTipRecordingHint
  case toolTipStartedRecordingHint
  case toolTipStopReplaying
  case toolTipStoppedRecordingHint
  case toolTipReplyHint
  case toolTipStoppedReplyHint
  case toolTipStartedReplyHint
  case toolTipDeletedRecordingHint
  case button
  case fileSharingAttachmentMenu
  case fileSharingDocument
  case fileSharingUnsupportedFileSize
  case fileSharingFileSizeLimitation
  case fileSharingSendFile
  case fileSharingSendPhoto
  case permissionPopUpDeniedOptionNotNow
  case permissionPopUpDeniedOptionGoToSettings
  case permissionPopUpDeniedTitle
  case permissionPopUpDeniedMicrophoneDescription
  case permissionPopUpDeniedCameraDescription
  case permissionPopUpDeniedPhotoLibraryDescription
  case permissionPopUpRestrictedTitle
  case permissionPopUpRestrictedDescription
  case camera
  case photoLibrary
  case microphone
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ConversationState : Swift.String {
  case Open
  case Close
  case Locked
  case Created
  case Pending
  case Other
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum TTRType : Swift.String {
  case Normal
  case Custom
  case Prioritized
  case Urgent
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol Conversation : LPMessagingSDK.EntityInterface {
  @objc var uid: Swift.String { get set }
  @objc var creationDate: Foundation.Date { get set }
  @objc var handlerId: Swift.String { get set }
  @objc var closeDate: Foundation.Date? { get set }
  @objc var lastUpdateDate: Foundation.Date? { get set }
  @objc var stateRaw: Swift.String { get set }
  @objc var closeReason: Swift.String? { get set }
  @objc var ttrTypeRaw: Swift.String { get set }
  @objc var type: Swift.String? { get set }
  @objc var consumerId: Swift.String? { get set }
  @objc var ttrModel: LPMessagingSDK.TTRModel? { get set }
  @objc var ownerBrand: LPMessagingSDK.Brand { get set }
  @objc var participants: Foundation.NSSet { get set }
  @objc var conversationDialogs: Foundation.NSSet { get set }
  @objc var csatSubmitted: Swift.Bool { get set }
  @objc var isHistoryFilterEnable: Swift.Bool { get set }
  @objc var presented: Swift.Bool { get set }
  @objc var shouldQueryMessages: Swift.Bool { get }
}
extension Conversation {
  public var conversationMessages: Foundation.NSOrderedSet {
    get
  }
  public var resolved: Swift.Bool {
    get
  }
  public var sortedMessages: [LPMessagingSDK.Message] {
    get
  }
  public var unreadMessages: [LPMessagingSDK.Message] {
    get
  }
  public var lastMessageObj: LPMessagingSDK.Message? {
    get
  }
  public var lastMessageOriginator: LPMessagingSDK.User? {
    get
  }
  public var relatedSocketID: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var logDescription: Swift.String {
    get
  }
  public func isCurrentlyUrgent() -> Swift.Bool
  public var state: LPMessagingSDK.ConversationState {
    get
  }
  public var isResolvedAutomatically: Swift.Bool {
    get
  }
  public var ttrType: LPMessagingSDK.TTRType {
    get
  }
  public var isOpen: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class LPOperation : Foundation.Operation {
  @objc final override public var isExecuting: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final override public var isFinished: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func main()
  @objc override dynamic open func start()
  open func finishOperation()
  @objc override dynamic open func cancel()
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isCancelled: Swift.Bool {
    @objc get
  }
  open func clearOperationOnCancel()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyNavigateAction : LPMessagingSDK.QuickReplyAction {
  public var latitude: CoreLocation.CLLocationDegrees
  public var longitude: CoreLocation.CLLocationDegrees
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum CheckmarksState : Swift.Int {
  case sentOnly = 1
  case sentAndAccepted = 2
  case all = 3
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum LPPreferredFontType {
  case conversationFeed
  case conversationSeparatorTimestamp
  case nonConversationFeed
  case conversationClosedSeparator
  public static func == (a: LPMessagingSDK.LPPreferredFontType, b: LPMessagingSDK.LPPreferredFontType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum LPAccountEnviroment : Swift.Int {
  case production = 0
  case alpha
  case qa
  public var description: Swift.String {
    get
  }
  public static func rawValue(forString string: Swift.String) -> Swift.Int
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LPLanguage : Swift.Int {
  case device
  case en
  case en_GB
  case pt
  case pt_PT
  case fr
  case bg
  case cs
  case da
  case sr
  case de
  case el
  case he
  case he_IL
  case es
  case et
  case fi
  case hi
  case hr
  case hu
  case it
  case ja
  case ko
  case lt
  case lv
  case mk
  case nb
  case nl
  case pl
  case ro
  case ru
  case sl
  case sk
  case sv
  case th
  case tr
  case uk
  case vi
  case zh
  case zh_Hans
  case zh_Hant_hk
  public static var allRows: [LPMessagingSDK.LPLanguage] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public var description: Swift.String? {
    get
  }
  public typealias RawValue = Swift.String
}
@objc public enum LPRegionCode : Swift.Int {
  case device
  case US
  case UK
  case BR
  case PT
  case FR
  case BG
  case CZ
  case DK
  case SP
  case DE
  case GR
  case IL
  case ES419
  case EE
  case FI
  case IN
  case HR
  case HU
  case IT
  case JP
  case KR
  case LT
  case LV
  case MK
  case NO
  case NL
  case PL
  case RO
  case RU
  case SI
  case SK
  case SE
  case TH
  case TR
  case UA
  case VN
  case TW
  case CN
  case HK
  public static var allRows: [LPMessagingSDK.LPRegionCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public var description: Swift.String? {
    get
  }
  public typealias RawValue = Swift.String
}
@objc public enum LPUrlPreviewStyle : Swift.Int {
  case slim
  case large
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LPConversationsHistoryStateToDisplay : Swift.Int {
  case open
  case close
  case all
  public var description: Swift.String {
    get
  }
  public static func rawValue(forString string: Swift.String) -> Swift.Int
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LPConversationHistoryMaxDaysDateType : Swift.Int {
  case startConversationDate
  case endConversationDate
  public var description: Swift.String {
    get
  }
  public static func rawValue(forString string: Swift.String) -> Swift.Int
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LPAuthenticationType : Swift.Int {
  case signup = 0
  case unauthenticated
  case authenticated
  public var description: Swift.String {
    get
  }
  public static func newInstance(description: Swift.String) -> LPMessagingSDK.LPAuthenticationType
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol QuickReplyButtonDelegate : AnyObject {
  func quickReplyButtonDidBecomeFocused(_ button: LPMessagingSDK.QuickReplyButton)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class QuickReplyButton : UIKit.UIButton {
  public var details: LPMessagingSDK.QuickReplyButtonDetails?
  weak public var delegate: LPMessagingSDK.QuickReplyButtonDelegate?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  convenience public init(quickReplyButtonDetails: LPMessagingSDK.QuickReplyButtonDetails)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
extension QuickReplyButton {
  @objc override dynamic public func accessibilityElementDidBecomeFocused()
}
public enum FormState : Swift.String {
  case created
  case submitted
  case generatingToken
  case opened
  case viewed
  case expired
  case error
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public protocol Form : LPMessagingSDK.EntityInterface {
  @objc var formID: Swift.String { get set }
  @objc var invitationID: Swift.String { get set }
  @objc var state: Swift.String { get set }
  @objc var title: Swift.String? { get set }
  @objc var submissionID: Swift.String? { get set }
  @objc var ownerMessages: Foundation.NSOrderedSet { get set }
  @objc var readOTK: Swift.String? { get set }
  @objc var writeOTK: Swift.String? { get set }
  @objc var url: Foundation.URL? { get set }
}
extension Form {
  public var description: Swift.String {
    get
  }
  public var ownerDialog: LPMessagingSDK.Dialog? {
    get
  }
}
@objc @objcMembers public class ConsumerQuery : LPMessagingSDK.BrandQuery {
  @objc public init(consumerID: Swift.String, brandID: Swift.String, agentToken: Swift.String)
  @objc override public func getConversations() -> [LPMessagingSDK.Conversation]?
  @objc override public func getActiveConversation() -> LPMessagingSDK.Conversation?
  @objc override public func getConversations(_ predicate: Foundation.NSPredicate?) -> [LPMessagingSDK.Conversation]?
  @objc override public func createNewConversation() -> LPMessagingSDK.Conversation
  @objc override public func getQueryType() -> Swift.String
  @objc override public func isConversationRelatedToQuery(_ conversation: LPMessagingSDK.Conversation) -> Swift.Bool
  @objc override public func getQueryUID() -> Swift.String
  @objc deinit
  @objc override public init(brandID: Swift.String, campaignInfo: LPMessagingSDK.LPCampaignInfo? = super)
}
@objc public protocol Brand : LPMessagingSDK.EntityInterface {
  @objc var iconURL: Swift.String { get set }
  @objc var imageURL: Swift.String? { get set }
  @objc var logoURL: Swift.String? { get set }
  @objc var name: Swift.String { get set }
  @objc var uid: Swift.String { get set }
  @objc var details: Swift.String { get set }
  @objc var brandCampaigns: Foundation.NSSet { get set }
  @objc var brandConversations: Foundation.NSSet { get set }
  @objc var dateJoined: Foundation.Date { get set }
  @objc var hidden: Swift.Bool { get set }
  @objc var accounts: Foundation.NSSet { get set }
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentItemContainer : ObjectiveC.NSObject, Foundation.NSCoding {
  public var ID: Swift.String {
    get
  }
  public var item: LPMessagingSDK.LPStructuredContentItem? {
    get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyLinkAction : LPMessagingSDK.QuickReplyAction {
  public var uri: Swift.String
  public var deepLinkUri: Swift.String?
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyButtonDetails : ObjectiveC.NSObject, Foundation.NSCoding {
  public var ID: Swift.String
  public var text: Swift.String?
  public var tooltip: Swift.String?
  public var rtl: Swift.Bool?
  public var click: LPMessagingSDK.QuickReplyClick?
  public var style: LPMessagingSDK.QuickReplyStyle?
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class GeneralResponse : ObjectiveC.NSObject {
  @objc public var kind: Swift.String?
  @objc public var reqId: Swift.String?
  public var code: Swift.Int?
  @objc public var type: Swift.String?
  @objc public init(jsonDict: [Swift.String : Any])
  public class ContentEventBody {
    public var sequence: Swift.Int?
    public var originatorId: Swift.String?
    public var serverTimestamp: Foundation.Date?
    public var event: LPMessagingSDK.GeneralResponse.Event?
    public var dialogId: Swift.String?
    public var originatorClientProperties: [Swift.String : Any]?
    public var eventId: Swift.String?
    public var originatorMetadata: LPMessagingSDK.GeneralResponse.OriginatorMetadata?
    public init(sequence: Swift.Int?, originatorId: Swift.String?, originatorMetadata: LPMessagingSDK.GeneralResponse.OriginatorMetadata?, serverTimestamp: Foundation.Date?, event: LPMessagingSDK.GeneralResponse.Event?, dialogId: Swift.String?, originatorClientProperties: [Swift.String : Any]?, eventId: Swift.String?)
    @objc deinit
  }
  public class TTR : Swift.CustomStringConvertible {
    public var ttrType: Swift.String?
    public var value: Swift.Int?
    public init(mTtrType: Swift.String?, mValue: Swift.Int?)
    public var description: Swift.String {
      get
    }
    @objc deinit
  }
  public class Delay : Swift.CustomStringConvertible {
    public var type: Swift.String?
    public var tillWhen: Foundation.NSNumber?
    public init(mDelayType: Swift.String?, mTillWhen: Foundation.NSNumber?)
    public var description: Swift.String {
      get
    }
    @objc deinit
  }
  public class Dialog {
    public var dialogId: Swift.String?
    public var participants: [Swift.String]?
    public var dialogType: Swift.String?
    public var channelType: Swift.String?
    public var open: Swift.Bool?
    public init(dialogId: Swift.String?, participants: [Swift.String]?, dialogType: Swift.String?, channelType: Swift.String?, open: Swift.Bool?)
    @objc deinit
  }
  public class Event {
    public var type: Swift.String?
    public var contentType: LPMessagingSDK.ContentType?
    public var content: Any?
    public var chatState: Swift.String?
    public var status: Swift.String?
    public var sequenceList: Foundation.NSArray?
    public var quickReplyItem: LPMessagingSDK.QuickReplyItem?
    public init(type: Swift.String?, contentType: LPMessagingSDK.ContentType?, content: Any?, chatState: Swift.String?, status: Swift.String?, sequenceList: Foundation.NSArray?, quickReplyItem: LPMessagingSDK.QuickReplyItem? = nil)
    public class FileMessage {
      public var caption: Swift.String?
      public var fileType: Swift.String?
      public var preview: Swift.String?
      public var relativePath: Swift.String?
      public init(caption: Swift.String?, fileType: Swift.String?, preview: Swift.String?, relativePath: Swift.String?)
      public var description: Swift.String {
        get
      }
      @objc deinit
    }
    public class SecureFormInvitationMessage {
      public var formId: Swift.String?
      public var invitationId: Swift.String?
      public var title: Swift.String?
      public init(formId: Swift.String?, invitationId: Swift.String?, title: Swift.String?)
      @objc deinit
    }
    public class SecureFormSubmissionMessage {
      public var submissionId: Swift.String?
      public var invitationId: Swift.String?
      public init(submissionId: Swift.String?, invitationId: Swift.String?)
      @objc deinit
    }
    public class StructuredContentMessage {
      public var structuredContentItemsContainer: LPMessagingSDK.LPStructuredContentItemContainer?
      public init(structuredContentData: [Swift.String : Any]?)
      @objc deinit
    }
    @objc deinit
  }
  public class OriginatorMetadata {
    public var id: Swift.String?
    public var role: Swift.String?
    public var clientProperties: [Swift.String : Any]?
    public init(id: Swift.String?, role: Swift.String?, clientProperties: [Swift.String : Any]?)
    @objc deinit
  }
  @objc public var responseDescription: Swift.String {
    @objc get
  }
  public func getContentEventBody(from bodyDict: [Swift.String : Any]) -> LPMessagingSDK.GeneralResponse.ContentEventBody
  @objc override dynamic public init()
  @objc deinit
}
public enum MessageType : Swift.String {
  case User
  case UserMasked
  case SeperatorSystem
  case LocalSystem
  case RemoteUser
  case RemoteSystem
  case UserPhoto
  case RemoteUserFile
  case UserLinkPreview
  case RemoteUserLinkPreview
  case RemoteUserHyperLink
  case UserHyperLink
  case RemoteUserSecureForm
  case UserStructuredContentContainer
  case RemoteUserStructuredContentContainer
  case Controller
  case UserAudio
  case RemoteUserAudio
  case UserFile
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LocalMessageType : Swift.Int {
  case welcomeMessage
  case closeMainDialogMessage
  case closeOtherDialogMessage
  case maskedMessage
  public init?(number: Foundation.NSNumber)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageStatus : Swift.String {
  case Created
  case Pending
  case Distributed
  case Accepted
  case Read
  case Error
  case Viewed
  public var value: Swift.Int {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LinkPreviewState : Swift.String {
  case loading
  case loaded
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol Message : LPMessagingSDK.EntityInterface {
  @objc var timestamp: Foundation.Date { get set }
  @objc var content: Swift.String { get set }
  @objc var uid: Swift.String? { get set }
  @objc var statusRaw: Swift.String { get set }
  @objc var contentType: Swift.String { get set }
  @objc var messageType: Swift.String { get set }
  @objc var ownerDialog: LPMessagingSDK.Dialog { get set }
  @objc var ownerUser: LPMessagingSDK.User? { get set }
  @objc var file: LPMessagingSDK.File? { get set }
  @objc var form: LPMessagingSDK.Form? { get set }
  @objc var eventId: Swift.String? { get set }
  @objc var customBoards: Foundation.NSOrderedSet? { get set }
  @objc var linkPreviewState: Swift.String? { get set }
  @objc var structuredContentItemContainer: LPMessagingSDK.LPStructuredContentItemContainer? { get set }
  @objc var presented: Swift.Bool { get set }
  @objc var _lastSendingTimestamp: Foundation.Date? { get set }
  @objc var distributionTypeRaw: Swift.String? { get set }
  @objc var carouselCurrentPage: Swift.Int { get set }
  @objc var boardsBuildCompleted: (([LPMessagingSDK.CustomBoard]) -> ())? { get set }
  @objc var boardsBuildFailed: ((Foundation.NSError) -> ())? { get set }
  @objc var timestampRepresentation: Swift.String? { get set }
  @objc var requestedToShowSendingState: Foundation.Date? { get set }
  @objc var messageMetadata: [[Swift.String : Any]]? { get set }
  @objc var maskedContent: Swift.String? { get set }
  @objc var isFirstUnreadMessage: Swift.Bool { get set }
  @objc var unreadMessageDividerString: Swift.String? { get set }
  @objc var sectionIdentifier: Swift.String? { get }
}
extension Message {
  public var distributionType: LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType {
    get
    set
  }
  public var lastSendingTimestamp: Foundation.Date {
    get
    set
  }
  public var description: Swift.String {
    get
  }
  public var isLinkPreview: Swift.Bool {
    get
  }
  public var isStructuredContent: Swift.Bool {
    get
  }
  public var status: LPMessagingSDK.MessageStatus {
    get
  }
  public var isSystemMessage: Swift.Bool {
    get
  }
  public var isRemoteMessage: Swift.Bool {
    get
  }
  public var isUserMessage: Swift.Bool {
    get
  }
  public var isControllerMessage: Swift.Bool {
    get
  }
  public func getLocalMessageType() -> LPMessagingSDK.LocalMessageType?
  public func getBoards(completion: @escaping ([LPMessagingSDK.CustomBoard]) -> (), failure: @escaping (Foundation.NSError) -> ())
}
@objc @objcMembers public class MessagingServiceEvent : ObjectiveC.NSObject {
  public enum MessagingServiceEventType : Swift.String {
    case AcceptStatusEvent
    case ChatStateEvent
    case ContentEvent
    case StructuredContentEvent
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NotificationDistributionType : Swift.String {
    case QUERY
    case REALTIME
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  final public let messagingServiceEventType: LPMessagingSDK.MessagingServiceEvent.MessagingServiceEventType
  final public let notificationDistributionType: LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType
  final public let data: LPMessagingSDK.GeneralResponse.ContentEventBody?
  final public let event: LPMessagingSDK.GeneralResponse.Event?
  @objc final public let eventId: Swift.String?
  @objc final public let dialog: LPMessagingSDK.Dialog!
  final public let sequence: Swift.Int?
  @objc final public let sender: LPMessagingSDK.User?
  @objc public var fileMessageCompletion: ((LPMessagingSDK.Message) -> ())?
  @objc public var fileMessageFailure: ((Foundation.NSError) -> ())?
  public init(messagingServiceEventType: LPMessagingSDK.MessagingServiceEvent.MessagingServiceEventType, data: LPMessagingSDK.GeneralResponse.ContentEventBody?, dialog: LPMessagingSDK.Dialog, sender: LPMessagingSDK.User?, sequence: Swift.Int?, notificationDistributionType: LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType)
  @objc public init?(failure: Swift.Void)
  convenience public init?(fromData data: LPMessagingSDK.GeneralResponse.ContentEventBody?, dialog: LPMessagingSDK.Dialog, distributionType: LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType, sender: LPMessagingSDK.User? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyPublishTextAction : LPMessagingSDK.QuickReplyAction {
  public var text: Swift.String
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class LPFileMetaDataContainer : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc override dynamic public init()
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum LPMessagingSDKFeature : Swift.Int {
  case userFileSharing
  case audioSharing
  case agentFileSharing
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LPLinkUtils {
  public enum LinkType {
    case email
    case url
    case phoneNumber
    case sms
    case facetime
    case facetimeAudio
    case hyperlink
    case otherType
    public static func == (a: LPMessagingSDK.LPLinkUtils.LinkType, b: LPMessagingSDK.LPLinkUtils.LinkType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentItem : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
public enum LPStructuredContentItemType : Swift.String {
  case text
  case button
  case image
  case map
  case linkPreview
  case vertical
  case horizontal
  case carousel
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum LPStructuredContentActionType : Swift.String {
  case navigate
  case link
  case publishText
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LPStructuredContentStyleSize : Swift.String {
  case small
  case medium
  case large
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum LPSpecielViewTags : Swift.Int {
  case IMAGE_VIEW_CLICK_EFFECT_VIEW
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc final public class LPWelcomeMessageOption : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let displayName: Swift.String
  @objc public init(value: Swift.String, displayName: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc final public class LPWelcomeMessage : ObjectiveC.NSObject {
  @objc public enum MessageFrequency : Swift.Int {
    case FirstTimeConversation
    case everyConversation
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LPWelcomeMessageError : Swift.Int, Swift.Error {
    case MaximumOptions
    case MaximumOptionTitleCharacters
    case MinimumOptionTitleCharacters
    public var description: Foundation.NSString {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public static var _nsErrorDomain: Swift.String {
      get
    }
  }
  @objc final public var message: Swift.String?
  @objc final public var frequency: LPMessagingSDK.LPWelcomeMessage.MessageFrequency
  @objc final public var options: [LPMessagingSDK.LPWelcomeMessageOption] {
    get
  }
  @objc final public var numberOfOptionsPerRow: Swift.Int {
    get
  }
  @objc final public var quickReply: LPMessagingSDK.QuickReplyItem? {
    @objc get
  }
  @objc public init(message: Swift.String? = nil, frequency: LPMessagingSDK.LPWelcomeMessage.MessageFrequency = .FirstTimeConversation)
  @objc final public func shouldDisplayDefaultMessage() -> Swift.Bool
  @objc final public func set(options: [LPMessagingSDK.LPWelcomeMessageOption]) throws
  @objc final public func clearOptions()
  @objc final public func set(NumberOfOptionsPerRow: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public enum LPFlowTag : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  case AUTHENTICATION
  case CSAT
  case CSDS
  case CONNECTION_STATE
  case CONVERSATION_SETUP
  case CONVERSATION_TABLE
  case DEFAULT
  case DEVELOPMENT
  case ENCRYPTION
  case FCR
  case FILE
  case HISTORY_CONTROL
  case IMAGE
  case INCA
  case KEYCHAIN
  case LOADING_VIEW
  case LOGGING
  case NETWORK
  case OPTUS
  case PERSISTENT
  case PERSISTENT_INITIAL_CONVERSATION
  case PUSHER
  case RESOLVED_SEPARATOR
  case SECURE_FORM
  case SCROLLING
  case SCROLL_POSITION
  case SCROLL_TO_BOTTOM_BUTTON
  case SOCKET
  case STRUCTURED_CONTENT
  case UNIT_TEST
  case UNREAD_MESSAGES
  case QUICK_REPLY
  case WELCOME_MESSAGE
  public static func == (a: LPMessagingSDK.LPFlowTag, b: LPMessagingSDK.LPFlowTag) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum LPLoggingLevel : Swift.Int, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  case OFF = 0
  case ERROR = 1
  case WARNING = 2
  case INFO = 3
  case DEBUG = 4
  case TRACE = 5
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LPLogger {
  public static let sharedInstance: LPMessagingSDK.LPLogger
  public func TRACE(_ message: Swift.String, tag: LPMessagingSDK.LPFlowTag = .DEFAULT, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, error: Swift.Error? = nil)
  public func DEBUG(_ message: Swift.String, tag: LPMessagingSDK.LPFlowTag = .DEFAULT, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, error: Swift.Error? = nil)
  public func INFO(_ message: Swift.String, tag: LPMessagingSDK.LPFlowTag = .DEFAULT, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, error: Swift.Error? = nil)
  public func WARNING(_ message: Swift.String, tag: LPMessagingSDK.LPFlowTag = .DEFAULT, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, error: Swift.Error? = nil)
  public func ERROR(_ message: Swift.String, tag: LPMessagingSDK.LPFlowTag = .DEFAULT, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, error: Swift.Error? = nil)
  @objc deinit
}
public enum QuickReplyActionType : Swift.String {
  case navigate
  case link
  case publishText
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class QuickReplyAction : ObjectiveC.NSObject, Foundation.NSCoding {
  public var ID: Swift.String
  public var type: Swift.String
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc public class LPConfig : ObjectiveC.NSObject {
  @objc public var retrieveAssignedAgentFromLastClosedConversation: Swift.Bool
  @objc public var recordingDurationLimit: Foundation.TimeInterval
  @objc public var enableAudioSharing: Swift.Bool
  @objc public var maxNumberOfSavedAudioFilesOnDisk: Swift.UInt
  @objc public var hideUIUntilAuthenticated: Swift.Bool
  @objc public var brandName: Swift.String
  @objc public var conversationBackgroundColor: UIKit.UIColor
  @objc public var customFontNameConversationFeed: Swift.String?
  @objc public var customFontNameNonConversationFeed: Swift.String?
  @objc public var customRefreshControllerImagesArray: Swift.Array<UIKit.UIImage>?
  @objc public var customRefreshControllerAnimationSpeed: Swift.Float
  @objc public var conversationBackgroundPortraitImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var conversationBackgroundLandscapeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc public var conversationBackgroundImageContentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc public var connectionStatusConnectingBackgroundColor: UIKit.UIColor
  @objc public var connectionStatusConnectingTextColor: UIKit.UIColor
  @objc public var connectionStatusFailedToConnectBackgroundColor: UIKit.UIColor
  @objc public var connectionStatusFailedToConnectTextColor: UIKit.UIColor
  @objc public var controllerBubbleTextColor: UIKit.UIColor
  @objc public var maxPreviousConversationToPresent: Swift.UInt
  @objc public var deleteClosedConversationOlderThanMonths: Swift.UInt
  @objc public var sendingMessageTimeoutInMinutes: Swift.UInt
  @objc public var conversationSeparatorTextColor: UIKit.UIColor
  @objc public var enableConversationSeparatorTextMessage: Swift.Bool
  @objc public var enableConversationSeparatorLine: Swift.Bool
  @objc public var conversationSeparatorFontSize: UIKit.UIFont.TextStyle
  @objc public var conversationSeparatorBottomPadding: Swift.Float
  @objc public var conversationSeparatorFontName: Swift.String?
  @objc public var conversationSeparatorViewBottomPadding: Swift.Float
  @objc public var conversationSeparatorTopPadding: Swift.Float
  @objc public var enableVibrationOnMessageFromRemoteUser: Swift.Bool
  @objc public var announceAgentTyping: Swift.Bool
  @objc public var showAgentTypingInMessageBubble: Swift.Bool
  @objc public var enableClientOnlyMasking: Swift.Bool
  @objc public var enableRealTimeMasking: Swift.Bool
  @objc public var clientOnlyMaskingRegex: Swift.String
  @objc public var realTimeMaskingRegex: Swift.String
  @objc public var lpDateFormat: Swift.String?
  @objc public var lpTimeFormat: Swift.String?
  @objc public var lpDateTimeFormat: Swift.String?
  @objc public var dateSeparatorTitleBackgroundColor: UIKit.UIColor
  @objc public var dateSeparatorTextColor: UIKit.UIColor
  @objc public var dateSeparatorLineBackgroundColor: UIKit.UIColor
  @objc public var dateSeparatorBackgroundColor: UIKit.UIColor
  @objc public var dateSeparatorFontSize: UIKit.UIFont.TextStyle
  @objc public var customFontNameDateSeparator: Swift.String?
  @objc public var dateSeparatorTopPadding: Swift.Float
  @objc public var dateSeparatorBottomPadding: Swift.Float
  @objc public var checkmarkVisibility: LPMessagingSDK.CheckmarksState
  @objc public var checkmarkReadColor: UIKit.UIColor
  @objc public var checkmarkDistributedColor: UIKit.UIColor
  @objc public var checkmarkSentColor: UIKit.UIColor
  @objc public var isReadReceiptTextMode: Swift.Bool
  @objc public var messageStatusNumericTimestampOnly: Swift.Bool
  @objc public var notificationShowDurationInSeconds: Swift.Double
  @objc public var enableRealTimeLinkPreview: Swift.Bool
  @objc public var enableLinkPreview: Swift.Bool
  @objc public var linkPreviewBackgroundColor: UIKit.UIColor
  @objc public var linkPreviewTitleTextColor: UIKit.UIColor
  @objc public var linkPreviewDescriptionTextColor: UIKit.UIColor
  @objc public var linkPreviewSiteNameTextColor: UIKit.UIColor
  @objc public var linkPreviewBorderWidth: Swift.Double
  @objc public var linkPreviewBorderColor: UIKit.UIColor
  @objc public var urlPreviewStyle: LPMessagingSDK.LPUrlPreviewStyle
  @objc public var urlRealTimePreviewBackgroundColor: UIKit.UIColor
  @objc public var urlRealTimePreviewBorderColor: UIKit.UIColor
  @objc public var urlRealTimePreviewBorderWidth: CoreGraphics.CGFloat
  @objc public var urlRealTimePreviewTitleTextColor: UIKit.UIColor
  @objc public var urlRealTimePreviewDescriptionTextColor: UIKit.UIColor
  @objc public var useNonOGTagsForLinkPreview: Swift.Bool
  @objc public var modalPresentationStyle: UIKit.UIModalPresentationStyle
  @objc public var loadingViewBlurEffect: UIKit.UIBlurEffect
  @objc public var loadingViewBackgroundColor: UIKit.UIColor
  @objc public var loadingViewTextColor: UIKit.UIColor
  @objc public var loadingViewProgressBackgroundColor: UIKit.UIColor?
  @objc public var loadingViewProgressTintColor: UIKit.UIColor?
  @objc public var region: LPMessagingSDK.LPRegionCode {
    @objc get
    @objc set
  }
  @objc public var language: LPMessagingSDK.LPLanguage {
    @objc get
    @objc set
  }
  @objc public var enableLpPusherService: Swift.Bool
  @objc public var conversationNavigationBackgroundColor: UIKit.UIColor
  @objc public var conversationNavigationTitleColor: UIKit.UIColor
  @objc public var conversationStatusBarStyle: UIKit.UIStatusBarStyle
  @objc public var lpNavigationBarLeftItemImageButton: UIKit.UIImage?
  @objc public var lpNavigationBarRightItemImageButton: UIKit.UIImage?
  @objc public var fileSharingFromAgent: Swift.Bool
  @objc public var fileSharingFromConsumer: Swift.Bool
  @objc public var maxNumberOfSavedFilesOnDisk: Swift.UInt
  @objc public var maxNumberOfSavedDocumentsOnDisk: Swift.UInt
  @objc public var photosharingMenuBackgroundColor: UIKit.UIColor
  @objc public var photosharingMenuButtonsBackgroundColor: UIKit.UIColor
  @objc public var photosharingMenuButtonsTintColor: UIKit.UIColor
  @objc public var photosharingMenuButtonsTextColor: UIKit.UIColor
  @objc public var cameraButtonEnabledColor: UIKit.UIColor
  @objc public var cameraButtonDisabledColor: UIKit.UIColor
  @objc public var fileCellLoaderFillColor: UIKit.UIColor
  @objc public var fileCellLoaderRingProgressColor: UIKit.UIColor
  @objc public var fileCellLoaderRingBackgroundColor: UIKit.UIColor
  @objc public var photoSharingOpenMenuImageButton: UIKit.UIImage?
  @objc public var photoSharingCloseMenuImageButton: UIKit.UIImage?
  @objc public var photoSharingMenuCameraImage: UIKit.UIImage?
  @objc public var photoSharingMenuLibraryImage: UIKit.UIImage?
  @objc public var fileSharingMenuFileImage: UIKit.UIImage?
  @objc public var fileSharingUniversalFileThumbnailimage: UIKit.UIImage?
  @objc public var fileSharingPDFFileThumbnailimage: UIKit.UIImage?
  @objc public var fileSharingPPTXFileThumbnailimage: UIKit.UIImage?
  @objc public var fileSharingDOCXFileThumbnailimage: UIKit.UIImage?
  @objc public var fileSharingXLSXFileThumbnailimage: UIKit.UIImage?
  @objc public var conversationEmptyStateTextColor: UIKit.UIColor
  @objc public var remoteFileStateTint: UIKit.UIColor
  @objc public var userFileStateTint: UIKit.UIColor
  @objc public var userPhotoStateTint: UIKit.UIColor
  @objc public var quickReplyButtonVerticalPadding: CoreGraphics.CGFloat
  @objc public var quickReplyButtonHorizontalPadding: CoreGraphics.CGFloat
  @objc public var quickReplyVerticalMargin: CoreGraphics.CGFloat
  @objc public var quickReplyHorizontalMargin: CoreGraphics.CGFloat
  @objc public var quickReplyButtonBorderWidth: CoreGraphics.CGFloat
  @objc public var conversationScrollConfiguration: LPMessagingSDK.LPConversationScrollConfiguration
  @objc public var secureFormBackButtonColor: UIKit.UIColor
  @objc public var secureFormUIStatusBarStyle: UIKit.UIStatusBarStyle
  @objc public var secureFormNavigationBackgroundColor: UIKit.UIColor
  @objc public var secureFormNavigationTitleColor: UIKit.UIColor
  @objc public var secureFormBubbleBackgroundColor: UIKit.UIColor
  @objc public var secureFormBubbleBorderColor: UIKit.UIColor
  @objc public var secureFormBubbleBorderWidth: Swift.Double
  @objc public var secureFormBubbleTitleColor: UIKit.UIColor
  @objc public var secureFormBubbleDescriptionColor: UIKit.UIColor
  @objc public var secureFormBubbleFillFormButtonTextColor: UIKit.UIColor
  @objc public var secureFormBubbleFillFormButtonBackgroundColor: UIKit.UIColor
  @objc public var secureFormBubbleFormImageTintColor: UIKit.UIColor
  @objc public var secureFormCustomFontName: Swift.String
  @objc public var secureFormHideLogo: Swift.Bool
  @objc public var secureFormBubbleLoadingIndicatorColor: UIKit.UIColor
  @objc public var sendButtonDisabledColor: UIKit.UIColor
  @objc public var sendButtonEnabledColor: UIKit.UIColor
  @objc public var sendButtonImage: UIKit.UIImage?
  @objc public var isSendMessageButtonInTextMode: Swift.Bool
  @objc public var enableStructuredContent: Swift.Bool
  @objc public var structuredContentBubbleBorderWidth: Swift.Double
  @objc public var structuredContentBubbleBorderColor: UIKit.UIColor
  @objc public var structuredContentBubbleTopLeftCornerRadius: Swift.Float
  @objc public var structuredContentBubbleTopRightCornerRadius: Swift.Float
  @objc public var structuredContentBubbleBottomLeftCornerRadius: Swift.Float
  @objc public var structuredContentBubbleBottomRightCornerRadius: Swift.Float
  @objc public var structuredContentMapLatitudeDeltaDeltaSpan: Swift.Double
  @objc public var structuredContentMapLongitudeDeltaSpan: Swift.Double
  @objc public var structuredContentButtonBorderColor: UIKit.UIColor
  @objc public var structuredContentButtonTextColor: UIKit.UIColor
  @objc public var structuredContentTextColor: UIKit.UIColor
  @objc public var csatSubmitButtonCornerRadius: Swift.Double
  @objc public var csatYesNoButtonsCornerRadius: Swift.Double
  @objc public var csatSubmitButtonBackgroundColor: UIKit.UIColor
  @objc public var csatSubmitButtonTextColor: UIKit.UIColor
  @objc public var csatRatingButtonSelectedColor: UIKit.UIColor
  @objc public var csatResolutionButtonSelectedColor: UIKit.UIColor
  @objc public var csatAllTitlesTextColor: UIKit.UIColor
  @objc public var csatResolutionHidden: Swift.Bool
  @objc public var csatAgentViewHidden: Swift.Bool
  @objc public var csatThankYouScreenHidden: Swift.Bool
  @objc public var csatNavigationBackgroundColor: UIKit.UIColor
  @objc public var csatNavigationTitleColor: UIKit.UIColor
  @objc public var csatSkipButtonColor: UIKit.UIColor
  @objc public var csatUIStatusBarStyle: UIKit.UIStatusBarStyle
  @objc public var csatShowSurveyView: Swift.Bool
  @objc public var csatSurveyExpirationInMinutes: Swift.UInt
  @objc public var systemBubbleTextColor: UIKit.UIColor
  @objc public var ttrShouldShow: Swift.Bool
  @objc public var ttrShowShiftBanner: Swift.Bool
  @objc public var ttrFirstTimeDelay: Swift.Double
  @objc public var ttrShouldShowTimestamp: Swift.Bool
  @objc public var ttrShowFrequencyInSeconds: Swift.UInt
  @objc public var showOffHoursBanner: Swift.Bool
  @objc public var ttrBannerBackgroundColor: UIKit.UIColor
  @objc public var ttrBannerTextColor: UIKit.UIColor
  @objc public var offHoursTimeZoneName: Swift.String
  @objc public var toastNotificationsEnabled: Swift.Bool
  @objc public var scrollToBottomButtonBackgroundColor: UIKit.UIColor
  @objc public var scrollToBottomButtonMessagePreviewTextColor: UIKit.UIColor
  @objc public var scrollToBottomButtonBadgeBackgroundColor: UIKit.UIColor
  @objc public var scrollToBottomButtonBadgeTextColor: UIKit.UIColor
  @objc public var scrollToBottomButtonArrowColor: UIKit.UIColor
  @objc public var unreadMessagesDividerBackgroundColor: UIKit.UIColor
  @objc public var unreadMessagesDividerTextColor: UIKit.UIColor
  @objc public var scrollToBottomButtonEnabled: Swift.Bool
  @objc public var scrollToBottomButtonMessagePreviewEnabled: Swift.Bool
  @objc public var unreadMessagesDividerEnabled: Swift.Bool
  @objc public var unreadMessagesCornersRadius: Swift.Float
  @objc public var scrollToBottomButtonCornerRadius: Swift.Float
  @objc public var scrollToBottomButtonBadgeCornerRadius: Swift.Float
  @objc public var remoteUserAvatarBackgroundColor: UIKit.UIColor
  @objc public var remoteUserAvatarLeadingPadding: Swift.Float
  @objc public var remoteUserAvatarTrailingPadding: Swift.Float
  @objc public var remoteUserAvatarIconColor: UIKit.UIColor
  @objc public var remoteUserDefaultAvatarImage: UIKit.UIImage?
  @objc public var remoteUserAvatarIconBorderWidth: CoreGraphics.CGFloat
  @objc public var remoteUserAvatarIconBorderColor: UIKit.UIColor
  @objc public var brandAvatarImage: UIKit.UIImage?
  @objc public var brandAvatarImageContentMode: UIKit.UIView.ContentMode
  @objc public var csatAgentAvatarBackgroundColor: UIKit.UIColor
  @objc public var csatAgentAvatarIconColor: UIKit.UIColor
  @objc public var inputTextViewContainerBackgroundColor: UIKit.UIColor
  @objc public var inputTextViewCornerRadius: Swift.Double
  @objc public var inputTextViewTopBorderColor: UIKit.UIColor
  @objc public var remoteUserBubbleBackgroundColor: UIKit.UIColor
  @objc public var remoteUserBubbleBorderColor: UIKit.UIColor
  @objc public var remoteUserBubbleLinkColor: UIKit.UIColor
  @objc public var remoteUserBubbleTextColor: UIKit.UIColor
  @objc public var remoteUserBubbleBorderWidth: Swift.Double
  @objc public var remoteUserBubbleTimestampColor: UIKit.UIColor
  @objc public var remoteUserTypingTintColor: UIKit.UIColor
  @objc public var remoteUserBubbleLongPressOverlayColor: UIKit.UIColor
  @objc public var remoteUserBubbleLongPressOverlayAlpha: Swift.Float
  @objc public var remoteUserBubbleTopLeftCornerRadius: Swift.Float
  @objc public var remoteUserBubbleTopRightCornerRadius: Swift.Float
  @objc public var remoteUserBubbleBottomLeftCornerRadius: Swift.Float
  @objc public var remoteUserBubbleBottomRightCornerRadius: Swift.Float
  @objc public var userBubbleBackgroundColor: UIKit.UIColor
  @objc public var userBubbleBorderColor: UIKit.UIColor
  @objc public var userBubbleLinkColor: UIKit.UIColor
  @objc public var userBubbleTextColor: UIKit.UIColor
  @objc public var userBubbleBorderWidth: Swift.Double
  @objc public var userBubbleTimestampColor: UIKit.UIColor
  @objc public var userBubbleSendStatusTextColor: UIKit.UIColor
  @objc public var userBubbleErrorTextColor: UIKit.UIColor
  @objc public var userBubbleErrorBorderColor: UIKit.UIColor
  @objc public var enableBubblesOverlayOnLongPress: Swift.Bool
  @objc public var userBubbleLongPressOverlayColor: UIKit.UIColor
  @objc public var userBubbleLongPressOverlayAlpha: Swift.Float
  @objc public var userBubbleTopLeftCornerRadius: Swift.Float
  @objc public var userBubbleTopRightCornerRadius: Swift.Float
  @objc public var userBubbleBottomLeftCornerRadius: Swift.Float
  @objc public var userBubbleBottomRightCornerRadius: Swift.Float
  @objc public var bubbleEmailLinksRegex: Swift.String
  @objc public var bubbleUrlLinksRegex: Swift.String?
  @objc public var bubblePhoneLinksRegex: Swift.String?
  @objc public var bubbleTopPadding: Swift.Float
  @objc public var bubbleBottomPadding: Swift.Float
  @objc public var bubbleLeadingPadding: Swift.Float
  @objc public var bubbleTrailingPadding: Swift.Float
  @objc public var bubbleTimestampBottomPadding: Swift.Float
  @objc public var bubbleTimestampTopPadding: Swift.Float
  @objc public var enableEnlargeEmojies: Swift.Bool
  @objc public var customButtonImage: UIKit.UIImage?
  @objc public var markdownHyperlinkFromAgent: Swift.Bool
  @objc public var remoteUserBubbleHyperlinkColor: UIKit.UIColor
  @objc @available(iOS, deprecated: 13.0.0, obsoleted: 14.0.0, message: "use region instead")
  public var country: Swift.String?
  @objc @available(iOS, obsoleted: 10.0, message: "fileSharingFromAgent")
  public var enableFileSharing: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "fileSharingFromConsumer")
  public var enablePhotoSharing: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "use secureFormUIStatusBarStyle")
  public var secureFormUIStatusBarStyleLightContent: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "use enableStructuredContent instead")
  public var enableStrucutredContent: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "use csatUIStatusBarStyle instead")
  public var csatUIStatusBarStyleLightContent: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "Urgent button was excluded from TTR view. Marking conversation as urgent is available now only from conversation menu")
  public var showUrgentButtonInTTRNotification: Swift.Bool
  @objc @available(iOS, obsoleted: 10.0, message: "instead of using opacity alpha, use supported light/dark colors on 'ttrBannerBackgroundColor' and 'ttrBannerTextColor'")
  public var ttrBannerOpacityAlpha: Swift.Double
  @objc @available(iOS, obsoleted: 10.0, message: "use customButtonImage instead")
  public var customButtonIconName: Swift.String
  @objc @available(iOS, obsoleted: 10.0, message: "use customButtonAccessibilityDescription key in Localization languages files instead")
  public var customButtonDescription: Swift.String
  @objc @available(iOS, obsoleted: 10.0, message: "use readReceiptTextDistributed key in Localization languages files instead")
  public var readReceiptTextDistributed: Swift.String {
    @objc get
    @objc set
  }
  @objc @available(iOS, obsoleted: 10.0, message: "use readReceiptTextSent key in Localization languages files instead")
  public var readReceiptTextSent: Swift.String {
    @objc get
    @objc set
  }
  @objc @available(iOS, obsoleted: 10.0, message: "use readReceiptTextRead key in Localization languages files instead")
  public var readReceiptTextRead: Swift.String {
    @objc get
    @objc set
  }
  @objc @available(iOS, obsoleted: 10.0, message: "underline is not used any more. To change background color of TextView container use inputTextViewContainerBackgroundColor")
  public var editTextUnderlineColor: UIKit.UIColor
  @objc @available(iOS, obsoleted: 10.0, message: "use checkmarkReadColor instead")
  public var checkmarkColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var allowURLProtocolSniffing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var accountEnvironment: LPMessagingSDK.LPAccountEnviroment
  @objc public var csdsDomain: Swift.String
  @objc public var lpTagDomain: Swift.String
  @objc public var inputTextViewMaxHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public static var defaultConfiguration: LPMessagingSDK.LPConfig
  @objc public func resetToDefaultConfiguration()
  @objc override dynamic public func setValue(_ value: Any?, forUndefinedKey key: Swift.String)
  @objc public class func printAllConfigurations()
  @objc deinit
}
public class ConversationDetails : Swift.CustomStringConvertible {
  public struct CloseReason {
    public static let CLOSE_REASON_AGENT: Swift.String
    public static let CLOSE_REASON_CONSUMER: Swift.String
    public static let CLOSE_REASON_TIMEOUT: Swift.String
    public static let CLOSE_REASON_SYSTEM: Swift.String
    public static let CLOSE_REASON_UNKNOWN: Swift.String
  }
  public struct TTR_TYPE {
    public static let TTR_TYPE_CUSTOM: Swift.String
    public static let TTR_TYPE_NORMAL: Swift.String
    public static let TTR_TYPE_PRIORITIZED: Swift.String
    public static let TTR_TYPE_URGENT: Swift.String
  }
  public struct DELAY_TYPE {
    public static let DELAY_TYPE_HOLIDAY: Swift.String
    public static let DELAY_TYPE_NIGHT: Swift.String
    public static let DELAY_TYPE_WEEKEND: Swift.String
  }
  public struct CSAT_STATUS {
    public static let CSAT_STATUS_FILLED: Swift.String
    public static let CSAT_STATUS_PARTIALLY_FILLED: Swift.String
    public static let CSAT_STATUS_SKIPPED: Swift.String
    public static let CSAT_STATUS_EMPTY: Swift.String
  }
  public struct participant : Swift.Codable {
    public var id: Swift.String?
    public var role: Swift.String
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public class DialogDetails {
    public var dialogId: Swift.String?
    public var participants: [LPMessagingSDK.ConversationDetails.participant]?
    public var dialogType: Swift.String?
    public var channelType: Swift.String?
    public var state: Swift.String?
    public var closedBy: Swift.String?
    public var startTs: Foundation.Date?
    public var endTs: Foundation.Date?
    public var metaData: [Swift.String : Any]?
    public var assignedAgents: [LPMessagingSDK.ConversationDetails.participant] {
      get
      set
    }
    public var consumers: [LPMessagingSDK.ConversationDetails.participant] {
      get
      set
    }
    public var managers: [LPMessagingSDK.ConversationDetails.participant] {
      get
      set
    }
    public var readers: [LPMessagingSDK.ConversationDetails.participant] {
      get
      set
    }
    public var controllers: [LPMessagingSDK.ConversationDetails.participant] {
      get
      set
    }
    public var metaDataLastUpdateTs: Foundation.Date?
    public init(dialogId: Swift.String?, participants: [LPMessagingSDK.ConversationDetails.participant]?, dialogType: Swift.String?, channelType: Swift.String?, closedBy: Swift.String?, startTs: Foundation.Date?, endTs: Foundation.Date?, metaDataLastUpdateTs: Foundation.Date?, state: Swift.String?)
    public init(jsonDict: [Swift.String : Any])
    @objc deinit
  }
  public class CSAT {
    public var csatRate: Swift.Int?
    public var csatResolutionConfirmation: Swift.Bool?
    public var status: Swift.String?
    public init(csatRate: Swift.Int?, csatResolutionConfirmation: Swift.Bool?, status: Swift.String?)
    @objc deinit
  }
  public var conversationID: Swift.String
  public var participants: [LPMessagingSDK.ConversationDetails.participant]?
  public var dialogs: [LPMessagingSDK.ConversationDetails.DialogDetails]
  public var state: Swift.String?
  public var stage: Swift.String?
  public var closeReason: Swift.String?
  public var startTs: Foundation.Date?
  public var endTs: Foundation.Date?
  public var metaDataLastUpdateTs: Foundation.Date?
  public var ttr: LPMessagingSDK.GeneralResponse.TTR?
  public var delay: LPMessagingSDK.GeneralResponse.Delay?
  public var manualETTR: Foundation.NSNumber?
  public var topic: Swift.String?
  public var csatResolutionConfirmation: Swift.Bool?
  public var isClosedByAgent: Swift.Bool
  public var csat: LPMessagingSDK.ConversationDetails.CSAT?
  public var resultChangeType: Swift.String?
  public var assignedAgents: [LPMessagingSDK.ConversationDetails.participant] {
    get
    set
  }
  public var consumers: [LPMessagingSDK.ConversationDetails.participant] {
    get
    set
  }
  public var managers: [LPMessagingSDK.ConversationDetails.participant] {
    get
    set
  }
  public var readers: [LPMessagingSDK.ConversationDetails.participant] {
    get
    set
  }
  public var controllers: [LPMessagingSDK.ConversationDetails.participant] {
    get
    set
  }
  public init(jsonDict: [Swift.String : Any], conversationID: Swift.String)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
extension ConversationDetails {
  public var isResolvedAutomatically: Swift.Bool {
    get
  }
}
@objc public class QuickReplyItem : ObjectiveC.NSObject, Foundation.NSCoding {
  public var sequence: Swift.Int
  public var ownerMessageUID: Swift.String?
  public var maxItemsPerRow: Swift.Int?
  public var buttonsDetails: [LPMessagingSDK.QuickReplyButtonDetails]?
  public init(sequence: Swift.Int)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UserProfile : LPMessagingSDK.User {
  @objc var email: Swift.String { get set }
  @objc var fbProfile: Swift.String? { get set }
  @objc var token: Swift.String? { get set }
}
public enum HTTPMethod : Swift.String {
  case PUT
  case POST
  case GET
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public typealias HTTPRequestSuccessHandler = (Any?) -> ()
public typealias HTTPRequestFailureHandler = (Foundation.NSError?) -> ()
public typealias amsReadyCompletion = () -> ()
public let MESSAGE_MAX_CHARACTERS: Swift.Int
public let FILE_CAPTION_MAX_CHARACTERS: Swift.Int
public let MIN_UI_ELEMENT_DURATION_DURING_VOICEOVER: Swift.Double
public let VISITOR_TYPING_INACTIVITY_DELAY: Swift.Double
public let DOTS_COUNTS_FOR_TRUNCATING_STRINGS: Swift.Int
public let MAX_SWIFT_ALLOWED_UPLOAD_SIZE_IN_BYTE: Swift.Int
public let MAX_ALLOWED_UPLOAD_SIZE_IN_MB: Swift.Double
public let MAX_ALLOWED_UPLOAD_SIZE_IN_MB_INT: Swift.Int
public let CELL_PHOTO_WIDTH: CoreGraphics.CGFloat
public let THUMBNAIL_MAX_HEIGHT_SIZE: CoreGraphics.CGFloat
public let THUMBNAIL_MAX_WIDTH_SIZE: CoreGraphics.CGFloat
public let PHOTO_MAX_HEIGHT_SIZE: CoreGraphics.CGFloat
public let PHOTO_MAX_WIDTH_SIZE: CoreGraphics.CGFloat
public let FULL_PHOTO_COMPRESSION: CoreGraphics.CGFloat
public let AUDIO_RECORDING_SAMPLE_RATE: Swift.Int
public let AUDIO_RECORDING_BIT_RATE: Swift.Int
public let AUDIO_RECORDING_CHANNELS: Swift.Int
public let GRACEFUL_PAUSE_FOR_DICTATION: Swift.Double
public let CONNECTING_SILENTLY_DURATION: Swift.Double
public let CONNECTING_DURATION: Swift.Double
public let MAX_SOCKET_CONNECT_RETRIES: Swift.Int
public let SOCKET_CONNECT_RETRY_DELAY: Swift.Double
public let SOCKET_PING_REQUEST_DELAY: Swift.Double
public let SOCKET_PONG_TIMEOUT: Swift.Double
public let KEEP_SOCKET_OPEN_IN_BACKGROUND_FOR_MAX_SECONDS: Swift.Double
public let minutesToRefreshUserProfile: Swift.Int
public let PULL_DOWN_TO_REFRESH_HEIGHT_OFFSET: Swift.Int
public let HTTP_PREFIX: Swift.String
public let HTTPS_PREFIX: Swift.String
public let EMAIL_PREFIX: Swift.String
public let PHONE_PREFIX: Swift.String
public let SMS_PREFIX: Swift.String
public let FACETIME_PREFIX: Swift.String
public let FACETIME_AUDIO_PREFIX: Swift.String
public let HYPERLINK: Swift.String
public let PDF_FILE_EXTENSION: Swift.String
public let PPTX_FILE_EXTENSION: Swift.String
public let XLSX_FILE_EXTENSION: Swift.String
public let DOCX_FILE_EXTENSION: Swift.String
public let JPEG_FILE_EXTENSION: Swift.String
public let UNIVERSAL_FILE_UTI: Swift.String
public let PDF_FILE_UTI: Swift.String
public let PPTX_FILE_UTI: Swift.String
public let XLSX_FILE_UTI: Swift.String
public let DOCX_FILE_UTI: Swift.String
public let QUERY_HISTORY_COMPLETED_KEY: Swift.String
public let QUERY_HISTORY_TOTAL_KEY: Swift.String
public let APNS_CERTIFICATE_NAME_FIELD: Swift.String
public let TIME_AGO_FORMAT: Swift.String
public let LP_ERROR_CONTENT_MESSAGE: Swift.String
public let LOADER: Swift.String
public let DEST: Swift.String
public let SET_PROFILE_IMG: Swift.String
public let RING_PUSH_TAPPED: Swift.String
public let APP_ID: Swift.String
public let SUPPORTED_FILE_UTI_COLLECTION: [Swift.String]
public let SUPPORTED_FILE_EXTENSION_COLLECTION: [Swift.String]
public enum TokenType : Swift.Int {
  case regular
  case voip
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum LPRecorderStatus : Swift.String {
  case none
  case stopped
  case timeLimited
  case canceled
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LPPlayerStatus : Swift.String {
  case none
  case stopped
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentType : Swift.String {
  case text
  case file
  case formInvitation
  case formSubmission
  case structuredContent
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum CSDSService : Swift.String {
  case asyncMessaging
  case idp
  case swift
  case acCdn
  case leCdn
  case loggos
  case pusher
  case tokenizer
  case adminArea
  case liveEngage
  case agentVep
  case engagementHistory
  case accountConfigReadWrite
  case accountConfigReadOnly
  case shark
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum LPConversationCloseReason : Swift.Int {
  case agent = 0
  case consumer
  case system
  public init(closeReason: Swift.String)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum AgentState : Swift.String {
  case ONLINE
  case OFFLINE
  case AWAY
  case BACK_SOON
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ChannelType : Swift.String {
  case MESSAGING
  case LIVECHAT
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RoleType : Swift.String {
  case ASSIGNED_AGENT
  case AGENT
  case CONSUMER
  case MANAGER
  case READER
  case CONTROLLER
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum AMSState : Swift.Int {
  case IN_PROCESS = 0
  case NETWORK_REACHABLE = 1
  case CSDS_REACHABLE = 2
  case VALID_TOKEN = 3
  case OPENING_SOCKET = 4
  case VALID_SOCKET = 5
  case VALID_USERID = 6
  case READY = 7
  case READY_WITH_DATA = 8
  case SDK_ERROR = -1
  case GENERAL_ERROR = -2
  case NETWORK_UNREACHABLE = -3
  case CSDS_UNREACHABLE = -4
  case NO_TOKEN = -5
  case CLOSING_SOCKET = -6
  case SOCKET_UNREACHABLE = -7
  case NO_USERID = -8
  case NO_SUBSCRIPTION = -9
  case CERT_PINNING_FAILED = -10
  public func description() -> Swift.String
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public enum InactivityState : Swift.Int {
  case CONVERSATIONS_SCREEN_NOT_ACTIVE
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum AMSStateError : Swift.String {
  case NETWORK_UNREACHABLE
  case CSDS_UNREACHABLE
  case NO_TOKEN
  case SOCKET_UNREACHABLE
  case NO_USERID
  case NO_SUBSCRIPTION
  case GENERAL_ERROR
  case CERT_PINNING_FAILED
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum LPPermissionTypes : Swift.Int {
  case location
  case contacts
  case calendars
  case reminders
  case photos
  case bluetooth
  case microphone
  case speechRecognition
  case camera
  case health
  case homekit
  case mediaLibrary
  case motionAndFitness
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct LPNotificationName {
  public static let CSAT_SCORE_SUBMISSION_DID_FINISH: Foundation.Notification.Name
  public static let SDK_OBSELETE_VERSION: Foundation.Notification.Name
  public static let SDK_AUTHENTICATION_FAILED: Foundation.Notification.Name
  public static let SDK_TOKEN_EXPIRED: Foundation.Notification.Name
  public static let SDK_CERT_PINNING_FAILED: Foundation.Notification.Name
  public static let SDK_CONNECTION_ERROR: Foundation.Notification.Name
  public static let SDK_ERROR: Foundation.Notification.Name
  public static let OFF_HOURS_STATE_CHANGED: Foundation.Notification.Name
  public static let AMS_STATE_CHANGED: Foundation.Notification.Name
  public static let AMS_CONVERSATION_CHAT_STATE_CHANGED: Foundation.Notification.Name
  public static let CONVERSATION_STARTED: Foundation.Notification.Name
  public static let CONVERSATION_RESOLVED: Foundation.Notification.Name
  public static let REACHABILITY_CHANGED: Foundation.Notification.Name
  public static let CONVERSATION_CSAT_SUBMISSION_TAPPED: Foundation.Notification.Name
  public static let CONVERSATION_CSAT_DID_LOAD: Foundation.Notification.Name
  public static let AGENT_AVATAR_TAPPED: Foundation.Notification.Name
  public static let AGENT_DETAILS_FETCHED: Foundation.Notification.Name
  public static let MESSAGE_NOTIFICATION_RECEIVED: Foundation.Notification.Name
  public static let CONVERSATION_VIEWCONTROLLER_REMOVED: Foundation.Notification.Name
  public static let CONVERSATION_VIEWCONTROLLER_DID_LOAD: Foundation.Notification.Name
  public static let CONVERSATION_VIEWCONTROLLER_WILL_APPEAR: Foundation.Notification.Name
  public static let ACTIVE_AGENT_DETAILS_CHANGED: Foundation.Notification.Name
  public static let CSDS_DOMAIN_CHANGED: Foundation.Notification.Name
  public static let SOCKET_OPENED: Foundation.Notification.Name
  public static let SOCKET_CLOSED: Foundation.Notification.Name
  public static let CONNECTION_PROCESS_FAILED: Foundation.Notification.Name
  public static let CONNECTION_PROCESS_RETRIES_FAILED: Foundation.Notification.Name
  public static let AGENT_STATE_CHANGED: Foundation.Notification.Name
  public static let BACKGROUND_IMAGE_CONFIGURATION_CHANGED: Foundation.Notification.Name
  public static let UNAUTHENTICATED_USER_EXPIRED: Foundation.Notification.Name
  public static let REGISTRATION_TO_PUSHER_SUCCEEDED: Foundation.Notification.Name
  public static let REGISTRATION_TO_PUSHER_FAILED: Foundation.Notification.Name
  public static let PUSHER_LOGIN_FLOW_STARTED: Foundation.Notification.Name
  public static let AGENT_DETAILS_IMAGE_CHANGED: Foundation.Notification.Name
  public static let LP_SECURED_FORM_FINISHED_LOADING: Foundation.Notification.Name
  public static let LP_FINISHED_FETCHING_HISTORY: Foundation.Notification.Name
}
public enum LPKeychainKey : Swift.String, Swift.CaseIterable {
  case TOKEN
  case NON_AUTH_TOKEN
  case ENCRYPTION
  case SESSION_ID
  case VISITOR_ID
  case CONNECTOR_ID
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [LPMessagingSDK.LPKeychainKey]
  public static var allCases: [LPMessagingSDK.LPKeychainKey] {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct LPBlurEffects {
  public static let lpLoadingViewEffect: UIKit.UIBlurEffect
}
public struct LPColor {
  public static let lpBackground: UIKit.UIColor
  public static let lpLink: UIKit.UIColor
  public static let lpLabel: UIKit.UIColor
  public static let lpSecondaryLabel: UIKit.UIColor
  public static let lpIndigo: UIKit.UIColor
  public static let lpPink: UIKit.UIColor
  public static let lpOrange: UIKit.UIColor
  public static let lpBlue: UIKit.UIColor
  public static let lpLightBlue: UIKit.UIColor
  public static let lpGreen: UIKit.UIColor
  public static let lpRed: UIKit.UIColor
  public static let lpBlack: UIKit.UIColor
  public static let lpWhite: UIKit.UIColor
  public static let lpClear: UIKit.UIColor
  public static let lpGray: UIKit.UIColor
  public static let lpGray2: UIKit.UIColor
  public static let lpGray3: UIKit.UIColor
  public static let lpGray4: UIKit.UIColor
  public static let lpGray5: UIKit.UIColor
  public static func rgba(r: CoreGraphics.CGFloat, g: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat, a: CoreGraphics.CGFloat = 1.0) -> UIKit.UIColor
}
public struct Fields {
  public static let CONVERSATION_ID: Swift.String
  public static let DIALOG_ID: Swift.String
  public static let EVENT: Swift.String
  public static let EVENTID: Swift.String
  public static let MSG_SEQUENCE: Swift.String
  public static let SEQUENCE_LIST: Swift.String
  public static let FROM_SEQUENCE: Swift.String
  public static let STATUS: Swift.String
  public static let SENDER_ID: Swift.String
  public static let CHAT_STATE: Swift.String
  public static let ENDPOINT_TIMESTAMP: Swift.String
  public static let SERVER_TIMESTAMP: Swift.String
  public static let CONTENT_TYPE: Swift.String
  public static let MESSAGE: Swift.String
  public static let MAX_QUANTITY: Swift.String
  public static let NEWER_THAN_SEQUENCE: Swift.String
  public static let OLDER_THAN_SEQUENCE: Swift.String
  public static let EVENT_TYPE: Swift.String
  public static let REJECT_CODE: Swift.String
  public static let REJECT_DESCRIPTION: Swift.String
  public static let FILE_SIZE: Swift.String
  public static let FILE_TYPE: Swift.String
  public static let CAPTION: Swift.String
  public static let RELATIVE_PATH: Swift.String
  public static let PREVIEW_BASE_64: Swift.String
  public static let FORM_ID: Swift.String
  public static let INVITATION_ID: Swift.String
  public static let TITLE: Swift.String
  public static let UPLOADABLE: Swift.String
  public static let SUBMISSION_ID: Swift.String
}
public struct LPConstants {
}
@objc public protocol Campaign : LPMessagingSDK.EntityInterface {
  @objc var uid: Swift.String { get set }
  @objc var name: Swift.String { get set }
  @objc var image: Swift.String { get set }
  @objc var ownerBrand: LPMessagingSDK.Brand { get set }
}
public enum UserType : Swift.String {
  case Consumer
  case Agent
  case Controller
  case Reader
  case Manager
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public protocol User : LPMessagingSDK.EntityInterface {
  @objc var uid: Swift.String { get set }
  @objc var firstName: Swift.String { get set }
  @objc var lastName: Swift.String { get set }
  @objc var nickName: Swift.String? { get set }
  @objc var profileImageURL: Swift.String? { get set }
  @objc var coverImageURL: Swift.String? { get set }
  @objc var phoneNumber: Swift.String? { get set }
  @objc var typeRaw: Swift.String { get set }
  @objc var bio: Swift.String? { get set }
  @objc var userMessages: Foundation.NSSet { get set }
  @objc var isSaved: Swift.Bool { get set }
  @objc var lastUpdated: Foundation.Date? { get set }
  @objc var employeeID: Swift.String? { get set }
}
extension User {
  public var type: LPMessagingSDK.UserType {
    get
  }
  public var isConsumer: Swift.Bool {
    get
  }
  public var isController: Swift.Bool {
    get
  }
  public var fullName: Swift.String {
    get
  }
}
@objcMembers @objc public class LPConversationHistoryControlParam : ObjectiveC.NSObject {
  @objc public var historyConversationsMaxDays: Swift.Int
  @objc public var historyConversationsStateToDisplay: LPMessagingSDK.LPConversationsHistoryStateToDisplay
  @objc public var historyConversationMaxDaysType: LPMessagingSDK.LPConversationHistoryMaxDaysDateType
  @objc public var isEnable: Swift.Bool {
    @objc get
  }
  @objc public init(historyConversationsStateToDisplay: LPMessagingSDK.LPConversationsHistoryStateToDisplay = .all, historyConversationsMaxDays: Swift.Int = -1, historyMaxDaysType: LPMessagingSDK.LPConversationHistoryMaxDaysDateType = .startConversationDate)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func isEquals(to params: LPMessagingSDK.LPConversationHistoryControlParam) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol Account : LPMessagingSDK.EntityInterface {
  @objc var accountId: Swift.String { get set }
  @objc var brand: LPMessagingSDK.Brand { get set }
}
public enum DialogType : Swift.String {
  case MAIN
  case POST_SURVEY
  case AGENT
  case OTHER
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum ChannelTypes : Swift.String {
  case MESSAGING
  case COBROWSE
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ChatState : Swift.String {
  case Active
  case Composing
  case Gone
  case Inactive
  case Pause
  case Background
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum DialogState : Swift.String {
  case Open
  case Close
  case Locked
  case Created
  case Pending
  case Other
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public protocol Dialog : LPMessagingSDK.EntityInterface {
  @objc var assignedAgentId: Swift.String? { get set }
  @objc var channelType: Swift.String? { get set }
  @objc var closeDate: Foundation.Date? { get set }
  @objc var lastUpdateDate: Foundation.Date? { get set }
  @objc var closeReason: Swift.String? { get set }
  @objc var creationDate: Foundation.Date { get set }
  @objc var dialogType: Swift.String? { get set }
  @objc var lastReceivedSequence: Foundation.NSNumber { get set }
  @objc var resolved: Swift.Bool { get set }
  @objc var stateRaw: Swift.String { get set }
  @objc var uid: Swift.String? { get set }
  @objc var handlerId: Swift.String { get set }
  @objc var ownerConversation: LPMessagingSDK.Conversation { get set }
  @objc var participants: Foundation.NSSet { get set }
  @objc var dialogMessages: Foundation.NSOrderedSet { get set }
  @objc var chatStateRaw: Swift.String { get set }
  @objc var shouldQueryMessages: Swift.Bool { get }
}
extension Dialog {
  public var chatState: LPMessagingSDK.ChatState {
    get
    set(newValue)
  }
  public var state: LPMessagingSDK.DialogState {
    get
  }
  public var lastMessageObj: LPMessagingSDK.Message? {
    get
  }
  public var sortedMessages: [LPMessagingSDK.Message] {
    get
  }
  public var isClose: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public var logDescription: Swift.String {
    get
  }
  public var isOpen: Swift.Bool {
    get
  }
  public var isAvaliable: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentStyle : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol EntityInterface : LPMessagingSDK.EntityEquatableInterface {
}
@objc public protocol EntityEquatableInterface {
  @objc var uniqueIdentifier: Swift.String { get }
  @objc var uniqueHashValue: Swift.Int { get }
  @objc func isThisEqualTo(_ object: LPMessagingSDK.EntityInterface) -> Swift.Bool
}
public struct LPStructuredContentSampleData {
  public static func getSCWithTextItem(text: Swift.String = "product name") -> Swift.String
  public static func getSCWithMapItem() -> Swift.String
  public static func getSCWithImageItem(imageURL: Swift.String = "https://static.pexels.com/photos/4641/iphone-smartphone-taking-photo-graffiti.jpg") -> Swift.String
  public static func getSCWithButtonItem(buttonTitle: Swift.String = "Add to cart") -> Swift.String
  public static func getSCWithBasicItem() -> Swift.String
  public static func getSCHorizontalItem(buttonTitle: Swift.String = "buy") -> Swift.String
  public static func getSCVerticalItem(textTitle: Swift.String = "IPhone 8") -> Swift.String
  public static func getSCVerticalAndHorizontalItem(textTitle: Swift.String = "IPhone 8") -> Swift.String
  public static func getCarouselWithMix() -> Swift.String
  public static func getCarouselWithLinks() -> Swift.String
  public static func getCarouselWithMap() -> Swift.String
  public static func getCarouselWithButtons() -> Swift.String
  public static func getCarouselWithImages() -> Swift.String
  public static func getCarouselWithTextStyling() -> Swift.String
  public static func getAll() -> [Swift.String]
}
@objc public protocol CustomBoard : LPMessagingSDK.EntityInterface {
  @objc var uid: Swift.String { get set }
  @objc var linkPreviewItems: Foundation.NSOrderedSet { get set }
  @objc var ownerMessage: LPMessagingSDK.Message { get set }
}
@objcMembers @objc public class LPCampaignInfo : ObjectiveC.NSObject {
  @objc public var campaignId: Swift.Int
  @objc public var engagementId: Swift.Int
  @objc public var contextId: Swift.String?
  @objc public var sessionId: Swift.String?
  @objc public var visitorId: Swift.String?
  @objc public init(campaignId: Swift.Int, engagementId: Swift.Int, contextId: Swift.String?, sessionId: Swift.String? = nil, visitorId: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc public class LPMonitoringInitParams : ObjectiveC.NSObject {
  @objc public init(appInstallID: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc public class LPGetEngagementResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var engagementDetails: [LPMessagingSDK.LPEngagementDetails]?
  @objc public var sessionId: Swift.String?
  @objc public var visitorId: Swift.String?
  @objc public var pageId: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objcMembers @objc public class LPEngagementDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var campaignId: Swift.Int {
    @objc get
  }
  @objc public var engagementId: Swift.Int {
    @objc get
  }
  @objc public var connectorId: Swift.Int {
    @objc get
  }
  @objc public var engagementRevision: Swift.Int {
    @objc get
  }
  @objc public var conversationId: Swift.String?
  @objc public var status: Swift.String?
  @objc public var contextId: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public enum SocketType : Swift.Int {
  case consumer
  case agent
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc public class LPMonitoringParams : ObjectiveC.NSObject {
  @objc public var entryPoints: [Swift.String]?
  @objc public var engagementAttributes: [[Swift.String : Any]]?
  @objc public var pageId: Swift.String?
  @objc public init(entryPoints: [Swift.String]?, engagementAttributes: [[Swift.String : Any]]?, pageId: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LPMonitoringDataManager : ObjectiveC.NSObject {
  public var monitoringIdentities: [LPMessagingSDK.LPMonitoringIdentity] {
    get
    set
  }
  public var monitoringParam: LPMessagingSDK.LPMonitoringParams?
  public var isInitialized: Swift.Bool {
    get
  }
  public static let instance: LPMessagingSDK.LPMonitoringDataManager
  public func initialize(accountId: Swift.String, monitoringInitParms: LPMessagingSDK.LPMonitoringInitParams)
  public func clearEngagementMonitoring()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentNavigateAction : LPMessagingSDK.LPStructuredContentAction {
  public var latitude: CoreLocation.CLLocationDegrees {
    get
  }
  public var longitude: CoreLocation.CLLocationDegrees {
    get
  }
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc public class LPMonitoringIdentity : ObjectiveC.NSObject {
  @objc public init(consumerID: Swift.String? = nil, issuer: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class LPSendSDEResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var sessionId: Swift.String?
  @objc public var visitorId: Swift.String?
  @objc public var pageId: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers open class NSBouncyView : UIKit.UIView {
  open func setView(_ view: UIKit.UIView)
  open func setColor(color: UIKit.UIColor)
  open func toggleVisibility(show: Swift.Bool, willStart: @escaping () -> (), didComplete: @escaping () -> (), didFail: @escaping () -> ())
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension LPMessaging {
  @objc dynamic public func registerPushNotifications(token: Foundation.Data, notificationDelegate: LPMessagingSDK.LPMessagingSDKNotificationDelegate? = nil, alternateBundleID: Swift.String? = nil, authenticationParams: LPMessagingSDK.LPAuthenticationParams? = nil)
  @objc dynamic public func registerVoipPushNotifications(token: Foundation.Data, alternateBundleID: Swift.String? = nil)
  @objc dynamic public func unregisterPusher(brandId: Swift.String, completion: @escaping () -> (), failure: @escaping (Swift.Error) -> ())
  @objc dynamic public class func setPusherToken(token: Foundation.Data, alternateBundleID: Swift.String? = nil)
  @objc dynamic public class func setPusherVoipToken(token: Foundation.Data, alternateBundleID: Swift.String? = nil)
  @objc @available(*, deprecated, message: "Use public func getUnreadMessagesCount(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams? = nil, completion: @escaping (_ badgeCounter: Int) -> (), failure: @escaping (_ error: Error) -> ())")
  dynamic public class func getUnreadMessagesCount(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, completion: @escaping (Swift.Int) -> (), failure: @escaping (Swift.Error) -> ())
  @objc @available(*, deprecated, message: "Use public func getUnreadMessagesCount(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams? = nil, completion: @escaping (_ badgeCounter: Int) -> (), failure: @escaping (_ error: Error) -> ())")
  dynamic public class func getUnreadMessagesCount(brandID: Swift.String, completion: @escaping (Swift.Int) -> (), failure: @escaping (Swift.Error) -> ())
  @objc dynamic public func getUnreadMessagesCount(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, authenticationParams: LPMessagingSDK.LPAuthenticationParams? = nil, completion: @escaping (Swift.Int) -> (), failure: @escaping (Swift.Error) -> ())
  @objc dynamic public func isRegisteredForPushNotifications(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, authenticationParams: LPMessagingSDK.LPAuthenticationParams? = nil, token: Foundation.Data, alternateBundleID: Swift.String? = nil, completion: @escaping (Swift.Bool) -> (), failure: @escaping (Swift.Error) -> ())
  @objc dynamic public func handlePush(_ userInfo: [Swift.AnyHashable : Any])
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentPublishTextAction : LPMessagingSDK.LPStructuredContentAction {
  public var text: Swift.String {
    get
  }
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol ConversationViewControllerAgentDelegate {
  @objc optional func agentDidChangeUserInputText(_ text: Swift.String)
}
@_hasMissingDesignatedInitializers public class LPStructuredContentParser {
  public class func getStructuredContentLayoutContainer(fromJson json: [Swift.String : Any]) -> LPMessagingSDK.LPStructuredContentItemContainer?
  @objc deinit
}
extension LPMessaging {
  @objc dynamic public func destruct()
  @objc @available(iOS, deprecated: 9.3.5, obsoleted: 14.0.0, message: "Use logout(completion: @escaping ()->(), failure: @escaping (_ error: Error)->()) instead")
  dynamic public func logout()
  @objc dynamic public func logout(completion: @escaping () -> (), failure: @escaping ([Swift.Error]) -> ())
}
public protocol LPStructuredContentLoggerDelegate : AnyObject {
  func lpStructuredContentLogger(message: Swift.String)
}
@_hasMissingDesignatedInitializers final public class LPStructuredContentLogger {
  weak final public var delegate: LPMessagingSDK.LPStructuredContentLoggerDelegate?
  public static let instance: LPMessagingSDK.LPStructuredContentLogger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NotificationPayload {
  public enum PayloadType : Swift.String {
    case ring
    case message
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var conversation: LPMessagingSDK.Conversation?
  public var text: Swift.String
  public var userID: Swift.String?
  public var type: LPMessagingSDK.NotificationPayload.PayloadType?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentLinkAction : LPMessagingSDK.LPStructuredContentAction {
  public var uri: Swift.String {
    get
  }
  public var deepLinkUri: Swift.String? {
    get
  }
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentAction : ObjectiveC.NSObject, Foundation.NSCoding {
  public var ID: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var actionType: LPMessagingSDK.LPStructuredContentActionType? {
    get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc public class LPNotification : ObjectiveC.NSObject {
  @objc public var text: Swift.String
  @objc public var user: LPMessagingSDK.LPUser
  @objc public var accountID: Swift.String
  @objc public var isRemote: Swift.Bool
  @objc public var toString: Swift.String {
    @objc get
  }
  @objc convenience public init(text: Swift.String, firstName: Swift.String?, lastName: Swift.String?, uid: Swift.String?, accountID: Swift.String, isRemote: Swift.Bool = false)
  @objc convenience public init(message: LPMessagingSDK.Message, isRemote: Swift.Bool = false)
  @objc public init(text: Swift.String, user: LPMessagingSDK.LPUser, accountID: Swift.String, isRemote: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LPMessaging : ObjectiveC.NSObject {
  @objc weak public var delegate: LPMessagingSDK.LPMessagingSDKdelegate?
  @objc weak public var notificationDelegate: LPMessagingSDK.LPMessagingSDKNotificationDelegate? {
    @objc get
    @objc set
  }
  @objc public static let instance: LPMessagingSDK.LPMessaging
  @objc public func initialize(_ brandID: Swift.String? = nil, monitoringInitParams: LPMessagingSDK.LPMonitoringInitParams? = nil) throws
  @objc @available(iOS, deprecated: 9.3.5, obsoleted: 14.0.0, message: "Use showConversation(_ conversationViewParams: LPConversationViewParams) instead")
  public func showConversation(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, authenticationCode: Swift.String? = nil, containerViewController: UIKit.UIViewController? = nil)
  @objc public func showConversation(_ conversationViewParams: LPMessagingSDK.LPConversationViewParams, authenticationParams: LPMessagingSDK.LPAuthenticationParams? = nil)
  @objc public func removeConversation(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol)
  @objc @available(iOS, deprecated: 9.3.5, obsoleted: 14.0.0, message: "Use reconnect(_ conversationQuery: ConversationParamProtocol, authenticationParams: LPAuthenticationParams) instead")
  public func reconnect(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, authenticationCode: Swift.String)
  @objc public func reconnect(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol, authenticationParams: LPMessagingSDK.LPAuthenticationParams)
  @objc public func toggleChatActions(_ accountID: Swift.String, sender: UIKit.UIBarButtonItem? = nil)
  @objc public func setUserProfile(_ lpuser: LPMessagingSDK.LPUser, brandID: Swift.String)
  @objc public func getConversationBrandQuery(_ brandID: Swift.String, campaignInfo: LPMessagingSDK.LPCampaignInfo? = nil) -> LPMessagingSDK.ConversationParamProtocol
  @objc public func getConversationConsumerQuery(_ consumerID: Swift.String?, brandID: Swift.String, agentToken: Swift.String) -> LPMessagingSDK.ConversationParamProtocol
  @objc public func checkActiveConversation(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol) -> Swift.Bool
  @objc @available(iOS, deprecated: 9.3.5, obsoleted: 14.0.0, message: "configure the image using customButtonImage in LPConfig instead")
  public func setCustomButton(_ image: UIKit.UIImage?)
  @objc public func isUrgent(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol) -> Swift.Bool
  @objc public func markAsUrgent(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol)
  @objc public func dismissUrgent(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol)
  @objc public func resolveConversation(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol)
  @objc public func getAssignedAgent(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol) -> LPMessagingSDK.LPUser?
  @objc public func isBrandReady(_ brandID: Swift.String) -> Swift.Bool
  @objc public func getSDKVersion() -> Swift.String?
  @objc public func addContentToMessage(text: Swift.String)
  @objc public func getInactiveUserInteractionTimeInterval(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol) -> Foundation.TimeInterval
  @objc public func getEngagement(identities: [LPMessagingSDK.LPMonitoringIdentity], monitoringParams: LPMessagingSDK.LPMonitoringParams?, completion: @escaping (LPMessagingSDK.LPGetEngagementResponse) -> (), failure: @escaping (Foundation.NSError) -> ())
  @objc public func setAuthenticationParams(authenticationParams: LPMessagingSDK.LPAuthenticationParams, brandID: Swift.String)
  @objc public func sendSDE(identities: [LPMessagingSDK.LPMonitoringIdentity], monitoringParams: LPMessagingSDK.LPMonitoringParams, completion: @escaping (LPMessagingSDK.LPSendSDEResponse) -> (), failure: @escaping (Foundation.NSError) -> ())
  @objc public func clearHistory(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol) throws
  @objc public func printAllLocalizedKeys()
  @objc public func printSupportedLanguages()
  @objc public func printSupportedRegions()
  @objc public func getAllSupportedLanguages() -> [Swift.String : Swift.String]
  @objc public func getAllSupportedRegions() -> [Swift.String : Swift.String]
  @objc public func setPushNotificationTapped()
  @objc public func setLoggingLevel(level: LPMessagingSDK.LPLoggingLevel)
  @objc public func getLogSnapshot(level: LPMessagingSDK.LPLoggingLevel) -> [Swift.String]
  @objc public func getLogStringBlock(level: LPMessagingSDK.LPLoggingLevel) -> Swift.String
  @objc public func setDataMaskingEnabled(enabled: Swift.Bool)
  @objc @available(iOS, deprecated: 12.1.4, obsoleted: 14.0.0, message: "Use resolveConversation(_ conversation: Conversation, completion: (() -> Void)? = {()}) instead")
  public class func resolveConversation(_ conversation: LPMessagingSDK.Conversation)
  @objc @available(iOS, deprecated: 12.1.4, obsoleted: 14.0.0, message: "Use resolveConversationForConversationQuery(_ conversationQuery: ConversationParamProtocol, completion: (() -> Void)? = {()}) instead")
  public class func resolveConversationForConversationQuery(_ conversationQuery: LPMessagingSDK.ConversationParamProtocol)
  @objc @available(iOS, deprecated: 12.2.0, obsoleted: 14.0.0, message: "Use createWelcomeLocalMessage(_ dialog: Dialog, welcomeMessage: LPWelcomeMessage, overrideTime: Date = Date()) -> Message? instead")
  public class func createWelcomeLocalMessage(_ dialog: LPMessagingSDK.Dialog, overrideTime: Foundation.Date = Date()) -> LPMessagingSDK.Message?
  @objc @available(iOS, deprecated: 12.1.0, obsoleted: 14.0.0, message: "Use unregisterPusherFor(_ brandId: String) instead")
  public class func unregisterPusher(_ brand: LPMessagingSDK.Brand, completion: @escaping () -> (), failure: @escaping (Swift.Error) -> ())
  @objc @available(iOS, deprecated: 11.4.0, obsoleted: 14.0.0, message: "Use getEngagement(identity: LPMonitoringIdentity, monitoringParams: LPMonitoringParams?, completion: @escaping (_ response: LPGetEngagementResponse)->(), failure: @escaping (_ error: NSError)->()) instead")
  public func getEngagement(consumerID: Swift.String?, monitoringParams: LPMessagingSDK.LPMonitoringParams?, completion: @escaping (LPMessagingSDK.LPGetEngagementResponse) -> (), failure: @escaping (Foundation.NSError) -> ())
  @objc @available(iOS, deprecated: 11.4.0, obsoleted: 14.0.0, message: "Use sendSDE(identity: LPMonitoringIdentity, monitoringParams: LPMonitoringParams, completion: @escaping (_ response: LPSendSDEResponse)->(), failure: @escaping (_ error: NSError)->()) instead")
  public func sendSDE(consumerID: Swift.String, monitoringParams: LPMessagingSDK.LPMonitoringParams, completion: @escaping (LPMessagingSDK.LPSendSDEResponse) -> (), failure: @escaping (Foundation.NSError) -> ())
  @objc deinit
}
@objc public protocol LPMessagingSDKNotificationDelegate {
  @objc optional func LPMessagingSDKNotification(didReceivePushNotification notification: LPMessagingSDK.LPNotification)
  @objc optional func LPMessagingSDKNotification(shouldShowPushNotification notification: LPMessagingSDK.LPNotification) -> Swift.Bool
  @objc optional func LPMessagingSDKNotification(customLocalPushNotificationView notification: LPMessagingSDK.LPNotification) -> UIKit.UIView
  @objc optional func LPMessagingSDKNotification(notificationTapped notification: LPMessagingSDK.LPNotification)
}
extension LPMessaging {
  public enum SDKInitializationErrorType : Swift.Error {
    case configurationError
    case clearHistoryError
    case coreDataError
    case brandError
    case alreadyInitialized
    public var description: Swift.String {
      get
    }
    public func getError() -> Foundation.NSError
    public static func == (a: LPMessagingSDK.LPMessaging.SDKInitializationErrorType, b: LPMessagingSDK.LPMessaging.SDKInitializationErrorType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc @_hasMissingDesignatedInitializers public class LPStructuredContentClick : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic public init()
  @objc deinit
}
public protocol LPStructuredContentImageDownloader {
  func LPStructuredContentNeedsImageToDownload(imageURL: Swift.String, resizeImageSize: CoreGraphics.CGSize, completion: @escaping (UIKit.UIImage?) -> (), failure: (() -> ())?)
}
@objc public protocol LPMessagingSDKdelegate {
  @objc optional func LPMessagingSDKCustomButtonTapped()
  @objc optional func LPMessagingSDKAgentDetails(_ agent: LPMessagingSDK.LPUser?)
  @objc optional func LPMessagingSDKAgentAvatarTapped(_ agent: LPMessagingSDK.LPUser?)
  @objc optional func LPMessagingSDKActionsMenuToggled(_ toggled: Swift.Bool)
  @objc optional func LPMessagingSDKHasConnectionError(_ error: Swift.String?)
  @objc optional func LPMessagingSDKCSATScoreSubmissionDidFinish(_ brandID: Swift.String, rating: Swift.Int)
  @objc optional func LPMessagingSDKCSATCustomTitleView(_ brandID: Swift.String) -> UIKit.UIView
  @objc optional func LPMessagingSDKConversationCSATSkipped(_ conversationID: Swift.String?)
  @objc optional func LPMessagingSDKUserDeniedPermission(_ permissionType: LPMessagingSDK.LPPermissionTypes)
  @objc func LPMessagingSDKObseleteVersion(_ error: Foundation.NSError)
  @objc func LPMessagingSDKAuthenticationFailed(_ error: Foundation.NSError)
  @objc func LPMessagingSDKTokenExpired(_ brandID: Swift.String)
  @objc func LPMessagingSDKError(_ error: Foundation.NSError)
  @objc optional func LPMessagingSDKConnectionRetriesFailed(_ error: Foundation.NSError)
  @objc optional func LPMessagingSDKAgentIsTypingStateChanged(_ isTyping: Swift.Bool)
  @objc optional func LPMessagingSDKConversationStarted(_ conversationID: Swift.String?)
  @available(iOS, deprecated: 9.3.5, obsoleted: 14.0.0, message: "use LPMessagingSDKConversationEnded(_:closeReason) instead")
  @objc optional func LPMessagingSDKConversationEnded(_ conversationID: Swift.String?)
  @objc optional func LPMessagingSDKConversationEnded(_ conversationID: Swift.String?, closeReason: LPMessagingSDK.LPConversationCloseReason)
  @objc optional func LPMessagingSDKConversationCSATDismissedOnSubmittion(_ conversationID: Swift.String?)
  @objc optional func LPMessagingSDKConversationCSATDidLoad(_ conversationID: Swift.String?)
  @objc optional func LPMessagingSDKConnectionStateChanged(_ isReady: Swift.Bool, brandID: Swift.String)
  @objc optional func LPMessagingSDKOffHoursStateChanged(_ isOffHours: Swift.Bool, brandID: Swift.String)
  @objc optional func LPMessagingSDKConversationViewControllerDidDismiss()
  @objc optional func LPMessagingSDKCertPinningFailed(_ error: Foundation.NSError)
  @objc optional func LPMessagingSDKPushRegistrationDidFinish()
  @objc optional func LPMessagingSDKPushRegistrationDidFail(_ error: Foundation.NSError)
  @objc optional func LPMessagingSDKUnauthenticatedUserExpired()
}
@_hasMissingDesignatedInitializers public class LPStructuredContentSettings {
  public static let instance: LPMessagingSDK.LPStructuredContentSettings
  public var STRUCTURED_CONTENT_IMAGE_MAX_WIDTH_SIZE: CoreGraphics.CGFloat
  public var STRUCTURED_CONTENT_IMAGE_MAX_HEIGHT_SIZE: CoreGraphics.CGFloat
  public var STRUCTURED_CONTENT_PORTRAIT_WIDTH_RATIO: CoreGraphics.CGFloat
  public var STRUCTURED_CONTENT_LANDSCAPE_WIDTH_RATIO: CoreGraphics.CGFloat
  public var buttonTextLineBreakMode: UIKit.NSLineBreakMode
  public var newStructuredContentMessage: Swift.String
  public var structuredContentItemError: Swift.String
  public var structuredContentAccessibilityMap: Swift.String
  public var textHeadlineFont: UIKit.UIFont
  public var textSubHeadlineFont: UIKit.UIFont
  public var textCaptionFont: UIKit.UIFont
  public var buttonTextFont: UIKit.UIFont
  public var cardBackgroundColor: UIKit.UIColor
  public var carouselScrollBackgroundColor: UIKit.UIColor
  public var contentStyleColor: UIKit.UIColor
  public var contentStyleBackgroundColor: UIKit.UIColor
  public var bubbleBorderColor: UIKit.UIColor
  public var buttonBorderColor: UIKit.UIColor
  public var buttonLinkForegroundColor: UIKit.UIColor
  public var buttonTextLinkColor: UIKit.UIColor
  public var buttonTextColor: UIKit.UIColor
  public var buttonHighlightedBackgroundColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public var imageViewGrayColor: UIKit.UIColor
  public var loadingImage: UIKit.UIImage?
  public var useCacheImageIfNeeded: Swift.Bool
  public var brokenImage: UIKit.UIImage?
  public var bubbleBorderWidth: Swift.Double
  public var bubbleTopLeftCornerRadius: Swift.Float
  public var bubbleTopRightCornerRadius: Swift.Float
  public var bubbleBottomLeftCornerRadius: Swift.Float
  public var bubbleBottomRightCornerRadius: Swift.Float
  public var mapLatitudeDeltaSpan: Swift.Double
  public var mapLongitudeDeltaSpan: Swift.Double
  @objc deinit
}
extension LPMessagingSDK.QuickReplyStyleSize : Swift.Equatable {}
extension LPMessagingSDK.QuickReplyStyleSize : Swift.Hashable {}
extension LPMessagingSDK.QuickReplyStyleSize : Swift.RawRepresentable {}
extension LPMessagingSDK.FileState : Swift.Equatable {}
extension LPMessagingSDK.FileState : Swift.Hashable {}
extension LPMessagingSDK.FileState : Swift.RawRepresentable {}
extension LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition : Swift.Equatable {}
extension LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition : Swift.Hashable {}
extension LPMessagingSDK.LPConversationScrollConfiguration.ScrollPosition : Swift.RawRepresentable {}
extension LPMessagingSDK.QuickReplyJsonKeys : Swift.Equatable {}
extension LPMessagingSDK.QuickReplyJsonKeys : Swift.Hashable {}
extension LPMessagingSDK.QuickReplyJsonKeys : Swift.RawRepresentable {}
extension LPMessagingSDK.CustomItemType : Swift.Equatable {}
extension LPMessagingSDK.CustomItemType : Swift.Hashable {}
extension LPMessagingSDK.CustomItemType : Swift.RawRepresentable {}
extension LPMessagingSDK.ImageState : Swift.Equatable {}
extension LPMessagingSDK.ImageState : Swift.Hashable {}
extension LPMessagingSDK.ImageState : Swift.RawRepresentable {}
extension LPMessagingSDK.ConversationQueryType : Swift.Equatable {}
extension LPMessagingSDK.ConversationQueryType : Swift.Hashable {}
extension LPMessagingSDK.ConversationQueryType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPLanguagesKeys : Swift.Equatable {}
extension LPMessagingSDK.LPLanguagesKeys : Swift.Hashable {}
extension LPMessagingSDK.LPLanguagesKeys : Swift.RawRepresentable {}
extension LPMessagingSDK.ConversationState : Swift.Equatable {}
extension LPMessagingSDK.ConversationState : Swift.Hashable {}
extension LPMessagingSDK.ConversationState : Swift.RawRepresentable {}
extension LPMessagingSDK.TTRType : Swift.Equatable {}
extension LPMessagingSDK.TTRType : Swift.Hashable {}
extension LPMessagingSDK.TTRType : Swift.RawRepresentable {}
extension LPMessagingSDK.CheckmarksState : Swift.Equatable {}
extension LPMessagingSDK.CheckmarksState : Swift.Hashable {}
extension LPMessagingSDK.CheckmarksState : Swift.RawRepresentable {}
extension LPMessagingSDK.LPPreferredFontType : Swift.Equatable {}
extension LPMessagingSDK.LPPreferredFontType : Swift.Hashable {}
extension LPMessagingSDK.LPAccountEnviroment : Swift.Equatable {}
extension LPMessagingSDK.LPAccountEnviroment : Swift.Hashable {}
extension LPMessagingSDK.LPAccountEnviroment : Swift.RawRepresentable {}
extension LPMessagingSDK.LPLanguage : Swift.Equatable {}
extension LPMessagingSDK.LPLanguage : Swift.Hashable {}
extension LPMessagingSDK.LPLanguage : Swift.RawRepresentable {}
extension LPMessagingSDK.LPRegionCode : Swift.Equatable {}
extension LPMessagingSDK.LPRegionCode : Swift.Hashable {}
extension LPMessagingSDK.LPRegionCode : Swift.RawRepresentable {}
extension LPMessagingSDK.LPUrlPreviewStyle : Swift.Equatable {}
extension LPMessagingSDK.LPUrlPreviewStyle : Swift.Hashable {}
extension LPMessagingSDK.LPUrlPreviewStyle : Swift.RawRepresentable {}
extension LPMessagingSDK.LPConversationsHistoryStateToDisplay : Swift.Equatable {}
extension LPMessagingSDK.LPConversationsHistoryStateToDisplay : Swift.Hashable {}
extension LPMessagingSDK.LPConversationsHistoryStateToDisplay : Swift.RawRepresentable {}
extension LPMessagingSDK.LPConversationHistoryMaxDaysDateType : Swift.Equatable {}
extension LPMessagingSDK.LPConversationHistoryMaxDaysDateType : Swift.Hashable {}
extension LPMessagingSDK.LPConversationHistoryMaxDaysDateType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPAuthenticationType : Swift.Equatable {}
extension LPMessagingSDK.LPAuthenticationType : Swift.Hashable {}
extension LPMessagingSDK.LPAuthenticationType : Swift.RawRepresentable {}
extension LPMessagingSDK.FormState : Swift.Equatable {}
extension LPMessagingSDK.FormState : Swift.Hashable {}
extension LPMessagingSDK.FormState : Swift.RawRepresentable {}
extension LPMessagingSDK.MessageType : Swift.Equatable {}
extension LPMessagingSDK.MessageType : Swift.Hashable {}
extension LPMessagingSDK.MessageType : Swift.RawRepresentable {}
extension LPMessagingSDK.LocalMessageType : Swift.Equatable {}
extension LPMessagingSDK.LocalMessageType : Swift.Hashable {}
extension LPMessagingSDK.LocalMessageType : Swift.RawRepresentable {}
extension LPMessagingSDK.MessageStatus : Swift.Equatable {}
extension LPMessagingSDK.MessageStatus : Swift.Hashable {}
extension LPMessagingSDK.MessageStatus : Swift.RawRepresentable {}
extension LPMessagingSDK.LinkPreviewState : Swift.Equatable {}
extension LPMessagingSDK.LinkPreviewState : Swift.Hashable {}
extension LPMessagingSDK.LinkPreviewState : Swift.RawRepresentable {}
extension LPMessagingSDK.MessagingServiceEvent.MessagingServiceEventType : Swift.Equatable {}
extension LPMessagingSDK.MessagingServiceEvent.MessagingServiceEventType : Swift.Hashable {}
extension LPMessagingSDK.MessagingServiceEvent.MessagingServiceEventType : Swift.RawRepresentable {}
extension LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType : Swift.Equatable {}
extension LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType : Swift.Hashable {}
extension LPMessagingSDK.MessagingServiceEvent.NotificationDistributionType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPMessagingSDKFeature : Swift.Equatable {}
extension LPMessagingSDK.LPMessagingSDKFeature : Swift.Hashable {}
extension LPMessagingSDK.LPMessagingSDKFeature : Swift.RawRepresentable {}
extension LPMessagingSDK.LPLinkUtils.LinkType : Swift.Equatable {}
extension LPMessagingSDK.LPLinkUtils.LinkType : Swift.Hashable {}
extension LPMessagingSDK.LPStructuredContentItemType : Swift.Equatable {}
extension LPMessagingSDK.LPStructuredContentItemType : Swift.Hashable {}
extension LPMessagingSDK.LPStructuredContentItemType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPStructuredContentActionType : Swift.Equatable {}
extension LPMessagingSDK.LPStructuredContentActionType : Swift.Hashable {}
extension LPMessagingSDK.LPStructuredContentActionType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPStructuredContentStyleSize : Swift.Equatable {}
extension LPMessagingSDK.LPStructuredContentStyleSize : Swift.Hashable {}
extension LPMessagingSDK.LPStructuredContentStyleSize : Swift.RawRepresentable {}
extension LPMessagingSDK.LPSpecielViewTags : Swift.Equatable {}
extension LPMessagingSDK.LPSpecielViewTags : Swift.Hashable {}
extension LPMessagingSDK.LPSpecielViewTags : Swift.RawRepresentable {}
extension LPMessagingSDK.LPWelcomeMessage.MessageFrequency : Swift.Equatable {}
extension LPMessagingSDK.LPWelcomeMessage.MessageFrequency : Swift.Hashable {}
extension LPMessagingSDK.LPWelcomeMessage.MessageFrequency : Swift.RawRepresentable {}
extension LPMessagingSDK.LPWelcomeMessage.LPWelcomeMessageError : Swift.Equatable {}
extension LPMessagingSDK.LPWelcomeMessage.LPWelcomeMessageError : Swift.Hashable {}
extension LPMessagingSDK.LPWelcomeMessage.LPWelcomeMessageError : Swift.RawRepresentable {}
extension LPMessagingSDK.LPFlowTag : Swift.Equatable {}
extension LPMessagingSDK.LPFlowTag : Swift.Hashable {}
extension LPMessagingSDK.LPLoggingLevel : Swift.Equatable {}
extension LPMessagingSDK.LPLoggingLevel : Swift.Hashable {}
extension LPMessagingSDK.LPLoggingLevel : Swift.RawRepresentable {}
extension LPMessagingSDK.QuickReplyActionType : Swift.Equatable {}
extension LPMessagingSDK.QuickReplyActionType : Swift.Hashable {}
extension LPMessagingSDK.QuickReplyActionType : Swift.RawRepresentable {}
extension LPMessagingSDK.HTTPMethod : Swift.Equatable {}
extension LPMessagingSDK.HTTPMethod : Swift.Hashable {}
extension LPMessagingSDK.HTTPMethod : Swift.RawRepresentable {}
extension LPMessagingSDK.TokenType : Swift.Equatable {}
extension LPMessagingSDK.TokenType : Swift.Hashable {}
extension LPMessagingSDK.TokenType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPRecorderStatus : Swift.Equatable {}
extension LPMessagingSDK.LPRecorderStatus : Swift.Hashable {}
extension LPMessagingSDK.LPRecorderStatus : Swift.RawRepresentable {}
extension LPMessagingSDK.LPPlayerStatus : Swift.Equatable {}
extension LPMessagingSDK.LPPlayerStatus : Swift.Hashable {}
extension LPMessagingSDK.LPPlayerStatus : Swift.RawRepresentable {}
extension LPMessagingSDK.ContentType : Swift.Equatable {}
extension LPMessagingSDK.ContentType : Swift.Hashable {}
extension LPMessagingSDK.ContentType : Swift.RawRepresentable {}
extension LPMessagingSDK.CSDSService : Swift.Equatable {}
extension LPMessagingSDK.CSDSService : Swift.Hashable {}
extension LPMessagingSDK.CSDSService : Swift.RawRepresentable {}
extension LPMessagingSDK.LPConversationCloseReason : Swift.Equatable {}
extension LPMessagingSDK.LPConversationCloseReason : Swift.Hashable {}
extension LPMessagingSDK.LPConversationCloseReason : Swift.RawRepresentable {}
extension LPMessagingSDK.AgentState : Swift.Equatable {}
extension LPMessagingSDK.AgentState : Swift.Hashable {}
extension LPMessagingSDK.AgentState : Swift.RawRepresentable {}
extension LPMessagingSDK.ChannelType : Swift.Equatable {}
extension LPMessagingSDK.ChannelType : Swift.Hashable {}
extension LPMessagingSDK.ChannelType : Swift.RawRepresentable {}
extension LPMessagingSDK.RoleType : Swift.Equatable {}
extension LPMessagingSDK.RoleType : Swift.Hashable {}
extension LPMessagingSDK.RoleType : Swift.RawRepresentable {}
extension LPMessagingSDK.AMSState : Swift.Equatable {}
extension LPMessagingSDK.AMSState : Swift.Hashable {}
extension LPMessagingSDK.AMSState : Swift.RawRepresentable {}
extension LPMessagingSDK.InactivityState : Swift.Equatable {}
extension LPMessagingSDK.InactivityState : Swift.Hashable {}
extension LPMessagingSDK.InactivityState : Swift.RawRepresentable {}
extension LPMessagingSDK.AMSStateError : Swift.Equatable {}
extension LPMessagingSDK.AMSStateError : Swift.Hashable {}
extension LPMessagingSDK.AMSStateError : Swift.RawRepresentable {}
extension LPMessagingSDK.LPPermissionTypes : Swift.Equatable {}
extension LPMessagingSDK.LPPermissionTypes : Swift.Hashable {}
extension LPMessagingSDK.LPPermissionTypes : Swift.RawRepresentable {}
extension LPMessagingSDK.LPKeychainKey : Swift.Equatable {}
extension LPMessagingSDK.LPKeychainKey : Swift.Hashable {}
extension LPMessagingSDK.LPKeychainKey : Swift.RawRepresentable {}
extension LPMessagingSDK.UserType : Swift.Equatable {}
extension LPMessagingSDK.UserType : Swift.Hashable {}
extension LPMessagingSDK.UserType : Swift.RawRepresentable {}
extension LPMessagingSDK.DialogType : Swift.Equatable {}
extension LPMessagingSDK.DialogType : Swift.Hashable {}
extension LPMessagingSDK.DialogType : Swift.RawRepresentable {}
extension LPMessagingSDK.ChannelTypes : Swift.Equatable {}
extension LPMessagingSDK.ChannelTypes : Swift.Hashable {}
extension LPMessagingSDK.ChannelTypes : Swift.RawRepresentable {}
extension LPMessagingSDK.ChatState : Swift.Equatable {}
extension LPMessagingSDK.ChatState : Swift.Hashable {}
extension LPMessagingSDK.ChatState : Swift.RawRepresentable {}
extension LPMessagingSDK.DialogState : Swift.Equatable {}
extension LPMessagingSDK.DialogState : Swift.Hashable {}
extension LPMessagingSDK.DialogState : Swift.RawRepresentable {}
extension LPMessagingSDK.SocketType : Swift.Equatable {}
extension LPMessagingSDK.SocketType : Swift.Hashable {}
extension LPMessagingSDK.SocketType : Swift.RawRepresentable {}
extension LPMessagingSDK.NotificationPayload.PayloadType : Swift.Equatable {}
extension LPMessagingSDK.NotificationPayload.PayloadType : Swift.Hashable {}
extension LPMessagingSDK.NotificationPayload.PayloadType : Swift.RawRepresentable {}
extension LPMessagingSDK.LPMessaging.SDKInitializationErrorType : Swift.Equatable {}
extension LPMessagingSDK.LPMessaging.SDKInitializationErrorType : Swift.Hashable {}
